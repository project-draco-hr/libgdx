{
  manifold.pointCount=0;
  Transform.mulToOut(xfB,circle.m_p,c);
  Transform.mulTransToOut(xfA,c,cLocal);
  final float cLocalx=cLocal.x;
  final float cLocaly=cLocal.y;
  int normalIndex=0;
  float separation=Float.MIN_VALUE;
  final float radius=polygon.m_radius + circle.m_radius;
  final int vertexCount=polygon.m_count;
  final Vec2[] vertices=polygon.m_vertices;
  final Vec2[] normals=polygon.m_normals;
  for (int i=0; i < vertexCount; i++) {
    final Vec2 vertex=vertices[i];
    final float tempx=cLocalx - vertex.x;
    final float tempy=cLocaly - vertex.y;
    final Vec2 normal=normals[i];
    final float s=normal.x * tempx + normal.y * tempy;
    if (s > radius) {
      return;
    }
    if (s > separation) {
      separation=s;
      normalIndex=i;
    }
  }
  final int vertIndex1=normalIndex;
  final int vertIndex2=vertIndex1 + 1 < vertexCount ? vertIndex1 + 1 : 0;
  final Vec2 v1=vertices[vertIndex1];
  final Vec2 v2=vertices[vertIndex2];
  if (separation < Settings.EPSILON) {
    manifold.pointCount=1;
    manifold.type=ManifoldType.FACE_A;
    final Vec2 normal=normals[normalIndex];
    manifold.localNormal.x=normal.x;
    manifold.localNormal.y=normal.y;
    manifold.localPoint.x=(v1.x + v2.x) * .5f;
    manifold.localPoint.y=(v1.y + v2.y) * .5f;
    final ManifoldPoint mpoint=manifold.points[0];
    mpoint.localPoint.x=circle.m_p.x;
    mpoint.localPoint.y=circle.m_p.y;
    mpoint.id.zero();
    return;
  }
  final float tempX=cLocalx - v1.x;
  final float tempY=cLocaly - v1.y;
  final float temp2X=v2.x - v1.x;
  final float temp2Y=v2.y - v1.y;
  final float u1=tempX * temp2X + tempY * temp2Y;
  final float temp3X=cLocalx - v2.x;
  final float temp3Y=cLocaly - v2.y;
  final float temp4X=v1.x - v2.x;
  final float temp4Y=v1.y - v2.y;
  final float u2=temp3X * temp4X + temp3Y * temp4Y;
  if (u1 <= 0f) {
    final float dx=cLocalx - v1.x;
    final float dy=cLocaly - v1.y;
    if (dx * dx + dy * dy > radius * radius) {
      return;
    }
    manifold.pointCount=1;
    manifold.type=ManifoldType.FACE_A;
    manifold.localNormal.x=cLocalx - v1.x;
    manifold.localNormal.y=cLocaly - v1.y;
    manifold.localNormal.normalize();
    manifold.localPoint.set(v1);
    manifold.points[0].localPoint.set(circle.m_p);
    manifold.points[0].id.zero();
  }
 else   if (u2 <= 0.0f) {
    final float dx=cLocalx - v2.x;
    final float dy=cLocaly - v2.y;
    if (dx * dx + dy * dy > radius * radius) {
      return;
    }
    manifold.pointCount=1;
    manifold.type=ManifoldType.FACE_A;
    manifold.localNormal.x=cLocalx - v2.x;
    manifold.localNormal.y=cLocaly - v2.y;
    manifold.localNormal.normalize();
    manifold.localPoint.set(v2);
    manifold.points[0].localPoint.set(circle.m_p);
    manifold.points[0].id.zero();
  }
 else {
    final float fcx=(v1.x + v2.x) * .5f;
    final float fcy=(v1.y + v2.y) * .5f;
    final float tx=cLocalx - fcx;
    final float ty=cLocaly - fcy;
    final Vec2 normal=normals[vertIndex1];
    separation=tx * normal.x + ty * normal.y;
    if (separation > radius) {
      return;
    }
    manifold.pointCount=1;
    manifold.type=ManifoldType.FACE_A;
    manifold.localNormal.set(normals[vertIndex1]);
    manifold.localPoint.x=fcx;
    manifold.localPoint.y=fcy;
    manifold.points[0].localPoint.set(circle.m_p);
    manifold.points[0].id.zero();
  }
}
