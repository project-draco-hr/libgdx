{
  lightManager=new LightManager(LIGHTS_NUM,LightQuality.FRAGMENT);
  for (int i=0; i < LIGHTS_NUM; i++) {
    PointLight l=new PointLight();
    l.position.set(MathUtils.random(8) - 4,MathUtils.random(6),MathUtils.random(8) - 4);
    l.color.r=MathUtils.random();
    l.color.b=MathUtils.random();
    l.color.g=MathUtils.random();
    l.intensity=LIGHT_INTESITY;
    lightManager.addLigth(l);
  }
  lightManager.dirLight=new DirectionalLight();
  lightManager.dirLight.color.set(0.075f,0.075f,0.08f,1);
  lightManager.dirLight.direction.set(-.4f,-1,0.03f).nor();
  lightManager.ambientLight.set(.14f,0.09f,0.09f,0f);
  cam=new PerspectiveCamera(45,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
  cam.near=0.1f;
  cam.far=64f;
  cam.position.set(0,0.5f,-2f);
  cam.update();
  camController=new PerspectiveCamController(cam);
  Gdx.input.setInputProcessor(camController);
  texture=new Texture(Gdx.files.internal("data/multipleuvs_1.png"),Format.RGB565,true);
  texture.setFilter(TextureFilter.MipMapLinearNearest,TextureFilter.Linear);
  texture2=new Texture(Gdx.files.internal("data/texture2UV1S.png"),Format.RGB565,true);
  texture2.setFilter(TextureFilter.MipMapLinearNearest,TextureFilter.Linear);
  model=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/models/sphere.obj"));
  model2=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/models/basicscene.obj"));
  instance=new StillModelNode();
  instance.getTransform().translate(0,0,-5);
  instance2=new StillModelNode();
  BoundingBox box=new BoundingBox();
  model.getBoundingBox(box);
  instance.radius=box.getDimensions().len() / 2;
  model2.getBoundingBox(box);
  instance2.radius=box.getDimensions().len() / 2;
  protoRenderer=new PrototypeRendererGL20(lightManager);
  protoRenderer.cam=cam;
  MaterialAttribute c1=new ColorAttribute(new Color(0.5f,0.35f,0.95f,0.6f),ColorAttribute.diffuse);
  MaterialAttribute c2=new ColorAttribute(new Color(0.25f,0.5f,0.75f,0.35f),ColorAttribute.specular);
  MaterialAttribute t1=new TextureAttribute(texture,0,TextureAttribute.diffuseTexture);
  MaterialAttribute t2=new TextureAttribute(texture2,1,TextureAttribute.specularTexture);
  MaterialAttribute b=new BlendingAttribute(BlendingAttribute.translucent);
  Material material2=new Material("basic",c1,c2,t1,t2);
  model2.setMaterial(material2);
  Material material=new Material("shiningBall",c1,c2,b);
  model.setMaterial(material);
}
