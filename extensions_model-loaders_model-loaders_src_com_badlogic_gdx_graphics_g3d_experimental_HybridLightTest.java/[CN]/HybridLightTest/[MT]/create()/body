{
  modelMatrix2.translate(0,2,-8);
  lightShader=ShaderLoader.createShader("vertexpath","vertexpath");
  lightManager=new LightManager(LIGHTS_NUM);
  for (int i=0; i < 8; i++) {
    PointLight l=new PointLight();
    l.position.set(MathUtils.random(16) - 8,MathUtils.random(6) - 2,-MathUtils.random(16) + 2);
    l.color.r=MathUtils.random();
    l.color.b=MathUtils.random();
    l.color.g=MathUtils.random();
    l.intensity=LIGHT_INTESITY;
    lightManager.addLigth(l);
  }
  cam=new PerspectiveCamera(67,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
  cam.near=0.1f;
  cam.far=64f;
  cam.position.set(0,0.5f,-2f);
  cam.update();
  camController=new PerspectiveCamController(cam);
  Gdx.input.setInputProcessor(camController);
  texture=new Texture(Gdx.files.internal("data/multipleuvs_1.png"),null,true);
  texture.setFilter(TextureFilter.MipMapLinearNearest,TextureFilter.Linear);
  texture2=new Texture(Gdx.files.internal("data/wall.png"),null,true);
  texture2.setFilter(TextureFilter.MipMapLinearNearest,TextureFilter.Linear);
  try {
    InputStream in=Gdx.files.internal("data/models/sphere.obj").read();
    mesh=ObjLoader.loadObj(in);
    in.close();
    in=Gdx.files.internal("data/models/basicscene.obj").read();
    mesh2=ObjLoader.loadObj(in);
    in.close();
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  mesh2.scale(1.25f,1.25f,1.25f);
  mesh.getVertexAttribute(Usage.Position).alias="a_position";
  mesh.getVertexAttribute(Usage.Normal).alias="a_normal";
  mesh2.getVertexAttribute(Usage.Position).alias="a_position";
  mesh2.getVertexAttribute(Usage.Normal).alias="a_normal";
}
