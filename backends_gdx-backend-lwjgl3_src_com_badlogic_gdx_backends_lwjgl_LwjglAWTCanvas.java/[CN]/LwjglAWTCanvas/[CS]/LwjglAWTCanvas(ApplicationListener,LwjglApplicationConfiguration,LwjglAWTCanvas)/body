{
  this.listener=listener;
  if (config == null)   config=new LwjglApplicationConfiguration();
  LwjglNativesLoader.load();
  instanceCount++;
  AWTGLCanvas sharedDrawable=sharedContextCanvas != null ? sharedContextCanvas.canvas : null;
  try {
    canvas=new AWTGLCanvas(GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice(),new PixelFormat(),sharedDrawable){
      private final Dimension minSize=new Dimension(0,0);
      private final NonSystemPaint nonSystemPaint=new NonSystemPaint(this);
      @Override public Dimension getMinimumSize(){
        return minSize;
      }
      @Override public void initGL(){
        create();
      }
      @Override public void paintGL(){
        try {
          boolean systemPaint=!(EventQueue.getCurrentEvent() instanceof NonSystemPaint);
          render(systemPaint);
          Toolkit.getDefaultToolkit().getSystemEventQueue().postEvent(nonSystemPaint);
        }
 catch (        Throwable ex) {
          exception(ex);
        }
      }
    }
;
  }
 catch (  Throwable ex) {
    exception(ex);
    return;
  }
  canvas.setBackground(new Color(config.initialBackgroundColor.r,config.initialBackgroundColor.g,config.initialBackgroundColor.b,config.initialBackgroundColor.a));
  graphics=new LwjglGraphics(canvas,config){
    @Override public void setTitle(    String title){
      super.setTitle(title);
      LwjglAWTCanvas.this.setTitle(title);
    }
    @Override public boolean setDisplayMode(    int width,    int height,    boolean fullscreen){
      if (!super.setDisplayMode(width,height,fullscreen))       return false;
      if (!fullscreen)       LwjglAWTCanvas.this.setDisplayMode(width,height);
      return true;
    }
    @Override public boolean setDisplayMode(    DisplayMode displayMode){
      if (!super.setDisplayMode(displayMode))       return false;
      LwjglAWTCanvas.this.setDisplayMode(displayMode.width,displayMode.height);
      return true;
    }
    public boolean shouldRender(){
synchronized (this) {
        boolean rq=requestRendering;
        requestRendering=false;
        return rq || isContinuous;
      }
    }
  }
;
  if (!LwjglApplicationConfiguration.disableAudio && Gdx.audio == null)   audio=new OpenALAudio();
  if (Gdx.files == null)   files=new LwjglFiles();
  if (Gdx.net == null)   net=new LwjglNet();
  input=new LwjglAWTInput(this);
  setGlobals();
}
