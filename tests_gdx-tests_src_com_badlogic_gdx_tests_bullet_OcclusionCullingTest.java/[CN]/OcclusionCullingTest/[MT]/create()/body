{
  Gdx.input.setOnscreenKeyboardVisible(true);
  super.create();
  GLProfiler.enable();
  StringBuilder sb=new StringBuilder();
  sb.append("Swipe for next test\n");
  sb.append("Long press to toggle debug mode\n");
  sb.append("Ctrl+drag to rotate\n");
  sb.append("Scroll to zoom\n");
  sb.append("Tap to spawn dynamic entity, press\n");
  sb.append("'0' to spawn ").append(KEY_SPAWN_OCCLUDEE_AMOUNT).append(" static entities\n");
  sb.append("'1' to set normal/disabled/occlusion-culling\n");
  sb.append("'2' to change camera\n");
  sb.append("'3' to toggle camera movement\n");
  sb.append("'4' to cycle occlusion buffer sizes\n");
  sb.append("'5' to toggle occlusion buffer image\n");
  sb.append("'6' to toggle shadows\n");
  instructions=sb.toString();
  AssetManager assets=new AssetManager();
  disposables.add(assets);
  for (  String modelName : OCCLUDEE_PATHS_DYNAMIC)   assets.load(modelName,Model.class);
  assets.load(DEFAULT_TEX_PATH,Texture.class);
  Camera shadowCamera=((DirectionalShadowLight)light).getCamera();
  shadowCamera.viewportWidth=shadowCamera.viewportHeight=120;
  overviewCam=camera;
  overviewCam.position.set(overviewCam.direction).nor().scl(-100);
  overviewCam.lookAt(Vector3.Zero);
  overviewCam.far=camera.far*=2;
  overviewCam.update(true);
  frustumCam=new PerspectiveCamera(FRUSTUM_CAMERA_FOV,camera.viewportWidth,camera.viewportHeight);
  frustumCam.far=FRUSTUM_CAMERA_FAR;
  frustumCam.update(true);
  final Model frustumModel=FrustumCullingTest.createFrustumModel(frustumCam.frustum.planePoints);
  frustumModel.materials.first().set(new ColorAttribute(ColorAttribute.AmbientLight,Color.WHITE));
  disposables.add(frustumModel);
  frustumInstance=new ModelInstance(frustumModel);
  spriteBatch=new SpriteBatch();
  disposables.add(spriteBatch);
  shapeRenderer=new ShapeRenderer();
  disposables.add(shapeRenderer);
  oclBuffer=new OcclusionBuffer(OCL_BUFFER_EXTENTS[0],OCL_BUFFER_EXTENTS[0]);
  disposables.add(oclBuffer);
  occlusionCuller=new OcclusionCuller(){
    @Override public boolean isOccluder(    btCollisionObject object){
      return (object.getCollisionFlags() & CF_OCCLUDER_OBJECT) != 0;
    }
    @Override public void onObjectVisible(    btCollisionObject object){
      visibleEntities.add(world.entities.get(object.getUserValue()));
    }
  }
;
  disposables.add(occlusionCuller);
  final Model occluderModel=modelBuilder.createBox(OCCLUDER_DIM.x,OCCLUDER_DIM.y,OCCLUDER_DIM.z,new Material(ColorAttribute.createDiffuse(Color.WHITE)),VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
  disposables.add(occluderModel);
  world.addConstructor("wall",new BulletConstructor(occluderModel,0,new btBoxShape(tmpV1.set(OCCLUDER_DIM).scl(0.5f))));
  float y=OCCLUDER_DIM.y * 0.5f;
  addOccluder("wall",0,tmpV1.set(20,y,0));
  addOccluder("wall",-60,tmpV1.set(10,y,20));
  addOccluder("wall",60,tmpV1.set(10,y,-20));
  addOccluder("wall",0,tmpV1.set(-20,y,0));
  addOccluder("wall",60,tmpV1.set(-10,y,20));
  addOccluder("wall",-60,tmpV1.set(-10,y,-20));
  final Model groundModel=modelBuilder.createBox(GROUND_DIM.x,GROUND_DIM.y,GROUND_DIM.z,new Material(ColorAttribute.createDiffuse(Color.WHITE)),VertexAttributes.Usage.Position | VertexAttributes.Usage.Normal);
  btCollisionShape groundShape=new btBoxShape(tmpV1.set(GROUND_DIM).scl(0.5f));
  world.addConstructor("big_ground",new BulletConstructor(groundModel,0,groundShape));
  BulletEntity e=world.add("big_ground",0,-GROUND_DIM.y * 0.5f,0f);
  e.body.setFriction(1f);
  e.setColor(Color.FOREST);
  BoundingBox bb=new BoundingBox();
  assets.finishLoadingAsset(DEFAULT_TEX_PATH);
  TextureAttribute defaultTexture=new TextureAttribute(TextureAttribute.Diffuse,assets.get(DEFAULT_TEX_PATH,Texture.class));
  for (int i=0; i < OCCLUDEE_PATHS_DYNAMIC.length; i++) {
    String modelPath=OCCLUDEE_PATHS_DYNAMIC[i];
    OCCLUDEE_PATHS_STATIC[i]="static" + modelPath;
    assets.finishLoadingAsset(modelPath);
    Model model=assets.get(modelPath,Model.class);
    if (!model.materials.first().has(TextureAttribute.Diffuse))     model.materials.first().set(defaultTexture);
    Vector3 dim=model.calculateBoundingBox(bb).getDimensions(tmpV1);
    float scaleFactor=OCCLUDEE_MAX_EXTENT / Math.max(dim.x,Math.max(dim.y,dim.z));
    for (    Node node : model.nodes)     node.scale.scl(scaleFactor);
    btCollisionShape shape=new btBoxShape(dim.scl(scaleFactor * 0.5f));
    world.addConstructor(modelPath,new BulletConstructor(model,1,shape));
    world.addConstructor(OCCLUDEE_PATHS_STATIC[i],new BulletConstructor(model,0,shape));
  }
  for (int i=0; i < STARTING_OCCLUDEE_AMOUNT; i++)   addRandomOccludee(false);
}
