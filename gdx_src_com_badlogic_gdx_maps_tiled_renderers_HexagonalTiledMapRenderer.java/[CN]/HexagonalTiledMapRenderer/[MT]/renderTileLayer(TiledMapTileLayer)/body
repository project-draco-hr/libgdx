{
  final Color batchColor=batch.getColor();
  final float color=Color.toFloatBits(batchColor.r,batchColor.g,batchColor.b,batchColor.a * layer.getOpacity());
  final int layerWidth=layer.getWidth();
  final int layerHeight=layer.getHeight();
  final float layerTileWidth=layer.getTileWidth() * unitScale;
  final float layerTileHeight=layer.getTileHeight() * unitScale;
  final float layerHexLength=hexSideLength * unitScale;
  if (staggerAxisX) {
    final float tileWidthLowerCorner=(layerTileWidth - layerHexLength) / 2;
    final float tileWidthUpperCorner=(layerTileWidth + layerHexLength) / 2;
    final float layerTileHeight50=layerTileHeight * 0.50f;
    final int row1=Math.max(0,(int)((viewBounds.y - layerTileHeight50) / layerTileHeight));
    final int row2=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + layerTileHeight) / layerTileHeight));
    final int col1=Math.max(0,(int)(((viewBounds.x - tileWidthLowerCorner) / tileWidthUpperCorner)));
    final int col2=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + tileWidthUpperCorner) / tileWidthUpperCorner));
    final int colA=(staggerIndexEven == (col1 % 2 == 0)) ? col1 + 1 : col1;
    final int colB=(staggerIndexEven == (col1 % 2 == 0)) ? col1 : col1 + 1;
    for (int row=row2 - 1; row >= row1; row--) {
      for (int col=colA; col < col2; col+=2) {
        renderCell(layer.getCell(col,row),tileWidthUpperCorner * col,layerTileHeight50 + (layerTileHeight * row),color);
      }
      for (int col=colB; col < col2; col+=2) {
        renderCell(layer.getCell(col,row),tileWidthUpperCorner * col,layerTileHeight * row,color);
      }
    }
  }
 else {
    final float tileHeightLowerCorner=(layerTileHeight - layerHexLength) / 2;
    final float tileHeightUpperCorner=(layerTileHeight + layerHexLength) / 2;
    final float layerTileWidth50=layerTileWidth * 0.50f;
    final int row1=Math.max(0,(int)(((viewBounds.y - tileHeightLowerCorner) / tileHeightUpperCorner)));
    final int row2=Math.min(layerHeight,(int)((viewBounds.y + viewBounds.height + tileHeightUpperCorner) / tileHeightUpperCorner));
    final int col1=Math.max(0,(int)(((viewBounds.x - layerTileWidth50) / layerTileWidth)));
    final int col2=Math.min(layerWidth,(int)((viewBounds.x + viewBounds.width + layerTileWidth) / layerTileWidth));
    float shiftX=0;
    for (int row=row2 - 1; row >= row1; row--) {
      if ((row % 2 == 0) == staggerIndexEven)       shiftX=0;
 else       shiftX=layerTileWidth50;
      for (int col=col1; col < col2; col++) {
        renderCell(layer.getCell(col,row),layerTileWidth * col + shiftX,tileHeightUpperCorner * row,color);
      }
    }
  }
}
