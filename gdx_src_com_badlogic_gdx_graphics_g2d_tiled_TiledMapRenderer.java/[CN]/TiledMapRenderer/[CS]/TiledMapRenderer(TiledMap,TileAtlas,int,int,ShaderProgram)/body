{
  this.atlas=atlas;
  this.tileWidth=map.tileWidth;
  this.tileHeight=map.tileHeight;
  int i;
  if (!map.orientation.equals("orthogonal"))   throw new GdxRuntimeException("Only orthogonal maps supported!");
  allLayers=new int[map.layers.size()];
  for (i=0; i < map.layers.size(); i++) {
    allLayers[i]=i;
  }
  tilesPerBlockX=(int)Math.ceil((float)blockWidth / (float)map.tileWidth);
  tilesPerBlockY=(int)Math.ceil((float)blockHeight / (float)map.tileHeight);
  pixelsPerMapX=map.width * map.tileWidth;
  pixelsPerMapY=map.height * map.tileHeight;
  blocksPerMapX=(int)Math.ceil((float)map.width / (float)tilesPerBlockX);
  blocksPerMapY=(int)Math.ceil((float)map.height / (float)tilesPerBlockY);
  normalCacheId=new int[map.layers.size()][blocksPerMapY][blocksPerMapX];
  blendedCacheId=new int[map.layers.size()][blocksPerMapY][blocksPerMapX];
  int overdrawXtemp, overdrawYtemp;
  for (i=0; i < map.tileSets.size(); i++) {
    overdrawXtemp=map.tileSets.get(i).tileWidth - map.tileWidth;
    if (overdrawXtemp > overdrawX)     overdrawX=overdrawXtemp;
    overdrawYtemp=map.tileSets.get(i).tileHeight - map.tileHeight;
    if (overdrawYtemp > overdrawY)     overdrawY=overdrawYtemp;
  }
  String blendedTilesString=map.properties.get("blended tiles");
  if (blendedTilesString != null) {
    blendedTiles=createFromCSV(blendedTilesString);
  }
  int maxCacheSize=parseIntWithDefault(map.properties.get("tile count"),0);
  if (maxCacheSize == 0) {
    for (i=0; i < map.layers.size(); i++) {
      maxCacheSize+=map.layers.get(i).height * map.layers.get(i).width;
    }
    Gdx.app.log("TiledMapRenderer","Warning - map doesn't include a tile count");
  }
  if (shader == null)   cache=new SpriteCache(maxCacheSize,false);
 else   cache=new SpriteCache(maxCacheSize,shader,false);
  int row, col;
  for (row=0; row < blocksPerMapY; row++) {
    for (col=0; col < blocksPerMapX; col++) {
      for (i=0; i < map.layers.size(); i++) {
        normalCacheId[i][row][col]=addBlock(map,i,row,col,false);
        blendedCacheId[i][row][col]=addBlock(map,i,row,col,true);
      }
    }
  }
}
