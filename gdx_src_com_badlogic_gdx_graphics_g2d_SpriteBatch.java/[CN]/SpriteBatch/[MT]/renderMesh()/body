{
  if (idx == 0)   return;
  renderCalls++;
  int spritesInBatch=idx / 20;
  if (spritesInBatch > maxSpritesInBatch)   maxSpritesInBatch=spritesInBatch;
  lastTexture.bind();
  mesh.setVertices(vertices,0,idx);
  if (Gdx.graphics.isGL20Available()) {
    if (blendingDisabled) {
      Gdx.gl20.glDisable(GL20.GL_BLEND);
    }
 else {
      GL20 gl20=Gdx.gl20;
      gl20.glEnable(GL20.GL_BLEND);
      gl20.glBlendFunc(blendSrcFunc,blendDstFunc);
    }
    mesh.render(shader,GL10.GL_TRIANGLES,0,spritesInBatch * 6);
  }
 else {
    if (blendingDisabled) {
      Gdx.gl10.glDisable(GL10.GL_BLEND);
    }
 else {
      GL10 gl10=Gdx.gl10;
      gl10.glEnable(GL10.GL_BLEND);
      gl10.glBlendFunc(blendSrcFunc,blendDstFunc);
    }
    mesh.render(GL10.GL_TRIANGLES,0,spritesInBatch * 6);
  }
  idx=0;
  currBufferIdx++;
  if (currBufferIdx == buffers.length)   currBufferIdx=0;
  mesh=buffers[currBufferIdx];
}
