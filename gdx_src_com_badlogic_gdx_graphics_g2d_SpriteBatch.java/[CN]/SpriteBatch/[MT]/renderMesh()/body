{
  if (idx == 0)   return;
  renderCalls++;
  totalRenderCalls++;
  int spritesInBatch=idx / 20;
  if (spritesInBatch > maxSpritesInBatch)   maxSpritesInBatch=spritesInBatch;
  lastTexture.bind();
  mesh.setVertices(vertices,0,idx);
  mesh.getIndicesBuffer().position(0);
  mesh.getIndicesBuffer().limit(spritesInBatch * 6);
  if (blendingDisabled) {
    Gdx.gl.glDisable(GL20.GL_BLEND);
  }
 else {
    Gdx.gl.glEnable(GL20.GL_BLEND);
    if (blendSrcFunc != -1)     Gdx.gl.glBlendFunc(blendSrcFunc,blendDstFunc);
  }
  if (Gdx.graphics.isGL20Available()) {
    if (customShader != null)     mesh.render(customShader,GL10.GL_TRIANGLES,0,spritesInBatch * 6);
 else     mesh.render(shader,GL10.GL_TRIANGLES,0,spritesInBatch * 6);
  }
 else {
    mesh.render(GL10.GL_TRIANGLES,0,spritesInBatch * 6);
  }
  idx=0;
  currBufferIdx++;
  if (currBufferIdx == buffers.length)   currBufferIdx=0;
  mesh=buffers[currBufferIdx];
}
