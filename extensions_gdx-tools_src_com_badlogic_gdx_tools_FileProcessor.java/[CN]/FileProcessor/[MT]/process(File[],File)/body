{
  outputFiles.clear();
  LinkedHashMap<File,ArrayList<InputFile>> dirToEntries=new LinkedHashMap();
  process(files,outputRoot,outputRoot,dirToEntries,0);
  ArrayList<InputFile> allInputFiles=new ArrayList();
  for (  Entry<File,ArrayList<InputFile>> entry : dirToEntries.entrySet()) {
    ArrayList<InputFile> dirInputFiles=entry.getValue();
    if (comparator != null)     Collections.sort(dirInputFiles,inputFileComparator);
    File inputDir=entry.getKey();
    File newOutputDir=flattenOutput ? outputRoot : dirInputFiles.get(0).outputDir;
    String outputName=inputDir.getName();
    if (outputSuffix != null)     outputName=outputName.replaceAll("(.*)\\..*","$1") + outputSuffix;
    InputFile inputFile=new InputFile();
    inputFile.inputFile=entry.getKey();
    inputFile.outputDir=newOutputDir;
    inputFile.outputFile=newOutputDir == null ? null : new File(newOutputDir,outputName);
    try {
      processDir(inputFile,dirInputFiles);
    }
 catch (    Exception ex) {
      throw new Exception("Error processing directory: " + inputFile.inputFile.getAbsolutePath(),ex);
    }
    allInputFiles.addAll(dirInputFiles);
  }
  if (comparator != null)   Collections.sort(allInputFiles,inputFileComparator);
  for (  InputFile inputFile : allInputFiles) {
    try {
      processFile(inputFile);
    }
 catch (    Exception ex) {
      throw new Exception("Error processing file: " + inputFile.inputFile.getAbsolutePath(),ex);
    }
  }
  return outputFiles;
}
