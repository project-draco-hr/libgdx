{
  if (outputRoot == null)   outputRoot=new File("");
  outputFiles.clear();
  LinkedHashMap<File,ArrayList<Entry>> dirToEntries=new LinkedHashMap();
  process(files,outputRoot,outputRoot,dirToEntries,0);
  ArrayList<Entry> allEntries=new ArrayList();
  for (  java.util.Map.Entry<File,ArrayList<Entry>> mapEntry : dirToEntries.entrySet()) {
    ArrayList<Entry> dirEntries=mapEntry.getValue();
    if (comparator != null)     Collections.sort(dirEntries,entryComparator);
    File inputDir=mapEntry.getKey();
    File newOutputDir=flattenOutput ? outputRoot : dirEntries.get(0).outputDir;
    String outputName=inputDir.getName();
    if (outputSuffix != null)     outputName=outputName.replaceAll("(.*)\\..*","$1") + outputSuffix;
    Entry entry=new Entry();
    entry.inputFile=mapEntry.getKey();
    entry.outputDir=newOutputDir;
    if (newOutputDir != null)     entry.outputFile=newOutputDir.length() == 0 ? new File(outputName) : new File(newOutputDir,outputName);
    try {
      processDir(entry,dirEntries);
    }
 catch (    Exception ex) {
      throw new Exception("Error processing directory: " + entry.inputFile.getAbsolutePath(),ex);
    }
    allEntries.addAll(dirEntries);
  }
  if (comparator != null)   Collections.sort(allEntries,entryComparator);
  for (  Entry entry : allEntries) {
    try {
      processFile(entry);
    }
 catch (    Exception ex) {
      throw new Exception("Error processing file: " + entry.inputFile.getAbsolutePath(),ex);
    }
  }
  return outputFiles;
}
