{
  final Vec2 p1=input.p1;
  final Vec2 p2=input.p2;
  float p1x=p1.x, p2x=p2.x, p1y=p1.y, p2y=p2.y;
  float vx, vy;
  float rx, ry;
  float absVx, absVy;
  float cx, cy;
  float hx, hy;
  float tempx, tempy;
  r.x=p2x - p1x;
  r.y=p2y - p1y;
  assert((r.x * r.x + r.y * r.y) > 0f);
  r.normalize();
  rx=r.x;
  ry=r.y;
  vx=-1f * ry;
  vy=1f * rx;
  absVx=MathUtils.abs(vx);
  absVy=MathUtils.abs(vy);
  float maxFraction=input.maxFraction;
  final AABB segAABB=aabb;
  tempx=(p2x - p1x) * maxFraction + p1x;
  tempy=(p2y - p1y) * maxFraction + p1y;
  segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;
  segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;
  segAABB.upperBound.x=p1x > tempx ? p1x : tempx;
  segAABB.upperBound.y=p1y > tempy ? p1y : tempy;
  nodeStackIndex=0;
  nodeStack[nodeStackIndex++]=m_root;
  while (nodeStackIndex > 0) {
    final DynamicTreeNode node=nodeStack[--nodeStackIndex];
    if (node == null) {
      continue;
    }
    final AABB nodeAABB=node.aabb;
    if (!AABB.testOverlap(nodeAABB,segAABB)) {
      continue;
    }
    cx=(nodeAABB.lowerBound.x + nodeAABB.upperBound.x) * .5f;
    cy=(nodeAABB.lowerBound.y + nodeAABB.upperBound.y) * .5f;
    hx=(nodeAABB.upperBound.x - nodeAABB.lowerBound.x) * .5f;
    hy=(nodeAABB.upperBound.y - nodeAABB.lowerBound.y) * .5f;
    tempx=p1x - cx;
    tempy=p1y - cy;
    float separation=MathUtils.abs(vx * tempx + vy * tempy) - (absVx * hx + absVy * hy);
    if (separation > 0.0f) {
      continue;
    }
    if (node.child1 == null) {
      subInput.p1.x=p1x;
      subInput.p1.y=p1y;
      subInput.p2.x=p2x;
      subInput.p2.y=p2y;
      subInput.maxFraction=maxFraction;
      float value=callback.raycastCallback(subInput,node.id);
      if (value == 0.0f) {
        return;
      }
      if (value > 0.0f) {
        maxFraction=value;
        tempx=(p2x - p1x) * maxFraction + p1x;
        tempy=(p2y - p1y) * maxFraction + p1y;
        segAABB.lowerBound.x=p1x < tempx ? p1x : tempx;
        segAABB.lowerBound.y=p1y < tempy ? p1y : tempy;
        segAABB.upperBound.x=p1x > tempx ? p1x : tempx;
        segAABB.upperBound.y=p1y > tempy ? p1y : tempy;
      }
    }
 else {
      if (nodeStack.length - nodeStackIndex - 2 <= 0) {
        DynamicTreeNode[] newBuffer=new DynamicTreeNode[nodeStack.length * 2];
        System.arraycopy(nodeStack,0,newBuffer,0,nodeStack.length);
        nodeStack=newBuffer;
      }
      nodeStack[nodeStackIndex++]=node.child1;
      nodeStack[nodeStackIndex++]=node.child2;
    }
  }
}
