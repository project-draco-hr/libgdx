{
  GL10 gl=graphics.getGL10();
  int numAttributes=attributes.size();
  int type=useFixedPoint ? GL11.GL_FIXED : GL11.GL_FLOAT;
  int textureUnit=0;
  for (int i=0; i < numAttributes; i++) {
    VertexAttribute attribute=attributes.get(i);
    if (attribute.usage == Usage.Position) {
      gl.glEnableClientState(GL11.GL_VERTEX_ARRAY);
      vertices.position(attribute.offset);
      gl.glVertexPointer(attribute.numComponents,type,attributes.vertexSize,vertices);
    }
    if (attribute.usage == Usage.Color) {
      gl.glEnableClientState(GL11.GL_COLOR_ARRAY);
      vertices.position(attribute.offset);
      gl.glColorPointer(attribute.numComponents,type,attributes.vertexSize,vertices);
    }
    if (attribute.usage == Usage.Normal) {
      gl.glEnableClientState(GL11.GL_NORMAL_ARRAY);
      vertices.position(attribute.offset);
      gl.glNormalPointer(type,attributes.vertexSize,vertices);
    }
    if (attribute.usage == Usage.TextureCoordinates) {
      gl.glClientActiveTexture(GL11.GL_TEXTURE0 + textureUnit);
      gl.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
      vertices.position(attribute.offset);
      gl.glTexCoordPointer(attribute.numComponents,type,attributes.vertexSize,vertices);
      textureUnit++;
    }
  }
  if (maxIndices > 0)   gl.glDrawElements(primitiveType,count,GL10.GL_UNSIGNED_SHORT,indices);
 else   gl.glDrawArrays(primitiveType,offset,count);
  textureUnit--;
  for (int i=0; i < numAttributes; i++) {
    VertexAttribute attribute=attributes.get(i);
    if (attribute.usage == Usage.Color)     gl.glDisableClientState(GL11.GL_COLOR_ARRAY);
    if (attribute.usage == Usage.Normal)     gl.glDisableClientState(GL11.GL_NORMAL_ARRAY);
    if (attribute.usage == Usage.TextureCoordinates) {
      gl.glClientActiveTexture(GL11.GL_TEXTURE0 + textureUnit);
      gl.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
      textureUnit--;
    }
  }
  vertices.position(0);
}
