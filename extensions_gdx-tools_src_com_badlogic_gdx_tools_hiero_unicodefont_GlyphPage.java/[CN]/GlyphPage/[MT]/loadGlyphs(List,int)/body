{
  GL11.glColor4f(1,1,1,1);
  texture.bind();
  int loadedCount=0;
  for (Iterator iter=glyphs.iterator(); iter.hasNext(); ) {
    Glyph glyph=(Glyph)iter.next();
    int width=Math.min(MAX_GLYPH_SIZE,glyph.getWidth());
    int height=Math.min(MAX_GLYPH_SIZE,glyph.getHeight());
    if (width == 0 || height == 0)     pageGlyphs.add(glyph);
 else {
      Row bestRow=null;
      for (int ii=0, nn=rows.size - 1; ii < nn; ii++) {
        Row row=rows.get(ii);
        if (row.x + width >= pageWidth)         continue;
        if (row.y + height >= pageHeight)         continue;
        if (height > row.height)         continue;
        if (bestRow == null || row.height < bestRow.height)         bestRow=row;
      }
      if (bestRow == null) {
        Row row=rows.peek();
        if (row.y + height >= pageHeight)         continue;
        if (row.x + width < pageWidth) {
          row.height=Math.max(row.height,height);
          bestRow=row;
        }
 else {
          bestRow=new Row();
          bestRow.y=row.y + row.height;
          bestRow.height=height;
          rows.add(bestRow);
        }
      }
      if (bestRow == null)       continue;
      if (renderGlyph(glyph,bestRow.x,bestRow.y,width,height))       bestRow.x+=width;
    }
    iter.remove();
    loadedCount++;
    if (loadedCount == maxGlyphsToLoad)     break;
  }
  return loadedCount;
}
