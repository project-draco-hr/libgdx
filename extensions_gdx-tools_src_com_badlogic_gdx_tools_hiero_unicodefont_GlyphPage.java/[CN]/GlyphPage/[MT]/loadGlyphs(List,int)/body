{
  if (rowHeight != 0 && maxGlyphsToLoad == -1) {
    int testX=pageX;
    int testY=pageY;
    int testRowHeight=rowHeight;
    for (Iterator iter=getIterator(glyphs); iter.hasNext(); ) {
      Glyph glyph=(Glyph)iter.next();
      int width=glyph.getWidth();
      int height=glyph.getHeight();
      if (testX + width >= pageWidth) {
        testX=0;
        testY+=testRowHeight;
        testRowHeight=height;
      }
 else       if (height > testRowHeight) {
        testRowHeight=height;
      }
      if (testY + testRowHeight >= pageWidth)       return 0;
      testX+=width;
    }
  }
  GL11.glColor4f(1,1,1,1);
  texture.bind();
  int i=0;
  for (Iterator iter=getIterator(glyphs); iter.hasNext(); ) {
    Glyph glyph=(Glyph)iter.next();
    int width=Math.min(MAX_GLYPH_SIZE,glyph.getWidth());
    int height=Math.min(MAX_GLYPH_SIZE,glyph.getHeight());
    if (rowHeight == 0) {
      rowHeight=height;
    }
 else {
      if (pageX + width >= pageWidth) {
        if (pageY + rowHeight + height >= pageHeight)         break;
        pageX=0;
        pageY+=rowHeight;
        rowHeight=height;
      }
 else       if (height > rowHeight) {
        if (pageY + height >= pageHeight)         break;
        rowHeight=height;
      }
    }
    if (renderGlyph(glyph,width,height))     pageX+=width;
    iter.remove();
    i++;
    if (i == maxGlyphsToLoad) {
      orderAscending=!orderAscending;
      break;
    }
  }
  orderAscending=!orderAscending;
  return i;
}
