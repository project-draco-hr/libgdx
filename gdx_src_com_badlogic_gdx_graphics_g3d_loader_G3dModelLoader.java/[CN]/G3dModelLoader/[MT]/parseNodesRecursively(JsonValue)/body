{
  ModelNode jsonNode=new ModelNode();
  String id=json.getString("id");
  if (id == null)   throw new GdxRuntimeException("Node id missing.");
  jsonNode.id=id;
  JsonValue translation=json.get("translation");
  if (translation != null && translation.size() != 3)   throw new GdxRuntimeException("Node translation incomplete");
  jsonNode.translation=translation == null ? null : new Vector3(translation.getFloat(0),translation.getFloat(1),translation.getFloat(2));
  JsonValue rotation=json.get("rotation");
  if (rotation != null && rotation.size() != 4)   throw new GdxRuntimeException("Node rotation incomplete");
  jsonNode.rotation=rotation == null ? null : new Quaternion(rotation.getFloat(0),rotation.getFloat(1),rotation.getFloat(2),rotation.getFloat(3));
  JsonValue scale=json.get("scale");
  if (scale != null && scale.size() != 3)   throw new GdxRuntimeException("Node scale incomplete");
  jsonNode.scale=scale == null ? null : new Vector3(scale.getFloat(0),scale.getFloat(1),scale.getFloat(2));
  String meshId=json.getString("mesh",null);
  if (meshId != null)   jsonNode.meshId=meshId;
  JsonValue materials=json.get("parts");
  if (materials != null) {
    jsonNode.parts=new ModelNodePart[materials.size()];
    for (int i=0; i < materials.size(); i++) {
      JsonValue material=materials.get(i);
      ModelNodePart nodePart=new ModelNodePart();
      String meshPartId=material.getString("meshpartid");
      String materialId=material.getString("materialid");
      if (meshPartId == null || materialId == null) {
        throw new GdxRuntimeException("Node " + id + " part is missing meshPartId or materialId");
      }
      nodePart.materialId=materialId;
      nodePart.meshPartId=meshPartId;
      JsonValue bones=material.get("bones");
      if (bones != null) {
        nodePart.bones=new String[bones.size()];
        for (int j=0; j < bones.size(); j++)         nodePart.bones[j]=bones.getString(j);
      }
      jsonNode.parts[i]=nodePart;
    }
  }
  JsonValue children=json.get("children");
  if (children != null) {
    jsonNode.children=new ModelNode[children.size()];
    for (int i=0; i < children.size(); i++) {
      JsonValue child=children.get(i);
      jsonNode.children[i]=parseNodesRecursively(child);
    }
  }
  return jsonNode;
}
