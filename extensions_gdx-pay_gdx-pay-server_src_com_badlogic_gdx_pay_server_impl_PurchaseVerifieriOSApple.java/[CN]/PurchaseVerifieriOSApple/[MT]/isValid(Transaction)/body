{
  String receipt=transaction.getTransactionData();
  final String receiptData=Base64Util.toBase64(receipt.getBytes());
  final String jsonData="{\"receipt-data\" : \"" + receiptData + "\"}";
  try {
    final URL url=new URL(sandbox ? SANDBOX_URL : PRODUCTION_URL);
    final HttpURLConnection conn=(HttpsURLConnection)url.openConnection();
    conn.setRequestMethod("POST");
    conn.setDoOutput(true);
    conn.setRequestProperty("Content-Type","application/json");
    conn.setRequestProperty("Accept","application/json");
    final OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
    wr.write(jsonData);
    wr.flush();
    final BufferedReader rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
    String line=rd.readLine();
    wr.close();
    rd.close();
    int status=Integer.parseInt(line.substring(line.indexOf(":") + 1,line.indexOf("}")));
switch (status) {
case 0:
      return true;
case 21000:
    System.out.println(status + ": App store could not read");
  return false;
case 21002:
System.out.println(status + ": Data was malformed");
return false;
case 21003:
System.out.println(status + ": Receipt not authenticated");
return false;
case 21004:
System.out.println(status + ": Shared secret does not match");
return false;
case 21005:
System.out.println(status + ": Receipt server unavailable");
return false;
case 21006:
System.out.println(status + ": Receipt valid but sub expired");
return false;
case 21007:
System.out.println(status + ": Sandbox receipt sent to Production environment");
return false;
case 21008:
System.out.println(status + ": Production receipt sent to Sandbox environment");
return false;
default :
System.out.println("Unknown error: status code = " + status);
return false;
}
}
 catch (IOException e) {
System.err.println("I/O error during verification: " + e);
e.printStackTrace();
return false;
}
}
