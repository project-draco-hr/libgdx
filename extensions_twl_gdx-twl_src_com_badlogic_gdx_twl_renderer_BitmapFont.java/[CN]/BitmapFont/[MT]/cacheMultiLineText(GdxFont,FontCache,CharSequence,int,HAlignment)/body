{
  int length=str.length();
  GdxFontCache cache=(GdxFontCache)c;
  if (cache == null)   cache=new GdxFontCache(font,length * 6);
 else   cache.ensureCapacity(length * 6);
  if (length * 24 > temp.length)   temp=new float[length * 24];
  tempIndex=0;
  int start=0, y=0;
  int numLines=0;
  while (start < str.length()) {
    int lineEnd=TextUtil.indexOf(str,'\n',start);
    int xoff=0;
    if (align != HAlignment.LEFT) {
      int lineWidth=computeTextWidth(str,start,lineEnd);
      xoff=width - lineWidth;
      if (align == HAlignment.CENTER) {
        xoff/=2;
      }
    }
    addToTemp(cache,str,start,lineEnd);
    start=lineEnd + 1;
    y+=lineHeight;
    numLines++;
  }
  cache.width=width;
  cache.height=y;
  cache.mesh.setVertices(temp,0,tempIndex);
  return cache;
}
