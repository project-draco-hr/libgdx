{
  this.deviceBufferSize=deviceBufferSize;
  this.deviceBufferCount=deviceBufferCount;
  registerSound("ogg",Ogg.Sound.class);
  registerMusic("ogg",Ogg.Music.class);
  registerSound("wav",Wav.Sound.class);
  registerMusic("wav",Wav.Music.class);
  registerSound("mp3",Mp3.Sound.class);
  registerMusic("mp3",Mp3.Music.class);
  try {
    AL.create();
  }
 catch (  LWJGLException ex) {
    noDevice=true;
    ex.printStackTrace();
    return;
  }
  allSources=new IntArray(false,simultaneousSources);
  for (int i=0; i < simultaneousSources; i++) {
    int sourceID=alGenSources();
    if (alGetError() != AL_NO_ERROR)     break;
    allSources.add(sourceID);
  }
  idleSources=new IntArray(allSources);
  soundIdToSource=new LongMap<Integer>();
  sourceToSoundId=new IntMap<Long>();
  FloatBuffer orientation=(FloatBuffer)BufferUtils.createFloatBuffer(6).put(new float[]{0.0f,0.0f,-1.0f,0.0f,1.0f,0.0f}).flip();
  alListener(AL_ORIENTATION,orientation);
  FloatBuffer velocity=(FloatBuffer)BufferUtils.createFloatBuffer(3).put(new float[]{0.0f,0.0f,0.0f}).flip();
  alListener(AL_VELOCITY,velocity);
  FloatBuffer position=(FloatBuffer)BufferUtils.createFloatBuffer(3).put(new float[]{0.0f,0.0f,0.0f}).flip();
  alListener(AL_POSITION,position);
}
