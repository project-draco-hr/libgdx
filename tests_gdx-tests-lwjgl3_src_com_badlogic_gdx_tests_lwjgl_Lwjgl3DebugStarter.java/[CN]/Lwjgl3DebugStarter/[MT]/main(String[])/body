{
  GdxTest test=new GdxTest(){
    float r=0;
    SpriteBatch batch;
    BitmapFont font;
    FPSLogger fps=new FPSLogger();
    Texture texture;
    @Override public void create(){
      texture=new Texture("data/badlogic.jpg");
      batch=new SpriteBatch();
      font=new BitmapFont();
      Gdx.input.setInputProcessor(new InputAdapter(){
        @Override public boolean keyDown(        int keycode){
          System.out.println("Key down: " + Keys.toString(keycode));
          return false;
        }
        @Override public boolean keyUp(        int keycode){
          System.out.println("Key up: " + Keys.toString(keycode));
          return false;
        }
        @Override public boolean keyTyped(        char character){
          System.out.println("Key typed: '" + character + "', "+ (int)character);
          if (character == 'f') {
            DisplayMode[] modes=Gdx.graphics.getDisplayModes();
            Gdx.graphics.setFullscreenMode(modes[MathUtils.random(0,modes.length - 1)]);
          }
          if (character == 'w') {
            Gdx.graphics.setWindowedMode(MathUtils.random(400,800),MathUtils.random(400,800));
          }
          if (character == 'e') {
            throw new GdxRuntimeException("derp");
          }
          return false;
        }
      }
);
    }
    long start=System.nanoTime();
    @Override public void render(){
      Gdx.gl.glClearColor(1,0,0,1);
      Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
      Gdx.gl.glViewport(0,0,Gdx.graphics.getBackBufferWidth(),Gdx.graphics.getBackBufferHeight());
      batch.getProjectionMatrix().setToOrtho2D(0,0,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
      batch.begin();
      font.draw(batch,Gdx.graphics.getWidth() + "x" + Gdx.graphics.getHeight()+ ", "+ Gdx.graphics.getBackBufferWidth()+ "x"+ Gdx.graphics.getBackBufferHeight()+ ", "+ Gdx.input.getX()+ ", "+ Gdx.input.getY()+ ", "+ Gdx.input.getDeltaX()+ ", "+ Gdx.input.getDeltaY(),0,20);
      batch.draw(texture,Gdx.input.getX(),Gdx.graphics.getHeight() - Gdx.input.getY());
      batch.end();
      fps.log();
      if (System.nanoTime() - start > 1000000000l) {
        start=System.nanoTime();
        Gdx.app.log("Test",Gdx.graphics.getWidth() + "x" + Gdx.graphics.getHeight()+ ", "+ Gdx.graphics.getBackBufferWidth()+ "x"+ Gdx.graphics.getBackBufferHeight()+ ", "+ Gdx.input.getX()+ ", "+ Gdx.input.getY()+ ", "+ Gdx.input.getDeltaX()+ ", "+ Gdx.input.getDeltaY());
      }
    }
    @Override public void resize(    int width,    int height){
      Gdx.app.log("Test","Resized " + width + "x"+ height);
    }
  }
;
  Lwjgl3ApplicationConfiguration config=new Lwjgl3ApplicationConfiguration();
  config.setWindowedMode(640,480);
  new Lwjgl3Application(test,config);
}
