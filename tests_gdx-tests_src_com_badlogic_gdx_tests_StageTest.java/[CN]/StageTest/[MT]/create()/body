{
  texture=new Texture(Gdx.files.internal("data/badlogicsmall.jpg"));
  texture.setFilter(TextureFilter.Linear,TextureFilter.Linear);
  font=new BitmapFont(Gdx.files.internal("data/arial-15.fnt"),false);
  stage=new Stage(480,320,true);
  float loc=(NUM_SPRITES * (32 + SPACING) - SPACING) / 2;
  for (int i=0; i < NUM_GROUPS; i++) {
    Group group=new Group("group" + i);
    group.setX((float)Math.random() * (stage.getWidth() - NUM_SPRITES * (32 + SPACING)));
    group.setY((float)Math.random() * (stage.getHeight() - NUM_SPRITES * (32 + SPACING)));
    group.setOrigin(loc,loc);
    fillGroup(group,texture);
    stage.addActor(group);
  }
  uiTexture=new Texture(Gdx.files.internal("data/ui.png"));
  uiTexture.setFilter(TextureFilter.Linear,TextureFilter.Linear);
  ui=new Stage(480,320,false);
  Image blend=new Image(new TextureRegion(uiTexture,0,0,64,32),Scaling.none,Align.CENTER,"blend"){
    public boolean touchDown(    float x,    float y,    int pointer){
      if (stage.getSpriteBatch().isBlendingEnabled())       stage.getSpriteBatch().disableBlending();
 else       stage.getSpriteBatch().enableBlending();
      return false;
    }
  }
;
  blend.setY(ui.getHeight() - 64);
  Image rotate=new Image(new TextureRegion(uiTexture,64,0,64,32),Scaling.none,Align.CENTER,"rotate"){
    public boolean touchDown(    float x,    float y,    int pointer){
      rotateSprites=!rotateSprites;
      return false;
    }
  }
;
  rotate.setPosition(64,blend.getY());
  Image scale=new Image(new TextureRegion(uiTexture,64,32,64,32),Scaling.none,Align.CENTER,"scale"){
    public boolean touchDown(    float x,    float y,    int pointer){
      scaleSprites=!scaleSprites;
      return false;
    }
  }
;
  scale.setPosition(128,blend.getY());
  ui.addActor(blend);
  ui.addActor(rotate);
  ui.addActor(scale);
  Label fps=new Label("fps: 0",new Label.LabelStyle(font,Color.WHITE),"fps");
  fps.setPosition(10,30);
  fps.setColor(0,1,0,1);
  ui.addActor(fps);
  renderer=new ShapeRenderer();
  Gdx.input.setInputProcessor(this);
}
