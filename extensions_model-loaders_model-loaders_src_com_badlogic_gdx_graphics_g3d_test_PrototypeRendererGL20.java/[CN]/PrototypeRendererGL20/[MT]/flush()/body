{
  Material currentMaterial=null;
  for (int i=0; i < modelQueue.size; i++) {
    final StillModelInstance instance=modelInstances.get(i);
    final Vector3 center=instance.getSortCenter();
    lightManager.calculateLights(center.x,center.y,center.z);
    final Matrix4 modelMatrix=instance.getTransform();
    normalMatrix.set(modelMatrix);
    final SubMesh subMeshes[]=modelQueue.get(i).getSubMeshes();
    final Material materials[]=instance.getMaterials();
    boolean matrixChanged=true;
    for (int j=0; j < subMeshes.length; j++) {
      final SubMesh subMesh=subMeshes[j];
      final Material material=materials != null ? materials[j] : subMesh.material;
      if (material.needBlending) {
        addTranparentQueu(material,subMesh,modelMatrix,center);
        continue;
      }
      final boolean shaderChanged=bindShader(material);
      if (shaderChanged)       currentMaterial=null;
      if (shaderChanged || matrixChanged) {
        currentShader.setUniformMatrix("u_normalMatrix",normalMatrix,false);
        currentShader.setUniformMatrix("u_modelMatrix",modelMatrix,false);
        matrixChanged=false;
      }
      if ((material != null) && (material != currentMaterial)) {
        currentMaterial=material;
        for (int k=0, len=currentMaterial.attributes.length; k < len; k++) {
          final MaterialAttribute atrib=currentMaterial.attributes[k];
          if (atrib instanceof TextureAttribute) {
            final TextureAttribute texAtrib=(TextureAttribute)atrib;
            if (!texAtrib.texturePortionEquals(lastTexture[texAtrib.unit])) {
              lastTexture[texAtrib.unit]=texAtrib;
              texAtrib.bind(currentShader);
            }
 else {
              currentShader.setUniformi(texAtrib.name,texAtrib.unit);
            }
          }
 else {
            atrib.bind(currentShader);
          }
        }
      }
      subMesh.getMesh().render(currentShader,subMesh.primitiveType);
    }
  }
  if (currentShader != null) {
    currentShader.end();
    currentShader=null;
  }
  modelQueue.clear();
  modelInstances.clear();
  for (int i=0, len=TextureAttribute.MAX_TEXTURE_UNITS; i < len; i++)   lastTexture[i]=null;
  drawing=false;
}
