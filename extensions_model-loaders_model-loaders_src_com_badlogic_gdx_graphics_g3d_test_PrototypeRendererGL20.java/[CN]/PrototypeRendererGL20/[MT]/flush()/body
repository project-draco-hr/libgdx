{
  for (int i=0, size=drawableManager.drawables.size; i < size; i++) {
    final Drawable drawable=drawableManager.drawables.get(i);
    final Vector3 center=drawable.sortCenter;
    lightManager.calculateLights(center.x,center.y,center.z);
    final Matrix4 modelMatrix=drawable.transform;
    normalMatrix.set(modelMatrix);
    if (drawable.isAnimated)     ((AnimatedModel)(drawable.model)).setAnimation(drawable.animation,drawable.animationTime,drawable.isLooping);
    final SubMesh subMeshes[]=drawable.model.getSubMeshes();
    boolean matrixChanged=true;
    for (int j=0; j < subMeshes.length; j++) {
      final SubMesh subMesh=subMeshes[j];
      final Material material=drawable.materials.get(j);
      if (material.isNeedBlending()) {
        addTranparentQueu(material,subMesh,modelMatrix,center);
        continue;
      }
      final boolean shaderChanged=bindShader(material);
      if (shaderChanged || matrixChanged) {
        currentShader.setUniformMatrix("u_normalMatrix",normalMatrix,false);
        currentShader.setUniformMatrix("u_modelMatrix",modelMatrix,false);
        matrixChanged=false;
      }
      if ((material != null)) {
        for (int k=0, len=material.attributes.size; k < len; k++) {
          final MaterialAttribute atrib=material.attributes.get(k);
          if (atrib instanceof TextureAttribute) {
            final TextureAttribute texAtrib=(TextureAttribute)atrib;
            if (!texAtrib.texturePortionEquals(lastTexture[texAtrib.unit])) {
              lastTexture[texAtrib.unit]=texAtrib;
              texAtrib.bind(currentShader);
            }
 else {
              currentShader.setUniformi(texAtrib.name,texAtrib.unit);
            }
          }
 else {
            atrib.bind(currentShader);
          }
        }
      }
      subMesh.getMesh().render(currentShader,subMesh.primitiveType);
    }
  }
  if (blendQueue.size > 0)   renderBlended();
  if (currentShader != null) {
    currentShader.end();
    currentShader=null;
  }
  for (int i=0, len=TextureAttribute.MAX_TEXTURE_UNITS; i < len; i++)   lastTexture[i]=null;
  drawing=false;
  drawableManager.clear();
}
