{
  Gdx.gl.glEnable(GL10.GL_BLEND);
  final Array<Drawable> transparentDrawables=drawableManager.drawablesBlended;
  transparentDrawables.sort();
  int lastSrcBlend=-1;
  int lastDstBlend=-1;
  for (int i=0, size=transparentDrawables.size; i < size; i++) {
    final Drawable drawable=transparentDrawables.get(i);
    final Vector3 center=drawable.sortCenter;
    lightManager.calculateLights(center.x,center.y,center.z);
    final Matrix4 modelMatrix=drawable.transform;
    normalMatrix.set(modelMatrix);
    if (drawable.isAnimated)     ((AnimatedModel)(drawable.model)).setAnimation(drawable.animation,drawable.animationTime,drawable.isLooping);
    final SubMesh subMeshes[]=drawable.model.getSubMeshes();
    boolean matrixChanged=true;
    for (int j=0; j < subMeshes.length; j++) {
      final SubMesh subMesh=subMeshes[j];
      final Material material=drawable.materials.get(j);
      final boolean shaderChanged=bindShader(material);
      if (shaderChanged || matrixChanged) {
        currentShader.setUniformMatrix("u_normalMatrix",normalMatrix,false);
        currentShader.setUniformMatrix("u_modelMatrix",modelMatrix,false);
        matrixChanged=false;
      }
      for (int k=0, len=material.getNumberOfAttributes(); k < len; k++) {
        final MaterialAttribute atrib=material.getAttribute(k);
        if (atrib instanceof BlendingAttribute) {
          final BlendingAttribute blending=(BlendingAttribute)atrib;
          if (blending.blendSrcFunc != lastSrcBlend || blending.blendDstFunc != lastDstBlend) {
            atrib.bind(currentShader);
            lastSrcBlend=blending.blendSrcFunc;
            lastDstBlend=blending.blendDstFunc;
          }
        }
 else         if (atrib instanceof TextureAttribute) {
          final TextureAttribute texAtrib=(TextureAttribute)atrib;
          if (!texAtrib.texturePortionEquals(lastTexture[texAtrib.unit])) {
            lastTexture[texAtrib.unit]=texAtrib;
            texAtrib.bind(currentShader);
          }
 else {
            currentShader.setUniformi(texAtrib.name,texAtrib.unit);
          }
        }
 else         if (atrib instanceof GpuSkinningAttribute) {
          final GpuSkinningAttribute gpuAtrib=(GpuSkinningAttribute)atrib;
          gpuAtrib.setModelMatrix(modelMatrix);
          gpuAtrib.bind(currentShader);
        }
 else {
          atrib.bind(currentShader);
        }
      }
      subMesh.getMesh().render(currentShader,subMesh.primitiveType);
    }
  }
  Gdx.gl.glDisable(GL10.GL_BLEND);
}
