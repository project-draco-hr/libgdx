{
  System.loadLibrary("gdx");
  World world=new World(new Vector2(0,-10),true);
  BodyDef bodyDef=new BodyDef();
  bodyDef.active=true;
  bodyDef.position.set(0,10);
  bodyDef.type=BodyType.DynamicBody;
  CircleShape shape=new CircleShape();
  shape.setRadius(1);
  Body body=world.createBody(bodyDef);
  Fixture fixture=body.createFixture(shape,1);
  fixture.setRestitution(0.5f);
  shape.dispose();
  bodyDef.position.set(0,-1);
  bodyDef.type=BodyType.StaticBody;
  PolygonShape pShape=new PolygonShape();
  pShape.setAsBox(2,1);
  Body body2=world.createBody(bodyDef);
  body2.createFixture(pShape,1);
  pShape.dispose();
  body.setUserData("circle");
  body2.setUserData("ground");
  world.setContactFilter(new ContactFilter(){
    @Override public boolean shouldCollide(    Fixture fixtureA,    Fixture fixtureB){
      System.out.println("contact between " + fixtureA.getBody().getUserData() + " and "+ fixtureB.getBody().getUserData());
      return true;
    }
  }
);
  world.setContactListener(new ContactListener(){
    @Override public void endContact(    Contact contact){
      System.out.println("ending contact " + contact.getFixtureA().getBody().getUserData() + ": "+ contact.getFixtureB().getBody().getUserData());
    }
    @Override public void beginContact(    Contact contact){
      System.out.println("beginning contact " + contact.getFixtureA().getBody().getUserData() + ": "+ contact.getFixtureB().getBody().getUserData());
    }
  }
);
  for (int i=0; i < 60 * 3; i++) {
    world.step(1 / 60.0f,1,1);
  }
}
