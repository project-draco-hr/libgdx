{
  final JsonModelLoader loader=new JsonModelLoader();
  float MIN_X=-100f, MIN_Y=-100f, MIN_Z=-100f;
  float SIZE_X=200f, SIZE_Y=200f, SIZE_Z=200f;
  String[] TEXTURES={"data/badlogic.jpg","data/egg.png","data/particle-fire.png","data/planet_earth.png","data/planet_heavyclouds.jpg","data/resource1.jpg","data/stones.jpg","data/sys.png","data/wheel.png"};
  int TEXTURE_COUNT=30;
  int BOX_COUNT=500;
  int UNIT_OFFSET=2;
  int MAX_TEXTURES=Math.min(8 - UNIT_OFFSET,ExclusiveTextures.MAX_GLES_UNITS - UNIT_OFFSET);
  int BIND_METHOD=ExclusiveTextures.WEIGHTED;
  for (int i=0; i < TEXTURE_COUNT; i++)   textures.add(new Texture(Gdx.files.internal(TEXTURES[i % TEXTURES.length])));
  final StillModel sphereModel=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
  final StillModel sceneModel=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/scene.obj"));
  final StillModel cubeModel=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/cube.obj"));
  final Model testModel=loader.load(Gdx.files.internal("data/g3d/test.g3dj"),null);
  StillSubMesh mesh=(StillSubMesh)(cubeModel.subMeshes[0]);
  for (int i=0; i < textures.size; i++)   models.add(new StillModel(new StillSubMesh(mesh.name,mesh.mesh,mesh.primitiveType,new Material("mat",new TextureAttribute(textures.get(i),0,"")))));
  for (int i=0; i < BOX_COUNT; i++)   instances.add(new ModelInstance(models.get((int)(Math.random() * models.size)),(new Matrix4()).setToTranslation(MIN_X + (float)Math.random() * SIZE_X,MIN_Y + (float)Math.random() * SIZE_Y,MIN_Z + (float)Math.random() * SIZE_Z).scl(0.05f + (float)Math.random())));
  cam=new PerspectiveCamera(67,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
  cam.position.set(10f,10f,10f);
  cam.lookAt(0,0,0);
  cam.update();
  renderBatch=new BaseRenderBatch(renderer=new BatchRendererGLES20(exclusiveTextures=new ExclusiveTextures(BIND_METHOD,UNIT_OFFSET,MAX_TEXTURES)));
  Gdx.input.setInputProcessor(this);
}
