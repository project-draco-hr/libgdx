{
  final JsonModelLoader loader=new JsonModelLoader();
  String[] TEXTURES={"data/badlogic.jpg","data/egg.png","data/particle-fire.png","data/planet_earth.png","data/planet_heavyclouds.jpg","data/resource1.jpg","data/stones.jpg","data/sys.png","data/wheel.png"};
  for (int i=0; i < TEXTURE_COUNT; i++)   textures.add(new Texture(Gdx.files.internal(TEXTURES[i % TEXTURES.length])));
  sphereModel=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/sphere.obj"));
  sceneModel=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/scene.obj"));
  cubeModel=ModelLoaderRegistry.loadStillModel(Gdx.files.internal("data/cube.obj"));
  testModel=loader.load(Gdx.files.internal("data/g3d/test.g3dj"),null);
  StillSubMesh mesh=(StillSubMesh)(cubeModel.subMeshes[0]);
  for (int i=0; i < textures.size; i++)   cubes.add(new StillModel(new StillSubMesh(mesh.name,mesh.mesh,mesh.primitiveType,new Material("mat",new TextureAttribute(textures.get(i),0,"")))));
  createScene2();
  cam=new PerspectiveCamera(67,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
  cam.position.set(10f,10f,10f);
  cam.lookAt(0,0,0);
  cam.update();
  renderBatch=new RenderBatch(exclusiveTextures=new ExclusiveTextures(BIND_METHOD,UNIT_OFFSET,MAX_TEXTURES));
  Gdx.input.setInputProcessor(this);
}
