{
  float rotation=child.getRotation();
  float scaleX=child.getScaleX();
  float scaleY=child.getScaleY();
  float childX=child.getX();
  float childY=child.getY();
  if (rotation == 0) {
    if (scaleX == 1 && scaleY == 1) {
      out.x=parentX - childX;
      out.y=parentY - childY;
    }
 else {
      float originX=child.getOriginX();
      float originY=child.getOriginY();
      if (originX == 0 && originY == 0) {
        out.x=(parentX - childX) / scaleX;
        out.y=(parentY - childY) / scaleY;
      }
 else {
        out.x=(parentX - childX - originX) / scaleX + originX;
        out.y=(parentY - childY - originY) / scaleY + originY;
      }
    }
  }
 else {
    final float cos=(float)Math.cos(rotation * MathUtils.degreesToRadians);
    final float sin=(float)Math.sin(rotation * MathUtils.degreesToRadians);
    float originX=child.getOriginX();
    float originY=child.getOriginY();
    if (scaleX == 1 && scaleY == 1) {
      if (originX == 0 && originY == 0) {
        float tox=parentX - childX;
        float toy=parentY - childY;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
      }
 else {
        final float worldOriginX=childX + originX;
        final float worldOriginY=childY + originY;
        float fx=-originX;
        float fy=-originY;
        float x1=cos * fx - sin * fy;
        float y1=sin * fx + cos * fy;
        x1+=worldOriginX;
        y1+=worldOriginY;
        float tox=parentX - x1;
        float toy=parentY - y1;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
      }
    }
 else {
      if (originX == 0 && originY == 0) {
        float tox=parentX - childX;
        float toy=parentY - childY;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
        out.x/=scaleX;
        out.y/=scaleY;
      }
 else {
        final float worldOriginX=childX + originX;
        final float worldOriginY=childY + originY;
        float fx=-originX * scaleX;
        float fy=-originY * scaleY;
        float x1=cos * fx - sin * fy;
        float y1=sin * fx + cos * fy;
        x1+=worldOriginX;
        y1+=worldOriginY;
        float tox=parentX - x1;
        float toy=parentY - y1;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
        out.x/=scaleX;
        out.y/=scaleY;
      }
    }
  }
}
