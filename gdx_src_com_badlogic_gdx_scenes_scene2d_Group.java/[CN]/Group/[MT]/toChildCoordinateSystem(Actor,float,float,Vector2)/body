{
  if (child.rotation == 0) {
    if (child.scaleX == 1 && child.scaleY == 1) {
      out.x=x - child.x;
      out.y=y - child.y;
    }
 else {
      if (child.refX == 0 && child.refY == 0) {
        out.x=(x - child.x) / child.scaleX;
        out.y=(y - child.y) / child.scaleY;
      }
 else {
        out.x=x / child.scaleX - (child.x - child.refX);
        out.x=x / child.scaleX - (child.x - child.refX);
      }
    }
  }
 else {
    final float cos=(float)Math.cos((float)Math.toRadians(child.rotation));
    final float sin=(float)Math.sin((float)Math.toRadians(child.rotation));
    if (child.scaleX == 1 && child.scaleY == 1) {
      if (child.refX == 0 && child.refY == 0) {
        float tox=x - child.x;
        float toy=y - child.y;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
      }
 else {
        float refX=-sin * child.refX + cos * child.refY;
        float refY=cos * child.refX + sin * child.refY;
        float px=child.x + child.refX - refX;
        float py=child.y + child.refY - refY;
        float tox=x - px;
        float toy=y - py;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
      }
    }
 else {
      if (child.refX == 0 && child.refY == 0) {
        float tox=x - child.x;
        float toy=y - child.y;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
        out.x/=child.scaleX;
        out.y/=child.scaleY;
      }
 else {
        float refX=-sin * child.refX + cos * child.refY;
        float refY=cos * child.refX + sin * child.refY;
        refX*=child.scaleX;
        refY*=child.scaleY;
        float px=child.x + child.refX - refX;
        float py=child.y + child.refY - refY;
        float tox=x - px;
        float toy=y - py;
        out.x=tox * cos + toy * sin;
        out.y=tox * -sin + toy * cos;
        out.x/=child.scaleX;
        out.y/=child.scaleY;
      }
    }
  }
}
