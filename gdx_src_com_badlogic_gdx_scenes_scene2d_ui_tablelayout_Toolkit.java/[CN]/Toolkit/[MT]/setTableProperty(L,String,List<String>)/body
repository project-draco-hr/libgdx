{
  name=name.toLowerCase();
  for (int i=0, n=values.size(); i < n; i++)   values.set(i,values.get(i).toLowerCase());
  try {
    String value;
    if (name.equals("size")) {
switch (values.size()) {
case 2:
        layout.height=validateSize(values.get(1));
case 1:
      layout.width=validateSize(values.get(0));
    break;
}
}
 else if (name.equals("width") || name.equals("w")) {
layout.width=validateSize(values.get(0));
}
 else if (name.equals("height") || name.equals("h")) {
layout.height=validateSize(values.get(0));
}
 else if (name.equals("padding") || name.equals("pad")) {
switch (values.size()) {
case 4:
  value=values.get(3);
if (value.length() > 0) layout.padRight=validateSize(value);
case 3:
value=values.get(2);
if (value.length() > 0) layout.padBottom=validateSize(value);
case 2:
value=values.get(0);
if (value.length() > 0) layout.padTop=validateSize(value);
value=values.get(1);
if (value.length() > 0) layout.padLeft=validateSize(value);
break;
case 1:
layout.padTop=layout.padLeft=layout.padBottom=layout.padRight=validateSize(values.get(0));
break;
default :
throw new IllegalArgumentException("Invalid number of values (" + values.size() + "): "+ values);
}
}
 else if (name.startsWith("padding") || name.startsWith("pad")) {
name=name.replace("padding","").replace("pad","");
if (name.equals("top") || name.equals("t")) layout.padTop=validateSize(values.get(0));
 else if (name.equals("left") || name.equals("l")) layout.padLeft=validateSize(values.get(0));
 else if (name.equals("bottom") || name.equals("b")) layout.padBottom=validateSize(values.get(0));
 else if (name.equals("right") || name.equals("r")) layout.padRight=validateSize(values.get(0));
 else throw new IllegalArgumentException("Unknown property.");
}
 else if (name.equals("align")) {
int align=0;
for (int i=0, n=values.size(); i < n; i++) {
value=values.get(i);
if (value.equals("center")) align|=CENTER;
 else if (value.equals("left")) align|=LEFT;
 else if (value.equals("right")) align|=RIGHT;
 else if (value.equals("top")) align|=TOP;
 else if (value.equals("bottom")) align|=BOTTOM;
 else throw new IllegalArgumentException("Invalid value: " + value);
}
layout.align=align;
}
 else if (name.equals("debug")) {
int debug=0;
if (values.size() == 0) debug=DEBUG_ALL;
for (int i=0, n=values.size(); i < n; i++) {
value=values.get(i);
if (value.equalsIgnoreCase("all") || value.equalsIgnoreCase("true")) debug|=DEBUG_ALL;
if (value.equalsIgnoreCase("cell")) debug|=DEBUG_CELL;
if (value.equalsIgnoreCase("table")) debug|=DEBUG_TABLE;
if (value.equalsIgnoreCase("widget")) debug|=DEBUG_WIDGET;
}
layout.debug=debug;
}
 else throw new IllegalArgumentException("Unknown table property: " + name);
}
 catch (Exception ex) {
throw new RuntimeException("Error setting table property: " + name,ex);
}
}
