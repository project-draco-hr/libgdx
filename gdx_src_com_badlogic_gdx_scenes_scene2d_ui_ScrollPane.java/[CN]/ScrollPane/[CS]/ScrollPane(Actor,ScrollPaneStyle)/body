{
  if (style == null)   throw new IllegalArgumentException("style cannot be null.");
  this.widget=widget;
  this.style=style;
  if (widget != null) {
    setWidget(widget);
  }
  setWidth(150);
  setHeight(150);
  addCaptureListener(new InputListener(){
    private float handlePosition;
    private int draggingPointer=-1;
    public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      if (draggingPointer != -1)       return false;
      if (pointer == 0 && button != 0)       return false;
      getStage().setScrollFocus(ScrollPane.this);
      if (!flickScroll)       resetFade();
      if (fadeAlpha == 0)       return false;
      if (scrollX && hScrollBounds.contains(x,y)) {
        event.stop();
        resetFade();
        if (hKnobBounds.contains(x,y)) {
          lastPoint.set(x,y);
          handlePosition=hKnobBounds.x;
          touchScrollH=true;
          draggingPointer=pointer;
          return true;
        }
        setScrollX(amountX + Math.max(areaWidth * 0.9f,maxX * 0.1f) * (x < hKnobBounds.x ? -1 : 1));
        return true;
      }
      if (scrollY && vScrollBounds.contains(x,y)) {
        event.stop();
        resetFade();
        if (vKnobBounds.contains(x,y)) {
          lastPoint.set(x,y);
          handlePosition=vKnobBounds.y;
          touchScrollV=true;
          draggingPointer=pointer;
          return true;
        }
        setScrollY(amountY + Math.max(areaHeight * 0.9f,maxY * 0.1f) * (y < vKnobBounds.y ? 1 : -1));
        return true;
      }
      return false;
    }
    public void touchUp(    InputEvent event,    float x,    float y,    int pointer,    int button){
      if (pointer != draggingPointer)       return;
      draggingPointer=-1;
      touchScrollH=false;
      touchScrollV=false;
    }
    public void touchDragged(    InputEvent event,    float x,    float y,    int pointer){
      if (pointer != draggingPointer)       return;
      if (touchScrollH) {
        float delta=x - lastPoint.x;
        float scrollH=handlePosition + delta;
        handlePosition=scrollH;
        scrollH=Math.max(hScrollBounds.x,scrollH);
        scrollH=Math.min(hScrollBounds.x + hScrollBounds.width - hKnobBounds.width,scrollH);
        setScrollPercentX((scrollH - hScrollBounds.x) / (hScrollBounds.width - hKnobBounds.width));
        lastPoint.set(x,y);
      }
 else       if (touchScrollV) {
        float delta=y - lastPoint.y;
        float scrollV=handlePosition + delta;
        handlePosition=scrollV;
        scrollV=Math.max(vScrollBounds.y,scrollV);
        scrollV=Math.min(vScrollBounds.y + vScrollBounds.height - vKnobBounds.height,scrollV);
        setScrollPercentY(1 - ((scrollV - vScrollBounds.y) / (vScrollBounds.height - vKnobBounds.height)));
        lastPoint.set(x,y);
      }
    }
    public boolean mouseMoved(    InputEvent event,    float x,    float y){
      return false;
    }
  }
);
  gestureListener=new ActorGestureListener(){
    public void pan(    InputEvent event,    float x,    float y,    float deltaX,    float deltaY){
      resetFade();
      amountX-=deltaX;
      amountY+=deltaY;
      clamp();
      cancelTouchFocusedChild(event);
    }
    public void fling(    InputEvent event,    float x,    float y,    int button){
      if (Math.abs(x) > 150) {
        flingTimer=flingTime;
        velocityX=x;
        cancelTouchFocusedChild(event);
      }
      if (Math.abs(y) > 150) {
        flingTimer=flingTime;
        velocityY=-y;
        cancelTouchFocusedChild(event);
      }
    }
    public boolean handle(    Event event){
      if (super.handle(event)) {
        if (((InputEvent)event).getType() == InputEvent.Type.touchDown)         flingTimer=0;
        return true;
      }
      return false;
    }
  }
;
  addListener(gestureListener);
  addListener(new InputListener(){
    public boolean scrolled(    InputEvent event,    int amount){
      resetFade();
      if (scrollY)       setScrollY(amountY + Math.max(areaHeight * 0.9f,maxY * 0.1f) / 4 * amount);
 else       if (scrollX)       setScrollX(amountX + Math.max(areaWidth * 0.9f,maxX * 0.1f) / 4 * amount);
      return true;
    }
  }
);
}
