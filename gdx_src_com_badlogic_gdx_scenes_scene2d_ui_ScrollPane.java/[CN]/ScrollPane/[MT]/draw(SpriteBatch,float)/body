{
  if (widget == null)   return;
  validate();
  applyTransform(batch);
  if (scrollX)   hKnobBounds.x=hScrollBounds.x + (int)((hScrollBounds.width - hKnobBounds.width) * getScrollPercentX());
  if (scrollY)   vKnobBounds.y=vScrollBounds.y + (int)((vScrollBounds.height - vKnobBounds.height) * (1 - getScrollPercentY()));
  widget.y=widgetAreaBounds.y - (!scrollY ? (int)(widget.height - areaHeight) : 0) - (scrollY ? (int)((widget.height - areaHeight) * (1 - getScrollPercentY())) : 0);
  widget.x=widgetAreaBounds.x - (scrollX ? (int)((widget.width - areaWidth) * getScrollPercentX()) : 0);
  if (widget instanceof Cullable) {
    widgetCullingArea.x=-widget.x + widgetAreaBounds.x;
    widgetCullingArea.y=-widget.y + widgetAreaBounds.y;
    widgetCullingArea.width=areaWidth;
    widgetCullingArea.height=areaHeight;
    ((Cullable)widget).setCullingArea(widgetCullingArea);
  }
  ScissorStack.calculateScissors(stage.getCamera(),batchTransform,widgetAreaBounds,scissorBounds);
  batch.setColor(color.r,color.g,color.b,color.a * parentAlpha);
  if (style.background != null) {
    style.background.draw(batch,0,0,width,height);
  }
  batch.flush();
  if (ScissorStack.pushScissors(scissorBounds)) {
    drawChildren(batch,parentAlpha);
    ScissorStack.popScissors();
  }
  batch.setColor(color.r,color.g,color.b,color.a * parentAlpha);
  if (scrollX) {
    style.hScroll.draw(batch,hScrollBounds.x,hScrollBounds.y,hScrollBounds.width,hScrollBounds.height);
    style.hScrollKnob.draw(batch,hKnobBounds.x,hKnobBounds.y,hKnobBounds.width,hKnobBounds.height);
  }
  if (scrollY) {
    style.vScroll.draw(batch,vScrollBounds.x,vScrollBounds.y,vScrollBounds.width,vScrollBounds.height);
    style.vScrollKnob.draw(batch,vKnobBounds.x,vKnobBounds.y,vKnobBounds.width,vKnobBounds.height);
  }
  resetTransform(batch);
}
