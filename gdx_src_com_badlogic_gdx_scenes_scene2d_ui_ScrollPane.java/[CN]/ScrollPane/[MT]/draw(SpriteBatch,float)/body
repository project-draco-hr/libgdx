{
  if (widget == null)   return;
  validate();
  applyTransform(batch,computeTransform());
  if (scrollX)   hKnobBounds.x=hScrollBounds.x + (int)((hScrollBounds.width - hKnobBounds.width) * getScrollPercentX());
  if (scrollY)   vKnobBounds.y=vScrollBounds.y + (int)((vScrollBounds.height - vKnobBounds.height) * (1 - getScrollPercentY()));
  float y=widgetAreaBounds.y;
  if (!scrollY)   y-=(int)maxY;
 else   y-=(int)(maxY * (1 - amountY / maxY));
  float x=widgetAreaBounds.x;
  if (scrollX)   x-=(int)(maxX * amountX / maxX);
  widget.setPosition(x,y);
  if (widget instanceof Cullable) {
    widgetCullingArea.x=-widget.getX() + widgetAreaBounds.x;
    widgetCullingArea.y=-widget.getY() + widgetAreaBounds.y;
    widgetCullingArea.width=widgetAreaBounds.width;
    widgetCullingArea.height=widgetAreaBounds.height;
    ((Cullable)widget).setCullingArea(widgetCullingArea);
  }
  ScissorStack.calculateScissors(getStage().getCamera(),batch.getTransformMatrix(),widgetAreaBounds,scissorBounds);
  Color color=getColor();
  batch.setColor(color.r,color.g,color.b,color.a * parentAlpha);
  if (style.background != null)   style.background.draw(batch,0,0,getWidth(),getHeight());
  batch.flush();
  if (ScissorStack.pushScissors(scissorBounds)) {
    drawChildren(batch,parentAlpha);
    ScissorStack.popScissors();
  }
  batch.setColor(color.r,color.g,color.b,color.a * parentAlpha * Interpolation.fade.apply(fadeAlpha / fadeAlphaSeconds));
  if (scrollX) {
    if (style.hScroll != null)     style.hScroll.draw(batch,hScrollBounds.x,hScrollBounds.y,hScrollBounds.width,hScrollBounds.height);
    if (style.hScrollKnob != null)     style.hScrollKnob.draw(batch,hKnobBounds.x,hKnobBounds.y,hKnobBounds.width,hKnobBounds.height);
  }
  if (scrollY) {
    if (style.vScroll != null)     style.vScroll.draw(batch,vScrollBounds.x,vScrollBounds.y,vScrollBounds.width,vScrollBounds.height);
    if (style.vScrollKnob != null)     style.vScrollKnob.draw(batch,vKnobBounds.x,vKnobBounds.y,vKnobBounds.width,vKnobBounds.height);
  }
  resetTransform(batch);
}
