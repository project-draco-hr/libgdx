{
  FreeTypeBitmapFontData data=new FreeTypeBitmapFontData();
  if (!FreeType.setPixelSizes(face,0,size))   throw new GdxRuntimeException("Couldn't set size for font");
  new FileHandle("glyphs").mkdirs();
  SizeMetrics fontMetrics=face.getSize().getMetrics();
  data.flipped=flip;
  data.ascent=FreeType.toInt(fontMetrics.getAscender());
  data.descent=FreeType.toInt(fontMetrics.getDescender());
  data.lineHeight=FreeType.toInt(fontMetrics.getHeight());
  float baseLine=data.ascent;
  if (FreeType.loadChar(face,' ',FreeType.FT_LOAD_DEFAULT)) {
    data.spaceWidth=FreeType.toInt(face.getGlyph().getMetrics().getHoriAdvance()) - 1;
  }
 else {
    data.spaceWidth=face.getMaxAdvanceWidth();
  }
  Glyph spaceGlyph=new Glyph();
  spaceGlyph.xadvance=(int)data.spaceWidth;
  data.setGlyph(' ',spaceGlyph);
  for (  char xChar : BitmapFont.xChars) {
    if (!FreeType.loadChar(face,xChar,FreeType.FT_LOAD_DEFAULT))     continue;
    data.xHeight=FreeType.toInt(face.getGlyph().getMetrics().getHeight());
    break;
  }
  if (data.xHeight == 0)   throw new GdxRuntimeException("No x-height character found in font");
  for (  char capChar : BitmapFont.capChars) {
    if (!FreeType.loadChar(face,capChar,FreeType.FT_LOAD_DEFAULT))     continue;
    data.capHeight=FreeType.toInt(face.getGlyph().getMetrics().getHeight());
    break;
  }
  if (data.capHeight == 1)   throw new GdxRuntimeException("No cap character found in font");
  data.ascent=data.ascent - data.capHeight;
  data.down=-data.lineHeight;
  if (flip) {
    data.ascent=-data.ascent;
    data.down=-data.down;
  }
  int maxGlyphHeight=(int)Math.ceil(data.lineHeight);
  int pageWidth=MathUtils.nextPowerOfTwo((int)Math.sqrt(maxGlyphHeight * maxGlyphHeight * characters.length()));
  PixmapAtlas atlas=new PixmapAtlas(pageWidth,pageWidth,Format.RGBA8888,2,false);
  for (int i=0; i < characters.length(); i++) {
    char c=characters.charAt(i);
    if (!FreeType.loadChar(face,c,FreeType.FT_LOAD_DEFAULT))     continue;
    if (!FreeType.renderGlyph(face.getGlyph(),FreeType.FT_RENDER_MODE_NORMAL))     ;
    GlyphSlot slot=face.getGlyph();
    GlyphMetrics metrics=slot.getMetrics();
    Bitmap bitmap=slot.getBitmap();
    Pixmap pixmap=bitmap.getPixmap(Format.RGBA8888);
    PixmapIO.writePNG(new FileHandle("glyphs/" + i + ".png"),pixmap);
    Rectangle rect=atlas.insertImage("" + c,pixmap);
    Glyph glyph=new Glyph();
    glyph.width=pixmap.getWidth();
    glyph.height=pixmap.getHeight();
    glyph.xoffset=slot.getBitmapLeft();
    glyph.yoffset=flip ? -slot.getBitmapTop() + (int)baseLine : -(glyph.height - slot.getBitmapTop()) - (int)baseLine;
    glyph.xadvance=FreeType.toInt(metrics.getHoriAdvance());
    glyph.srcX=(int)rect.x;
    glyph.srcY=(int)rect.y;
    data.setGlyph(c,glyph);
  }
  for (int i=0; i < characters.length(); i++) {
    for (int j=0; j < characters.length(); j++) {
      char firstChar=characters.charAt(i);
      Glyph first=data.getGlyph(firstChar);
      if (first == null)       continue;
      char secondChar=characters.charAt(j);
      Glyph second=data.getGlyph(secondChar);
      if (second == null)       continue;
      int kerning=FreeType.getKerning(face,FreeType.getCharIndex(face,firstChar),FreeType.getCharIndex(face,secondChar),0);
      if (kerning == 0)       continue;
      first.setKerning(secondChar,FreeType.toInt(kerning));
    }
  }
  TextureAtlas textureAtlas=atlas.generateTextureAtlas(TextureFilter.Nearest,TextureFilter.Nearest);
  data.region=new TextureRegion(textureAtlas.getRegions().get(0).getTexture());
  return data;
}
