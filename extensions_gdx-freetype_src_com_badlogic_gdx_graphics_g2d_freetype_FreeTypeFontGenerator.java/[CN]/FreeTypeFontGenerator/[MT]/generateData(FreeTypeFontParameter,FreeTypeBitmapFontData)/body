{
  parameter=parameter == null ? new FreeTypeFontParameter() : parameter;
  String characters=parameter.characters;
  int charactersLength=characters.length();
  boolean incremental=parameter.incremental;
  setPixelSizes(0,parameter.size);
  SizeMetrics fontMetrics=face.getSize().getMetrics();
  data.flipped=parameter.flip;
  data.ascent=FreeType.toInt(fontMetrics.getAscender());
  data.descent=FreeType.toInt(fontMetrics.getDescender());
  data.lineHeight=FreeType.toInt(fontMetrics.getHeight());
  float baseLine=data.ascent;
  if (bitmapped && (data.lineHeight == 0)) {
    for (int c=32; c < (32 + face.getNumGlyphs()); c++) {
      if (loadChar(c)) {
        int lh=FreeType.toInt(face.getGlyph().getMetrics().getHeight());
        data.lineHeight=(lh > data.lineHeight) ? lh : data.lineHeight;
      }
    }
  }
  data.lineHeight+=parameter.spaceY;
  if (loadChar(' ') || loadChar('l')) {
    data.spaceWidth=FreeType.toInt(face.getGlyph().getMetrics().getHoriAdvance());
  }
 else {
    data.spaceWidth=face.getMaxAdvanceWidth();
  }
  for (  char xChar : data.xChars) {
    if (!loadChar(xChar))     continue;
    data.xHeight=FreeType.toInt(face.getGlyph().getMetrics().getHeight());
    break;
  }
  if (data.xHeight == 0)   throw new GdxRuntimeException("No x-height character found in font");
  for (  char capChar : data.capChars) {
    if (!loadChar(capChar))     continue;
    data.capHeight=FreeType.toInt(face.getGlyph().getMetrics().getHeight());
    break;
  }
  if (!bitmapped && data.capHeight == 1)   throw new GdxRuntimeException("No cap character found in font");
  data.ascent=data.ascent - data.capHeight;
  data.down=-data.lineHeight;
  if (parameter.flip) {
    data.ascent=-data.ascent;
    data.down=-data.down;
  }
  boolean ownsAtlas=false;
  PixmapPacker packer=parameter.packer;
  if (packer == null) {
    int size;
    if (incremental)     size=maxTextureSize;
 else {
      int maxGlyphHeight=(int)Math.ceil(data.lineHeight);
      size=MathUtils.nextPowerOfTwo((int)Math.sqrt(maxGlyphHeight * maxGlyphHeight * charactersLength));
      if (maxTextureSize > 0)       size=Math.min(size,maxTextureSize);
    }
    ownsAtlas=true;
    packer=new PixmapPacker(size,size,Format.RGBA8888,2,false);
  }
  Stroker stroker=null;
  if (parameter.borderWidth > 0) {
    stroker=library.createStroker();
    stroker.set((int)(parameter.borderWidth * 64f),parameter.borderStraight ? FreeType.FT_STROKER_LINECAP_BUTT : FreeType.FT_STROKER_LINECAP_ROUND,parameter.borderStraight ? FreeType.FT_STROKER_LINEJOIN_MITER_FIXED : FreeType.FT_STROKER_LINEJOIN_ROUND,0);
  }
  if (incremental) {
    data.generator=this;
    data.parameter=parameter;
    data.stroker=stroker;
    data.packer=packer;
    data.glyphs=new Array(charactersLength + 32);
  }
  for (int i=0; i < charactersLength; i++) {
    char c=characters.charAt(i);
    Glyph glyph=createGlyph(c,data,parameter,stroker,baseLine,packer);
    if (glyph != null) {
      data.setGlyph(c,glyph);
      if (incremental)       data.glyphs.add(glyph);
    }
  }
  if (stroker != null && !incremental)   stroker.dispose();
  data.missingGlyph=data.getGlyph('\u0000');
  parameter.kerning&=face.hasKerning();
  if (parameter.kerning) {
    for (int i=0; i < charactersLength; i++) {
      char firstChar=characters.charAt(i);
      Glyph first=data.getGlyph(firstChar);
      if (first == null)       continue;
      int firstIndex=face.getCharIndex(firstChar);
      for (int j=i; j < charactersLength; j++) {
        char secondChar=characters.charAt(j);
        Glyph second=data.getGlyph(secondChar);
        if (second == null)         continue;
        int secondIndex=face.getCharIndex(secondChar);
        int kerning=face.getKerning(firstIndex,secondIndex,0);
        if (kerning != 0)         first.setKerning(secondChar,FreeType.toInt(kerning));
        kerning=face.getKerning(secondIndex,firstIndex,0);
        if (kerning != 0)         second.setKerning(firstChar,FreeType.toInt(kerning));
      }
    }
  }
  if (ownsAtlas) {
    data.regions=new Array();
    packer.updateTextureRegions(data.regions,parameter.minFilter,parameter.magFilter,parameter.genMipMaps);
  }
  Glyph spaceGlyph=data.getGlyph(' ');
  if (spaceGlyph == null) {
    spaceGlyph=new Glyph();
    spaceGlyph.xadvance=(int)data.spaceWidth + parameter.spaceX;
    spaceGlyph.id=(int)' ';
    data.setGlyph(' ',spaceGlyph);
  }
  if (spaceGlyph.width == 0)   spaceGlyph.width=(int)(spaceGlyph.xadvance + data.padRight);
  return data;
}
