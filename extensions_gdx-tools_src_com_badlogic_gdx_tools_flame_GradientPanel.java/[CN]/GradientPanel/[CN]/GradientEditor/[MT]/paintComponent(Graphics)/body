{
  super.paintComponent(graphics);
  Graphics2D g=(Graphics2D)graphics;
  int width=getWidth() - 1;
  int height=getHeight();
  gradientWidth=width - handleWidth;
  gradientHeight=height - 16;
  g.translate(gradientX,gradientY);
  for (int i=0, n=colors.size() == 1 ? 1 : colors.size() - 1; i < n; i++) {
    Color color1=colors.get(i);
    Color color2=colors.size() == 1 ? color1 : colors.get(i + 1);
    float percent1=percentages.get(i);
    float percent2=colors.size() == 1 ? 1 : percentages.get(i + 1);
    int point1=(int)(percent1 * gradientWidth);
    int point2=(int)Math.ceil(percent2 * gradientWidth);
    g.setPaint(new GradientPaint(point1,0,color1,point2,0,color2,false));
    g.fillRect(point1,0,point2 - point1,gradientHeight);
  }
  g.setPaint(null);
  g.setColor(Color.black);
  g.drawRect(0,0,gradientWidth,gradientHeight);
  int y=gradientHeight;
  int[] yPoints=new int[3];
  yPoints[0]=y;
  yPoints[1]=y + handleHeight;
  yPoints[2]=y + handleHeight;
  int[] xPoints=new int[3];
  for (int i=0, n=colors.size(); i < n; i++) {
    int x=(int)(percentages.get(i) * gradientWidth);
    xPoints[0]=x;
    xPoints[1]=x - handleWidth / 2;
    xPoints[2]=x + handleWidth / 2;
    if (i == selectedIndex) {
      g.setColor(colors.get(i));
      g.fillPolygon(xPoints,yPoints,3);
      g.fillRect(xPoints[1],yPoints[1] + 2,handleWidth + 1,2);
      g.setColor(Color.black);
    }
    g.drawPolygon(xPoints,yPoints,3);
  }
  g.translate(-gradientX,-gradientY);
}
