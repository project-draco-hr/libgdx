{
  if (currentLights[num].equals(light))   return;
  currentLights[num].set(light);
  Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_AMBIENT,zeroVal4,0);
  Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_DIFFUSE,zeroVal4,0);
  Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_SPECULAR,zeroVal4,0);
  Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_POSITION,zeroVal4,0);
  if (light == null || light.type == Light.NONE)   return;
  lightVal[0]=light.color.r;
  lightVal[1]=light.color.g;
  lightVal[2]=light.color.b;
  lightVal[3]=light.color.a;
  if (light.type == Light.AMBIENT) {
    Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_AMBIENT,lightVal,0);
    return;
  }
  Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_DIFFUSE,lightVal,0);
  if (light.type == Light.DIRECTIONAL) {
    lightVal[0]=-light.direction.x;
    lightVal[1]=-light.direction.y;
    lightVal[2]=-light.direction.z;
    lightVal[3]=0f;
  }
 else {
    lightVal[0]=light.position.x;
    lightVal[1]=light.position.y;
    lightVal[2]=light.position.z;
    lightVal[3]=1f;
  }
  Gdx.gl10.glPushMatrix();
  Gdx.gl10.glLoadIdentity();
  Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_POSITION,lightVal,0);
  if (light.type == Light.SPOT) {
    lightVal[0]=light.direction.x;
    lightVal[1]=light.direction.y;
    lightVal[2]=light.direction.z;
    lightVal[3]=0f;
    Gdx.gl10.glLightfv(GL10.GL_LIGHT0 + num,GL10.GL_SPOT_DIRECTION,lightVal,0);
    Gdx.gl10.glLightf(GL10.GL_LIGHT0 + num,GL10.GL_SPOT_CUTOFF,MathUtils.clamp(light.angle,0f,90f));
  }
 else   Gdx.gl10.glLightf(GL10.GL_LIGHT0 + num,GL10.GL_SPOT_CUTOFF,180f);
  Gdx.gl10.glPopMatrix();
  Gdx.gl10.glLightf(GL10.GL_LIGHT0 + num,GL10.GL_CONSTANT_ATTENUATION,light.type == Light.DIRECTIONAL ? 1 : 0);
  Gdx.gl10.glLightf(GL10.GL_LIGHT0 + num,GL10.GL_LINEAR_ATTENUATION,light.type == Light.DIRECTIONAL ? 0 : 1f / light.power);
  Gdx.app.log("test","Light power = " + light.power);
}
