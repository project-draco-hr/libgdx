{
  tmpC.set(1,1,1,1);
  boolean hasColor=false;
  if (currentMaterial != renderable.material) {
    currentMaterial=renderable.material;
    if (!currentMaterial.has(BlendingAttribute.Type))     context.setBlending(false,GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);
    if (!currentMaterial.has(ColorAttribute.Diffuse)) {
      Gdx.gl10.glColor4f(1,1,1,1);
      if (renderable.environment != null)       Gdx.gl10.glDisable(GL10.GL_COLOR_MATERIAL);
    }
    if (!currentMaterial.has(TextureAttribute.Diffuse))     Gdx.gl10.glDisable(GL10.GL_TEXTURE_2D);
    int cullFace=defaultCullFace;
    for (    final Attribute attribute : currentMaterial) {
      if (attribute.type == BlendingAttribute.Type) {
        context.setBlending(true,((BlendingAttribute)attribute).sourceFunction,((BlendingAttribute)attribute).destFunction);
        hasColor=true;
        tmpC.a=((BlendingAttribute)attribute).opacity;
      }
 else       if (attribute.type == ColorAttribute.Diffuse) {
        float a=tmpC.a;
        tmpC.set(((ColorAttribute)attribute).color);
        tmpC.a=a;
        hasColor=true;
      }
 else       if (attribute.type == TextureAttribute.Diffuse) {
        TextureDescriptor textureDesc=((TextureAttribute)attribute).textureDescription;
        if (currentTexture0 != textureDesc.texture)         (currentTexture0=(Texture)textureDesc.texture).bind(0);
        currentTexture0.unsafeSetFilter(textureDesc.minFilter,textureDesc.magFilter);
        currentTexture0.unsafeSetWrap(textureDesc.uWrap,textureDesc.vWrap);
        Gdx.gl10.glEnable(GL10.GL_TEXTURE_2D);
      }
 else       if ((attribute.type & IntAttribute.CullFace) == IntAttribute.CullFace)       cullFace=((IntAttribute)attribute).value;
    }
    context.setCullFace(cullFace);
  }
  if (hasColor) {
    Gdx.gl10.glColor4f(tmpC.r,tmpC.g,tmpC.b,tmpC.a);
    if (renderable.environment != null) {
      Gdx.gl10.glEnable(GL10.GL_COLOR_MATERIAL);
      Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK,GL10.GL_AMBIENT,getValues(lightVal,tmpC),0);
      Gdx.gl10.glMaterialfv(GL10.GL_FRONT_AND_BACK,GL10.GL_DIFFUSE,getValues(lightVal,tmpC),0);
    }
  }
  if (currentTransform != renderable.worldTransform) {
    if (currentTransform != null)     Gdx.gl10.glPopMatrix();
    currentTransform=renderable.worldTransform;
    Gdx.gl10.glPushMatrix();
    Gdx.gl10.glLoadMatrixf(currentTransform.val,0);
  }
  bindLights(renderable.environment);
  if (currentMesh != renderable.mesh) {
    if (currentMesh != null)     currentMesh.unbind();
    (currentMesh=renderable.mesh).bind();
  }
  renderable.mesh.render(renderable.primitiveType,renderable.meshPartOffset,renderable.meshPartSize);
}
