{
  Method[] methods=clazz.getMethods();
  ArrayList<Method> matchMethods=new ArrayList<Method>();
  for (  Method method : methods) {
    if (!methodName.equals(method.getName())) {
      continue;
    }
    Class<?>[] parameterTypes=method.getParameterTypes();
    if (parameterTypes.length != clazzes.length) {
      continue;
    }
    boolean match=true;
    for (int i=0; i < parameterTypes.length; i++) {
      boolean isNull=(clazzes[i] == null);
      boolean isPrimitive=isPrimitiveWrapper(clazzes[i],parameterTypes[i]);
      boolean isAssignable=isNull ? false : parameterTypes[i].isAssignableFrom(clazzes[i]);
      if (isNull || isPrimitive || isAssignable) {
        continue;
      }
      match=false;
    }
    if (match) {
      matchMethods.add(method);
    }
  }
  int size=matchMethods.size();
  if (size == 1) {
    return matchMethods.get(0);
  }
 else   if (size == 0) {
    throw new NoSuchMethodException(Messages.getString("beans.41",methodName));
  }
  MethodComparator comparator=new MethodComparator(methodName,clazzes);
  Method chosenOne=matchMethods.get(0);
  matchMethods.remove(0);
  int methodCounter=1;
  for (  Method method : matchMethods) {
    int difference=comparator.compare(chosenOne,method);
    if (difference > 0) {
      chosenOne=method;
      methodCounter=1;
    }
 else     if (difference == 0) {
      methodCounter++;
    }
  }
  if (methodCounter > 1) {
    throw new NoSuchMethodException(Messages.getString("beans.62",methodName));
  }
  return chosenOne;
}
