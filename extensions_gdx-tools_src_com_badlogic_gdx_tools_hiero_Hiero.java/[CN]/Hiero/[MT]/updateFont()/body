{
  int fontSize=((Integer)fontSizeSpinner.getValue()).intValue();
  File file=null;
  if (fontFileRadio.isSelected()) {
    file=new File(fontFileText.getText());
    if (!file.exists() || !file.isFile())     file=null;
  }
  boolean isFreeType=freeTypeRadio.isSelected();
  boolean isNative=nativeRadio.isSelected();
  boolean isJava=javaRadio.isSelected();
  addEffectButton.setVisible(isJava);
  effectsScroll.setVisible(isJava);
  appliedEffectsScroll.setVisible(isJava);
  boldCheckBox.setEnabled(!isFreeType);
  italicCheckBox.setEnabled(!isFreeType);
  bitmapPanel.setVisible(isFreeType);
  unicodePanel.setVisible(!isFreeType);
  updateFontSelector();
  UnicodeFont unicodeFont=null;
  if (file != null) {
    try {
      unicodeFont=new UnicodeFont(fontFileText.getText(),fontSize,boldCheckBox.isSelected(),italicCheckBox.isSelected());
    }
 catch (    Throwable ex) {
      ex.printStackTrace();
      fontFileRadio.setSelected(false);
    }
  }
  if (unicodeFont == null) {
    unicodeFont=new UnicodeFont(Font.decode((String)fontList.getSelectedValue()),fontSize,boldCheckBox.isSelected(),italicCheckBox.isSelected());
  }
  unicodeFont.setMono(monoCheckBox.isSelected());
  unicodeFont.setGamma(((Number)gammaSpinner.getValue()).floatValue());
  unicodeFont.setPaddingTop(((Number)padTopSpinner.getValue()).intValue());
  unicodeFont.setPaddingRight(((Number)padRightSpinner.getValue()).intValue());
  unicodeFont.setPaddingBottom(((Number)padBottomSpinner.getValue()).intValue());
  unicodeFont.setPaddingLeft(((Number)padLeftSpinner.getValue()).intValue());
  unicodeFont.setPaddingAdvanceX(((Number)padAdvanceXSpinner.getValue()).intValue());
  unicodeFont.setPaddingAdvanceY(((Number)padAdvanceYSpinner.getValue()).intValue());
  unicodeFont.setGlyphPageWidth(((Number)glyphPageWidthCombo.getSelectedItem()).intValue());
  unicodeFont.setGlyphPageHeight(((Number)glyphPageHeightCombo.getSelectedItem()).intValue());
  if (nativeRadio.isSelected())   unicodeFont.setRenderType(RenderType.Native);
 else   if (freeTypeRadio.isSelected())   unicodeFont.setRenderType(RenderType.FreeType);
 else   unicodeFont.setRenderType(RenderType.Java);
  for (Iterator iter=effectPanels.iterator(); iter.hasNext(); ) {
    EffectPanel panel=(EffectPanel)iter.next();
    unicodeFont.getEffects().add(panel.getEffect());
  }
  int size=sampleTextPane.getFont().getSize();
  if (size < 14)   size=14;
  sampleTextPane.setFont(unicodeFont.getFont().deriveFont((float)size));
  if (this.unicodeFont != null)   this.unicodeFont.dispose();
  this.unicodeFont=unicodeFont;
  updateFontSelector();
}
