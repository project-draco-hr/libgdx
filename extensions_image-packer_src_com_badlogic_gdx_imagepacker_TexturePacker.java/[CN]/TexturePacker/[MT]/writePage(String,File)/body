{
  Comparator bestComparator=null;
  Comparator secondBestComparator=imageComparators.get(0);
  int bestWidth=99999, bestHeight=99999;
  int secondBestWidth=99999, secondBestHeight=99999;
  int bestUsedPixels=0;
  int width=minWidth, height=minHeight;
  int grownPixels=0, grownPixels2=0;
  int i=0, ii=0;
  while (true) {
    for (    Comparator comparator : imageComparators) {
      Collections.sort(images,comparator);
      int usedPixels=insert(null,new ArrayList(images),width,height);
      if (usedPixels > bestUsedPixels) {
        secondBestComparator=comparator;
        secondBestWidth=width;
        secondBestHeight=height;
      }
      if (usedPixels == -1) {
        if (width * height < bestWidth * bestHeight) {
          bestComparator=comparator;
          bestWidth=width;
          bestHeight=height;
        }
      }
    }
    if (width == maxWidth && height == maxHeight)     break;
    if (bestComparator != null)     break;
    if (settings.pot) {
      if (i % 3 == 0) {
        grownPixels+=MathUtils.nextPowerOfTwo(width + 1) - width;
        width=MathUtils.nextPowerOfTwo(width + 1);
        if (width > maxWidth) {
          i++;
          width-=grownPixels;
          grownPixels=0;
        }
      }
 else       if (i % 3 == 1) {
        grownPixels+=MathUtils.nextPowerOfTwo(height + 1) - height;
        height=MathUtils.nextPowerOfTwo(height + 1);
        if (height > maxHeight) {
          i++;
          height-=grownPixels;
          grownPixels=0;
        }
      }
 else {
        ii++;
        if (ii % 2 == 1)         width=MathUtils.nextPowerOfTwo(width + 1);
 else         height=MathUtils.nextPowerOfTwo(height + 1);
        i++;
      }
    }
 else {
      if (i % 3 == 0) {
        width++;
        grownPixels++;
        if (width == MathUtils.nextPowerOfTwo(width)) {
          width-=grownPixels;
          grownPixels=0;
          i++;
        }
      }
 else       if (i % 3 == 1) {
        height++;
        grownPixels++;
        if (height == MathUtils.nextPowerOfTwo(height)) {
          height-=grownPixels;
          grownPixels=0;
          i++;
        }
      }
 else {
        if (width == MathUtils.nextPowerOfTwo(width) && height == MathUtils.nextPowerOfTwo(height))         ii++;
        if (ii % 2 == 1)         width++;
 else         height++;
        i++;
      }
    }
    width=Math.min(maxWidth,width);
    height=Math.min(maxHeight,height);
  }
  if (bestComparator != null) {
    Collections.sort(images,bestComparator);
  }
 else {
    Collections.sort(images,secondBestComparator);
    bestWidth=secondBestWidth;
    bestHeight=secondBestHeight;
  }
  width=bestWidth;
  height=bestHeight;
  if (settings.pot) {
    width=MathUtils.nextPowerOfTwo(width);
    height=MathUtils.nextPowerOfTwo(height);
  }
  int type;
switch (filter.format != null ? filter.format : settings.defaultFormat) {
case RGBA8888:
case RGBA4444:
    type=BufferedImage.TYPE_INT_ARGB;
  break;
case RGB565:
type=BufferedImage.TYPE_INT_RGB;
break;
case Alpha:
type=BufferedImage.TYPE_BYTE_GRAY;
break;
default :
throw new RuntimeException();
}
int imageNumber=1;
File outputFile=new File(outputDir,prefix + imageNumber + ".png");
while (outputFile.exists()) outputFile=new File(outputDir,prefix + ++imageNumber + ".png");
writer.write("\n" + outputFile.getName() + "\n");
Format format;
if (filter.format != null) {
writer.write("format: " + filter.format + "\n");
format=filter.format;
}
 else {
writer.write("format: " + settings.defaultFormat + "\n");
format=settings.defaultFormat;
}
if (filter.minFilter == null || filter.magFilter == null) writer.write("filter: " + settings.defaultFilterMin + ","+ settings.defaultFilterMag+ "\n");
 else writer.write("filter: " + filter.minFilter + ","+ filter.magFilter+ "\n");
writer.write("repeat: " + filter.direction + "\n");
BufferedImage canvas=new BufferedImage(width,height,type);
insert(canvas,images,bestWidth,bestHeight);
System.out.println("Writing " + canvas.getWidth() + "x"+ canvas.getHeight()+ ": "+ outputFile);
ImageIO.write(canvas,"png",outputFile);
compressedSize+=canvas.getWidth() * canvas.getHeight();
}
