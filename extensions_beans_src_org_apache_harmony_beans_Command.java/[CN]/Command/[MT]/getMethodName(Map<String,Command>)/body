{
  if (methodName == null) {
    String methodValue=null;
    if (isTag("class")) {
      addArgument(new Argument(String.class,data),0);
      methodValue="forName";
    }
 else     if (isPrimitive()) {
      if (isTag("char")) {
        if (data.length() != 1) {
          throw new IntrospectionException(Messages.getString("beans.43",data));
        }
        addArgument(new Argument(char.class,Character.valueOf(data.charAt(0))),0);
      }
 else {
        addArgument(new Argument(String.class,data),0);
      }
      methodValue="new";
    }
 else     if (isConstructor() || hasAttr("method","new")) {
      methodValue="new";
    }
 else     if (isArray()) {
      methodValue="new";
      int length=hasAttr("length") ? Integer.parseInt(getAttr("length")) : getArgumentsNumber();
      copyArgumentsToCommands();
      addArgument(new Argument(int.class,Integer.valueOf(length)),0);
    }
 else     if (hasAttr("property")) {
      String propertyValue=getAttr("property");
      if (hasAttr("index")) {
        addArgument(new Argument(int.class,new Integer(getAttr("index"))),0);
      }
      BeanInfo beanInfo=Introspector.getBeanInfo(getTarget(references).getClass());
      PropertyDescriptor[] pds=beanInfo.getPropertyDescriptors();
      boolean methodFound=false;
      Method method=null;
      for (      PropertyDescriptor pd : pds) {
        if (propertyValue.equals(pd.getName())) {
          int argsNum=getArgumentsNumber();
          if (hasAttr("index")) {
            IndexedPropertyDescriptor ipd=(IndexedPropertyDescriptor)pd;
            if (argsNum == 1) {
              method=ipd.getIndexedReadMethod();
            }
 else             if (argsNum == 0) {
              method=ipd.getReadMethod();
            }
          }
 else {
            method=pd.getReadMethod();
          }
          if (method != null) {
            methodFound=matchMethodParams(method,references);
          }
          if (methodFound == false) {
            if (hasAttr("index")) {
              IndexedPropertyDescriptor ipd=(IndexedPropertyDescriptor)pd;
              if (argsNum == 2) {
                method=ipd.getIndexedWriteMethod();
              }
 else               if (argsNum == 1) {
                method=ipd.getWriteMethod();
              }
            }
 else {
              method=pd.getWriteMethod();
            }
          }
          if (method != null) {
            methodFound=matchMethodParams(method,references);
          }
        }
      }
      if (method == null) {
        throw new NoSuchMethodException(Messages.getString("beans.44",propertyValue));
      }
      methodValue=method.getName();
    }
 else     if (hasAttr("method")) {
      if (hasAttr("index")) {
        addArgument(new Argument(int.class,Integer.valueOf(getAttr("index"))),0);
      }
      methodValue=getAttr("method");
    }
 else     if (hasAttr("index")) {
      addArgument(new Argument(int.class,Integer.valueOf(getAttr("index"))),0);
      methodValue=getArgumentsNumber() > 1 ? "set" : "get";
      if (ctx.isArray()) {
        addArgument(ctx.getResult(),0);
      }
    }
 else     if (hasAttr("field")) {
      addArgument(new Argument(Class.forName(getAttr("class"),true,Thread.currentThread().getContextClassLoader())),0);
      methodValue="get";
    }
 else {
      throw new Exception(Messages.getString("beans.45"));
    }
    methodName=methodValue;
  }
  return methodName;
}
