{
  String propName=event.getPropertyName();
  Object oldValue=event.getOldValue();
  Object newValue=event.getNewValue();
  if (newValue != null && oldValue != null && newValue.equals(oldValue)) {
    return;
  }
  VetoableChangeListener[] listensToAll;
  VetoableChangeSupport listeners=null;
synchronized (this) {
    listensToAll=globalListeners.toArray(new VetoableChangeListener[0]);
    String propertyName=event.getPropertyName();
    if (propertyName != null) {
      listeners=children.get(propertyName);
    }
  }
  try {
    for (    VetoableChangeListener listener : listensToAll) {
      listener.vetoableChange(event);
    }
  }
 catch (  PropertyVetoException pve) {
    PropertyChangeEvent revertEvent=createPropertyChangeEvent(propName,newValue,oldValue);
    for (    VetoableChangeListener listener : listensToAll) {
      try {
        listener.vetoableChange(revertEvent);
      }
 catch (      PropertyVetoException ignored) {
      }
    }
    throw pve;
  }
  if (listeners != null) {
    listeners.fireVetoableChange(event);
  }
}
