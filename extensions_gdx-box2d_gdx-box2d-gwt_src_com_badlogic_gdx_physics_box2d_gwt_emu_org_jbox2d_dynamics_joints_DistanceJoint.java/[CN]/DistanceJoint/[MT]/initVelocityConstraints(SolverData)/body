{
  m_indexA=m_bodyA.m_islandIndex;
  m_indexB=m_bodyB.m_islandIndex;
  m_localCenterA.set(m_bodyA.m_sweep.localCenter);
  m_localCenterB.set(m_bodyB.m_sweep.localCenter);
  m_invMassA=m_bodyA.m_invMass;
  m_invMassB=m_bodyB.m_invMass;
  m_invIA=m_bodyA.m_invI;
  m_invIB=m_bodyB.m_invI;
  Vec2 cA=data.positions[m_indexA].c;
  float aA=data.positions[m_indexA].a;
  Vec2 vA=data.velocities[m_indexA].v;
  float wA=data.velocities[m_indexA].w;
  Vec2 cB=data.positions[m_indexB].c;
  float aB=data.positions[m_indexB].a;
  Vec2 vB=data.velocities[m_indexB].v;
  float wB=data.velocities[m_indexB].w;
  final Rot qA=pool.popRot();
  final Rot qB=pool.popRot();
  qA.set(aA);
  qB.set(aB);
  Rot.mulToOutUnsafe(qA,m_u.set(m_localAnchorA).subLocal(m_localCenterA),m_rA);
  Rot.mulToOutUnsafe(qB,m_u.set(m_localAnchorB).subLocal(m_localCenterB),m_rB);
  m_u.set(cB).addLocal(m_rB).subLocal(cA).subLocal(m_rA);
  pool.pushRot(2);
  float length=m_u.length();
  if (length > Settings.linearSlop) {
    m_u.x*=1.0f / length;
    m_u.y*=1.0f / length;
  }
 else {
    m_u.set(0.0f,0.0f);
  }
  float crAu=Vec2.cross(m_rA,m_u);
  float crBu=Vec2.cross(m_rB,m_u);
  float invMass=m_invMassA + m_invIA * crAu * crAu + m_invMassB + m_invIB * crBu * crBu;
  m_mass=invMass != 0.0f ? 1.0f / invMass : 0.0f;
  if (m_frequencyHz > 0.0f) {
    float C=length - m_length;
    float omega=2.0f * MathUtils.PI * m_frequencyHz;
    float d=2.0f * m_mass * m_dampingRatio* omega;
    float k=m_mass * omega * omega;
    float h=data.step.dt;
    m_gamma=h * (d + h * k);
    m_gamma=m_gamma != 0.0f ? 1.0f / m_gamma : 0.0f;
    m_bias=C * h * k* m_gamma;
    invMass+=m_gamma;
    m_mass=invMass != 0.0f ? 1.0f / invMass : 0.0f;
  }
 else {
    m_gamma=0.0f;
    m_bias=0.0f;
  }
  if (data.step.warmStarting) {
    m_impulse*=data.step.dtRatio;
    Vec2 P=pool.popVec2();
    P.set(m_u).mulLocal(m_impulse);
    vA.x-=m_invMassA * P.x;
    vA.y-=m_invMassA * P.y;
    wA-=m_invIA * Vec2.cross(m_rA,P);
    vB.x+=m_invMassB * P.x;
    vB.y+=m_invMassB * P.y;
    wB+=m_invIB * Vec2.cross(m_rB,P);
    pool.pushVec2(1);
  }
 else {
    m_impulse=0.0f;
  }
  data.velocities[m_indexA].w=wA;
  data.velocities[m_indexB].w=wB;
}
