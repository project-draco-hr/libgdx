{
  if (element.getName().equals("tileset")) {
    String name=element.get("name",null);
    int firstgid=element.getIntAttribute("firstgid",1);
    int tilewidth=element.getIntAttribute("tilewidth",0);
    int tileheight=element.getIntAttribute("tileheight",0);
    int spacing=element.getIntAttribute("spacing",0);
    int margin=element.getIntAttribute("margin",0);
    String source=element.getAttribute("source",null);
    int offsetX=0;
    int offsetY=0;
    String imageSource="";
    int imageWidth=0, imageHeight=0;
    FileHandle image=null;
    if (source != null) {
      FileHandle tsx=getRelativeFileHandle(tmxFile,source);
      try {
        element=xml.parse(tsx);
        name=element.get("name",null);
        tilewidth=element.getIntAttribute("tilewidth",0);
        tileheight=element.getIntAttribute("tileheight",0);
        spacing=element.getIntAttribute("spacing",0);
        margin=element.getIntAttribute("margin",0);
        Element offset=element.getChildByName("tileoffset");
        if (offset != null) {
          offsetX=offset.getIntAttribute("x",0);
          offsetY=offset.getIntAttribute("y",0);
        }
        imageSource=element.getChildByName("image").getAttribute("source");
        imageWidth=element.getChildByName("image").getIntAttribute("width",0);
        imageHeight=element.getChildByName("image").getIntAttribute("height",0);
        image=getRelativeFileHandle(tsx,imageSource);
      }
 catch (      IOException e) {
        throw new GdxRuntimeException("Error parsing external tileset.");
      }
    }
 else {
      Element offset=element.getChildByName("tileoffset");
      if (offset != null) {
        offsetX=offset.getIntAttribute("x",0);
        offsetY=offset.getIntAttribute("y",0);
      }
      imageSource=element.getChildByName("image").getAttribute("source");
      imageWidth=element.getChildByName("image").getIntAttribute("width",0);
      imageHeight=element.getChildByName("image").getIntAttribute("height",0);
      image=getRelativeFileHandle(tmxFile,imageSource);
    }
    TextureRegion texture=imageResolver.getImage(image.path());
    TiledMapTileSet tileset=new TiledMapTileSet();
    MapProperties props=tileset.getProperties();
    tileset.setName(name);
    props.put("firstgid",firstgid);
    props.put("imagesource",imageSource);
    props.put("imagewidth",imageWidth);
    props.put("imageheight",imageHeight);
    props.put("tilewidth",tilewidth);
    props.put("tileheight",tileheight);
    props.put("margin",margin);
    props.put("spacing",spacing);
    int stopWidth=texture.getRegionWidth() - tilewidth;
    int stopHeight=texture.getRegionHeight() - tileheight;
    int id=firstgid;
    for (int y=margin; y <= stopHeight; y+=tileheight + spacing) {
      for (int x=margin; x <= stopWidth; x+=tilewidth + spacing) {
        TextureRegion tileRegion=new TextureRegion(texture,x,y,tilewidth,tileheight);
        TiledMapTile tile=new StaticTiledMapTile(tileRegion);
        tile.setId(id);
        tile.setOffsetX(offsetX);
        tile.setOffsetY(-offsetY);
        tileset.putTile(id++,tile);
      }
    }
    Array<Element> tileElements=element.getChildrenByName("tile");
    Array<AnimatedTiledMapTile> animatedTiles=new Array<AnimatedTiledMapTile>();
    for (    Element tileElement : tileElements) {
      int localtid=tileElement.getIntAttribute("id",0);
      TiledMapTile tile=tileset.getTile(firstgid + localtid);
      if (tile != null) {
        Element animationElement=tileElement.getChildByName("animation");
        if (animationElement != null) {
          Array<StaticTiledMapTile> staticTiles=new Array<StaticTiledMapTile>();
          LongArray intervals=new LongArray();
          for (          Element frameElement : animationElement.getChildrenByName("frame")) {
            staticTiles.add((StaticTiledMapTile)tileset.getTile(firstgid + frameElement.getIntAttribute("tileid")));
            intervals.add(frameElement.getIntAttribute("duration"));
          }
          AnimatedTiledMapTile animatedTile=new AnimatedTiledMapTile(intervals,staticTiles);
          animatedTile.setId(tile.getId());
          animatedTiles.add(animatedTile);
          tile=animatedTile;
        }
        String terrain=tileElement.getAttribute("terrain",null);
        if (terrain != null) {
          tile.getProperties().put("terrain",terrain);
        }
        String probability=tileElement.getAttribute("probability",null);
        if (probability != null) {
          tile.getProperties().put("probability",probability);
        }
        Element properties=tileElement.getChildByName("properties");
        if (properties != null) {
          loadProperties(tile.getProperties(),properties);
        }
      }
    }
    for (    AnimatedTiledMapTile tile : animatedTiles) {
      tileset.putTile(tile.getId(),tile);
    }
    Element properties=element.getChildByName("properties");
    if (properties != null) {
      loadProperties(tileset.getProperties(),properties);
    }
    map.getTileSets().addTileSet(tileset);
  }
}
