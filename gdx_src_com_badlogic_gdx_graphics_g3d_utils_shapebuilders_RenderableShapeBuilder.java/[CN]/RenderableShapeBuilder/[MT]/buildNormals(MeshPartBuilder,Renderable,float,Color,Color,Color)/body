{
  Mesh mesh=renderable.meshPart.mesh;
  int positionOffset=-1;
  if (mesh.getVertexAttribute(Usage.Position) != null)   positionOffset=mesh.getVertexAttribute(Usage.Position).offset / FLOAT_BYTES;
  int normalOffset=-1;
  if (mesh.getVertexAttribute(Usage.Normal) != null)   normalOffset=mesh.getVertexAttribute(Usage.Normal).offset / FLOAT_BYTES;
  int tangentOffset=-1;
  if (mesh.getVertexAttribute(Usage.Tangent) != null)   tangentOffset=mesh.getVertexAttribute(Usage.Tangent).offset / FLOAT_BYTES;
  int binormalOffset=-1;
  if (mesh.getVertexAttribute(Usage.BiNormal) != null)   binormalOffset=mesh.getVertexAttribute(Usage.BiNormal).offset / FLOAT_BYTES;
  int attributesSize=mesh.getVertexSize() / FLOAT_BYTES;
  int verticesOffset=0;
  int verticesQuantity=0;
  if (mesh.getNumIndices() > 0) {
    ensureIndicesCapacity(mesh.getNumIndices());
    mesh.getIndices(renderable.meshPart.offset,renderable.meshPart.size,indices,0);
    short minVertice=minVerticeInIndices();
    short maxVertice=maxVerticeInIndices();
    verticesOffset=minVertice;
    verticesQuantity=maxVertice - minVertice;
  }
 else {
    verticesOffset=renderable.meshPart.offset;
    verticesQuantity=renderable.meshPart.size;
  }
  ensureVerticesCapacity(verticesQuantity * attributesSize);
  mesh.getVertices(verticesOffset * attributesSize,verticesQuantity * attributesSize,vertices,0);
  for (int i=verticesOffset; i < verticesQuantity; i++) {
    int id=i * attributesSize;
    tmpV0.set(vertices[id + positionOffset],vertices[id + positionOffset + 1],vertices[id + positionOffset + 2]);
    if (normalOffset != -1) {
      tmpV1.set(vertices[id + normalOffset],vertices[id + normalOffset + 1],vertices[id + normalOffset + 2]);
      tmpV2.set(tmpV0).add(tmpV1.scl(vectorSize));
    }
    if (tangentOffset != -1) {
      tmpV3.set(vertices[id + tangentOffset],vertices[id + tangentOffset + 1],vertices[id + tangentOffset + 2]);
      tmpV4.set(tmpV0).add(tmpV3.scl(vectorSize));
    }
    if (binormalOffset != -1) {
      tmpV5.set(vertices[id + binormalOffset],vertices[id + binormalOffset + 1],vertices[id + binormalOffset + 2]);
      tmpV6.set(tmpV0).add(tmpV5.scl(vectorSize));
    }
    tmpV0.mul(renderable.worldTransform);
    tmpV2.mul(renderable.worldTransform);
    tmpV4.mul(renderable.worldTransform);
    tmpV6.mul(renderable.worldTransform);
    if (normalOffset != -1) {
      builder.setColor(normalColor);
      builder.line(tmpV0,tmpV2);
    }
    if (tangentOffset != -1) {
      builder.setColor(tangentColor);
      builder.line(tmpV0,tmpV4);
    }
    if (binormalOffset != -1) {
      builder.setColor(binormalColor);
      builder.line(tmpV0,tmpV6);
    }
  }
}
