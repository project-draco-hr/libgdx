{
  final float hw=width * 0.5f;
  final float hh=height * 0.5f;
  final float hd=depth * 0.5f;
  final float auo=MathUtils.degreesToRadians * angleUFrom;
  final float stepU=(MathUtils.degreesToRadians * (angleUTo - angleUFrom)) / divisionsU;
  final float avo=MathUtils.degreesToRadians * angleVFrom;
  final float stepV=(MathUtils.degreesToRadians * (angleVTo - angleVFrom)) / divisionsV;
  final float us=1f / divisionsU;
  final float vs=1f / divisionsV;
  float u=0f;
  float v=0f;
  float angleU=0f;
  float angleV=0f;
  VertexInfo curr1=vertTmp3.set(null,null,null,null);
  curr1.hasUV=curr1.hasPosition=curr1.hasNormal=true;
  for (int iv=0; iv <= divisionsV; iv++) {
    angleV=avo + stepV * iv;
    v=vs * iv;
    final float t=MathUtils.sin(angleV);
    final float h=MathUtils.cos(angleV) * hh;
    for (int iu=0; iu <= divisionsU; iu++) {
      angleU=auo + stepU * iu;
      u=1f - us * iu;
      curr1.position.set(MathUtils.cos(angleU) * hw * t,h,MathUtils.sin(angleU) * hd * t).mul(transform);
      curr1.normal.set(curr1.position).nor();
      curr1.uv.set(u,v);
      vertex(curr1);
      if ((iv > 0) && (iu > 0))       rect((short)(vindex - 1),(short)(vindex - 2),(short)(vindex - (divisionsU + 3)),(short)(vindex - (divisionsU + 2)));
    }
  }
}
