{
  if (protocol == Protocol.TCP) {
    this.protocol=protocol;
    this.port=port;
    this.hints=hints;
    try {
      if (listeners.get(port) == null) {
        IPAddress ipAddress=null;
        String host=Dns.GetHostName();
        host=host + ".local";
        IPAddress[] ips=Dns.GetHostAddresses(host);
        for (int i=0; i < ips.length; i++) {
          IPAddress ip=ips[i];
          if (ip.get_AddressFamily().Value == AddressFamily.InterNetwork) {
            ipAddress=ip;
            break;
          }
        }
        Gdx.app.debug("IOSServerSocket","Binding server to " + ipAddress.ToString() + ":"+ port);
        TcpListener listener=new TcpListener(ipAddress,port);
        listeners.put(port,listener);
        if (hints != null) {
          listener.get_Server().set_ReceiveBufferSize(hints.receiveBufferSize);
        }
        if (hints != null) {
          listener.Start(hints.backlog);
        }
 else {
          listener.Start();
        }
        AsyncCallback clientCallback=new AsyncCallback(clientCallbackMethod);
        clientCallbacks.put(port,clientCallback);
        listener.BeginAcceptTcpClient(clientCallback,listener);
      }
    }
 catch (    Exception e) {
      throw new GdxRuntimeException("Cannot create a server socket at port " + port + ".",e);
    }
  }
 else {
    throw new GdxRuntimeException("Server socket protocol " + protocol + " is not supported under iOS backend.");
  }
}
