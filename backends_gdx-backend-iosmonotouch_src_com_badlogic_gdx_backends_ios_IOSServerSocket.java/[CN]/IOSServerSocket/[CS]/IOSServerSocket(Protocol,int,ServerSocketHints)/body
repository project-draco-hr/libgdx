{
  if (protocol == Protocol.TCP) {
    this.protocol=protocol;
    this.port=port;
    this.hints=hints;
    try {
      if (listeners.get(port) == null) {
        IPAddress ipAddress=null;
        NetworkInterface netInterfaces[]=NetworkInterface.GetAllNetworkInterfaces();
        for (int i=0; i < netInterfaces.length; i++) {
          NetworkInterface netInterface=netInterfaces[i];
          if (netInterface.get_NetworkInterfaceType().Value == NetworkInterfaceType.Wireless80211 || netInterface.get_NetworkInterfaceType().Value == NetworkInterfaceType.Ethernet) {
            for (int k=0; k < netInterface.GetIPProperties().get_UnicastAddresses().get_Count(); k++) {
              IPAddress address=netInterface.GetIPProperties().get_UnicastAddresses().get_Item(k).get_Address();
              if (address.get_AddressFamily().Value == AddressFamily.InterNetwork) {
                ipAddress=address;
              }
            }
          }
        }
        Gdx.app.debug("IOSServerSocket","Binding server to " + ipAddress.ToString() + ":"+ port);
        TcpListener listener=new TcpListener(ipAddress,port);
        listeners.put(port,listener);
        if (hints != null) {
          listener.get_Server().set_ReceiveBufferSize(hints.receiveBufferSize);
        }
        if (hints != null) {
          listener.Start(hints.backlog);
        }
 else {
          listener.Start();
        }
        AsyncCallback clientCallback=new AsyncCallback(new AsyncCallback.Method(){
          @Override public void Invoke(          IAsyncResult ar){
            TcpListener listener=(TcpListener)ar.get_AsyncState();
            clients.put(port,listener.EndAcceptTcpClient(ar));
            Gdx.app.debug("IOSServerSocket","Client connected");
          }
        }
);
        clientCallbacks.put(port,clientCallback);
        listener.BeginAcceptTcpClient(clientCallback,listener);
      }
    }
 catch (    Exception e) {
      throw new GdxRuntimeException("Cannot create a server socket at port " + port + ".",e);
    }
  }
 else {
    throw new GdxRuntimeException("Server socket protocol " + protocol + " is not supported under iOS backend.");
  }
}
