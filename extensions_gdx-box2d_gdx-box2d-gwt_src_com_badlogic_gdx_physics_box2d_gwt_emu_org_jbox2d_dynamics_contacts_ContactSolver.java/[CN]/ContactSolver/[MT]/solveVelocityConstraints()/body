{
  for (int i=0; i < m_count; ++i) {
    final ContactVelocityConstraint vc=m_velocityConstraints[i];
    int indexA=vc.indexA;
    int indexB=vc.indexB;
    float mA=vc.invMassA;
    float mB=vc.invMassB;
    float iA=vc.invIA;
    float iB=vc.invIB;
    int pointCount=vc.pointCount;
    Vec2 vA=m_velocities[indexA].v;
    float wA=m_velocities[indexA].w;
    Vec2 vB=m_velocities[indexB].v;
    float wB=m_velocities[indexB].w;
    Vec2 normal=vc.normal;
    final float normalx=normal.x;
    final float normaly=normal.y;
    float tangentx=1.0f * vc.normal.y;
    float tangenty=-1.0f * vc.normal.x;
    final float friction=vc.friction;
    assert(pointCount == 1 || pointCount == 2);
    for (int j=0; j < pointCount; ++j) {
      final VelocityConstraintPoint vcp=vc.points[j];
      final Vec2 a=vcp.rA;
      float dvx=-wB * vcp.rB.y + vB.x - vA.x + wA * a.y;
      float dvy=wB * vcp.rB.x + vB.y - vA.y - wA * a.x;
      final float vt=dvx * tangentx + dvy * tangenty - vc.tangentSpeed;
      float lambda=vcp.tangentMass * (-vt);
      final float maxFriction=friction * vcp.normalImpulse;
      final float newImpulse=MathUtils.clamp(vcp.tangentImpulse + lambda,-maxFriction,maxFriction);
      lambda=newImpulse - vcp.tangentImpulse;
      vcp.tangentImpulse=newImpulse;
      final float Px=tangentx * lambda;
      final float Py=tangenty * lambda;
      vA.x-=Px * mA;
      vA.y-=Py * mA;
      wA-=iA * (vcp.rA.x * Py - vcp.rA.y * Px);
      vB.x+=Px * mB;
      vB.y+=Py * mB;
      wB+=iB * (vcp.rB.x * Py - vcp.rB.y * Px);
    }
    if (vc.pointCount == 1) {
      final VelocityConstraintPoint vcp=vc.points[0];
      float dvx=-wB * vcp.rB.y + vB.x - vA.x + wA * vcp.rA.y;
      float dvy=wB * vcp.rB.x + vB.y - vA.y - wA * vcp.rA.x;
      final float vn=dvx * normalx + dvy * normaly;
      float lambda=-vcp.normalMass * (vn - vcp.velocityBias);
      float a=vcp.normalImpulse + lambda;
      final float newImpulse=(a > 0.0f ? a : 0.0f);
      lambda=newImpulse - vcp.normalImpulse;
      vcp.normalImpulse=newImpulse;
      float Px=normalx * lambda;
      float Py=normaly * lambda;
      vA.x-=Px * mA;
      vA.y-=Py * mA;
      wA-=iA * (vcp.rA.x * Py - vcp.rA.y * Px);
      vB.x+=Px * mB;
      vB.y+=Py * mB;
      wB+=iB * (vcp.rB.x * Py - vcp.rB.y * Px);
    }
 else {
      final VelocityConstraintPoint cp1=vc.points[0];
      final VelocityConstraintPoint cp2=vc.points[1];
      final Vec2 cp1rA=cp1.rA;
      final Vec2 cp1rB=cp1.rB;
      final Vec2 cp2rA=cp2.rA;
      final Vec2 cp2rB=cp2.rB;
      float ax=cp1.normalImpulse;
      float ay=cp2.normalImpulse;
      assert(ax >= 0.0f && ay >= 0.0f);
      float dv1x=-wB * cp1rB.y + vB.x - vA.x + wA * cp1rA.y;
      float dv1y=wB * cp1rB.x + vB.y - vA.y - wA * cp1rA.x;
      float dv2x=-wB * cp2rB.y + vB.x - vA.x + wA * cp2rA.y;
      float dv2y=wB * cp2rB.x + vB.y - vA.y - wA * cp2rA.x;
      float vn1=dv1x * normalx + dv1y * normaly;
      float vn2=dv2x * normalx + dv2y * normaly;
      float bx=vn1 - cp1.velocityBias;
      float by=vn2 - cp2.velocityBias;
      Mat22 R=vc.K;
      bx-=R.ex.x * ax + R.ey.x * ay;
      by-=R.ex.y * ax + R.ey.y * ay;
      for (; ; ) {
        Mat22 R1=vc.normalMass;
        float xx=R1.ex.x * bx + R1.ey.x * by;
        float xy=R1.ex.y * bx + R1.ey.y * by;
        xx*=-1;
        xy*=-1;
        if (xx >= 0.0f && xy >= 0.0f) {
          float dx=xx - ax;
          float dy=xy - ay;
          float P1x=dx * normalx;
          float P1y=dx * normaly;
          float P2x=dy * normalx;
          float P2y=dy * normaly;
          vA.x-=mA * (P1x + P2x);
          vA.y-=mA * (P1y + P2y);
          vB.x+=mB * (P1x + P2x);
          vB.y+=mB * (P1y + P2y);
          wA-=iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x));
          wB+=iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x));
          cp1.normalImpulse=xx;
          cp2.normalImpulse=xy;
          if (DEBUG_SOLVER) {
            Vec2 dv1=vB.add(Vec2.cross(wB,cp1rB).subLocal(vA).subLocal(Vec2.cross(wA,cp1rA)));
            Vec2 dv2=vB.add(Vec2.cross(wB,cp2rB).subLocal(vA).subLocal(Vec2.cross(wA,cp2rA)));
            vn1=Vec2.dot(dv1,normal);
            vn2=Vec2.dot(dv2,normal);
            assert(MathUtils.abs(vn1 - cp1.velocityBias) < k_errorTol);
            assert(MathUtils.abs(vn2 - cp2.velocityBias) < k_errorTol);
          }
          break;
        }
        xx=-cp1.normalMass * bx;
        xy=0.0f;
        vn1=0.0f;
        vn2=vc.K.ex.y * xx + by;
        if (xx >= 0.0f && vn2 >= 0.0f) {
          float dx=xx - ax;
          float dy=xy - ay;
          float P1x=normalx * dx;
          float P1y=normaly * dx;
          float P2x=normalx * dy;
          float P2y=normaly * dy;
          vA.x-=mA * (P1x + P2x);
          vA.y-=mA * (P1y + P2y);
          vB.x+=mB * (P1x + P2x);
          vB.y+=mB * (P1y + P2y);
          wA-=iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x));
          wB+=iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x));
          cp1.normalImpulse=xx;
          cp2.normalImpulse=xy;
          if (DEBUG_SOLVER) {
            Vec2 dv1=vB.add(Vec2.cross(wB,cp1rB).subLocal(vA).subLocal(Vec2.cross(wA,cp1rA)));
            vn1=Vec2.dot(dv1,normal);
            assert(MathUtils.abs(vn1 - cp1.velocityBias) < k_errorTol);
          }
          break;
        }
        xx=0.0f;
        xy=-cp2.normalMass * by;
        vn1=vc.K.ey.x * xy + bx;
        vn2=0.0f;
        if (xy >= 0.0f && vn1 >= 0.0f) {
          float dx=xx - ax;
          float dy=xy - ay;
          float P1x=normalx * dx;
          float P1y=normaly * dx;
          float P2x=normalx * dy;
          float P2y=normaly * dy;
          vA.x-=mA * (P1x + P2x);
          vA.y-=mA * (P1y + P2y);
          vB.x+=mB * (P1x + P2x);
          vB.y+=mB * (P1y + P2y);
          wA-=iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x));
          wB+=iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x));
          cp1.normalImpulse=xx;
          cp2.normalImpulse=xy;
          if (DEBUG_SOLVER) {
            Vec2 dv2=vB.add(Vec2.cross(wB,cp2rB).subLocal(vA).subLocal(Vec2.cross(wA,cp2rA)));
            vn2=Vec2.dot(dv2,normal);
            assert(MathUtils.abs(vn2 - cp2.velocityBias) < k_errorTol);
          }
          break;
        }
        xx=0.0f;
        xy=0.0f;
        vn1=bx;
        vn2=by;
        if (vn1 >= 0.0f && vn2 >= 0.0f) {
          float dx=xx - ax;
          float dy=xy - ay;
          float P1x=normalx * dx;
          float P1y=normaly * dx;
          float P2x=normalx * dy;
          float P2y=normaly * dy;
          vA.x-=mA * (P1x + P2x);
          vA.y-=mA * (P1y + P2y);
          vB.x+=mB * (P1x + P2x);
          vB.y+=mB * (P1y + P2y);
          wA-=iA * (cp1rA.x * P1y - cp1rA.y * P1x + (cp2rA.x * P2y - cp2rA.y * P2x));
          wB+=iB * (cp1rB.x * P1y - cp1rB.y * P1x + (cp2rB.x * P2y - cp2rB.y * P2x));
          cp1.normalImpulse=xx;
          cp2.normalImpulse=xy;
          break;
        }
        break;
      }
    }
    m_velocities[indexA].w=wA;
    m_velocities[indexB].w=wB;
  }
}
