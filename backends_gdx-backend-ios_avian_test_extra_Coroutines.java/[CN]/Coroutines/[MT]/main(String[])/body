{
  final CoroutineState<Character> state=new CoroutineState<Character>();
  final Consumer<Character> consumer=new Consumer<Character>(){
    public void consume(    final Character c) throws Exception {
      callWithCurrentContinuation(new CallbackReceiver(){
        public Object receive(        Callback continuation){
          state.produceNext=continuation;
          state.consumeNext.handleResult(c);
          throw new AssertionError();
        }
      }
);
    }
  }
;
  final Producer<Character> producer=new Producer<Character>(){
    final CallbackReceiver<Character> receiver=new CallbackReceiver<Character>(){
      public Character receive(      Callback<Character> continuation) throws Exception {
        state.consumeNext=continuation;
        if (state.produceNext == null) {
          Coroutines.produce(consumer);
        }
 else {
          state.produceNext.handleResult(null);
        }
        throw new AssertionError();
      }
    }
;
    public Character produce() throws Exception {
      return callWithCurrentContinuation(receiver);
    }
  }
;
  consume(producer);
}
