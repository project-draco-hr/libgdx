{
  boolean escaped=false;
  int c;
  while ((c=readCharacter()) != -1) {
    if (c == '\\') {
      if (escaped) {
        escaped=false;
        append(c);
      }
 else {
        escaped=true;
      }
    }
 else {
switch (c) {
case '#':
case '!':
        if (key == null) {
          while ((c=readCharacter()) != -1 && c != '\n')           ;
        }
 else {
          append(c);
        }
      break;
case ' ':
case '\r':
case '\t':
    if (escaped || (current != null && value == current)) {
      append(c);
    }
 else     if (key == current) {
      current=null;
    }
  break;
case ':':
case '=':
if (escaped || (current != null && value == current)) {
  append(c);
}
 else {
  if (key == null) {
    key=new StringBuilder();
  }
  current=null;
}
break;
case '\n':
if (escaped) {
append(c);
}
 else {
finishLine(map);
}
break;
case 'n':
if (escaped) {
append('\n');
}
 else {
append(c);
}
break;
case 'u':
if (escaped) {
append(readUtf16());
}
 else {
append(c);
}
break;
default :
append(c);
break;
}
escaped=false;
}
}
finishLine(map);
}
