{
  SubMesh subMesh=new SubMesh();
  KeyframedAnimation animation=new KeyframedAnimation();
  animation.duration=frames.size * 0.2f;
  animation.keyframes=new Keyframe[frames.size];
  for (int i=0; i < frames.size; i++) {
    MD2Frame frame=frames.get(i);
    final float[] frameVertices=frame.vertices;
    Keyframe keyFrame=new Keyframe();
    keyFrame.timeStamp=0;
    keyFrame.vertices=new float[header.numTris * 15];
    for (int j=0, idx=0, idx2=0; j < header.numTris; j++) {
      int v1=triangles[idx2++] * 3;
      int v2=triangles[idx2++] * 3;
      int v3=triangles[idx2++] * 3;
      int t1=triangles[idx2++] * 2;
      int t2=triangles[idx2++] * 2;
      int t3=triangles[idx2++] * 2;
      keyFrame.vertices[idx++]=frameVertices[v1];
      keyFrame.vertices[idx++]=frameVertices[v1 + 1];
      keyFrame.vertices[idx++]=frameVertices[v1 + 2];
      keyFrame.vertices[idx++]=texCoords[t1];
      keyFrame.vertices[idx++]=texCoords[t1 + 1];
      keyFrame.vertices[idx++]=frameVertices[v2];
      keyFrame.vertices[idx++]=frameVertices[v2 + 1];
      keyFrame.vertices[idx++]=frameVertices[v2 + 2];
      keyFrame.vertices[idx++]=texCoords[t2];
      keyFrame.vertices[idx++]=texCoords[t2 + 1];
      keyFrame.vertices[idx++]=frameVertices[v3];
      keyFrame.vertices[idx++]=frameVertices[v3 + 1];
      keyFrame.vertices[idx++]=frameVertices[v3 + 2];
      keyFrame.vertices[idx++]=texCoords[t3];
      keyFrame.vertices[idx++]=texCoords[t3 + 1];
      animation.keyframes[i]=keyFrame;
    }
  }
  subMesh.mesh=new Mesh(false,header.numTris * 3,0,new VertexAttribute(Usage.Position,3,"a_pos"),new VertexAttribute(Usage.TextureCoordinates,2,"a_tex0"));
  subMesh.animations.put("all",animation);
  KeyframedModel model=new KeyframedModel();
  model.subMeshes=new SubMesh[]{subMesh};
  return model;
}
