{
  Table table=getTable();
  float width=table.getWidth();
  float height=table.getHeight();
  super.layout(0,0,width,height);
  java.util.List<Cell> cells=getCells();
  if (round) {
    for (int i=0, n=cells.size(); i < n; i++) {
      Cell c=cells.get(i);
      if (c.getIgnore())       continue;
      float widgetWidth=Math.round(c.getWidgetWidth());
      float widgetHeight=Math.round(c.getWidgetHeight());
      float widgetX=Math.round(c.getWidgetX());
      float widgetY=height - Math.round(c.getWidgetY()) - widgetHeight;
      c.setWidgetX(widgetX);
      c.setWidgetY(widgetY);
      c.setWidgetWidth(widgetWidth);
      c.setWidgetHeight(widgetHeight);
      Actor actor=(Actor)c.getWidget();
      if (actor != null) {
        actor.setX(widgetX);
        actor.setY(widgetY);
        if (actor.getWidth() != widgetWidth || actor.getHeight() != widgetHeight) {
          actor.setWidth(widgetWidth);
          actor.setHeight(widgetHeight);
          if (actor instanceof Layout) {
            Layout layout=(Layout)actor;
            layout.invalidate();
            layout.validate();
          }
        }
      }
    }
  }
 else {
    for (int i=0, n=cells.size(); i < n; i++) {
      Cell c=cells.get(i);
      if (c.getIgnore())       continue;
      float widgetWidth=c.getWidgetWidth();
      float widgetHeight=c.getWidgetHeight();
      float widgetX=c.getWidgetX();
      float widgetY=height - c.getWidgetY() - widgetHeight;
      c.setWidgetX(widgetX);
      c.setWidgetY(widgetY);
      c.setWidgetWidth(widgetWidth);
      c.setWidgetHeight(widgetHeight);
      Actor actor=(Actor)c.getWidget();
      if (actor != null) {
        actor.setX(widgetX);
        actor.setY(widgetY);
        if (actor.getWidth() != widgetWidth || actor.getHeight() != widgetHeight) {
          actor.setWidth(widgetWidth);
          actor.setHeight(widgetHeight);
          if (actor instanceof Layout) {
            Layout layout=(Layout)actor;
            layout.invalidate();
            layout.validate();
          }
        }
      }
    }
  }
}
