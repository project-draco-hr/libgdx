{
  this.tiles=tiles;
  this.chunks=new VoxelChunk[chunksX * chunksY * chunksZ];
  this.chunksX=chunksX;
  this.chunksY=chunksY;
  this.chunksZ=chunksZ;
  this.numChunks=chunksX * chunksY * chunksZ;
  this.voxelsX=chunksX * CHUNK_SIZE_X;
  this.voxelsY=chunksY * CHUNK_SIZE_Y;
  this.voxelsZ=chunksZ * CHUNK_SIZE_Z;
  int i=0;
  for (int y=0; y < chunksY; y++) {
    for (int z=0; z < chunksZ; z++) {
      for (int x=0; x < chunksX; x++) {
        VoxelChunk chunk=new VoxelChunk(CHUNK_SIZE_X,CHUNK_SIZE_Y,CHUNK_SIZE_Z);
        chunk.offset.set(x * CHUNK_SIZE_X,y * CHUNK_SIZE_Y,z * CHUNK_SIZE_Z);
        chunks[i++]=chunk;
      }
    }
  }
  int len=CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z* 6* 6 / 3;
  short[] indices=new short[len];
  short j=0;
  for (i=0; i < len; i+=6, j+=4) {
    indices[i + 0]=(short)(j + 0);
    indices[i + 1]=(short)(j + 1);
    indices[i + 2]=(short)(j + 2);
    indices[i + 3]=(short)(j + 2);
    indices[i + 4]=(short)(j + 3);
    indices[i + 5]=(short)(j + 0);
  }
  this.meshes=new Mesh[chunksX * chunksY * chunksZ];
  for (i=0; i < meshes.length; i++) {
    meshes[i]=new Mesh(true,CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z* 6* 4,CHUNK_SIZE_X * CHUNK_SIZE_Y * CHUNK_SIZE_Z* 36 / 3,VertexAttribute.Position(),VertexAttribute.Normal());
    meshes[i].setIndices(indices);
  }
  this.dirty=new boolean[chunksX * chunksY * chunksZ];
  for (i=0; i < dirty.length; i++)   dirty[i]=true;
  this.numVertices=new int[chunksX * chunksY * chunksZ];
  for (i=0; i < numVertices.length; i++)   numVertices[i]=0;
  this.vertices=new float[VoxelChunk.VERTEX_SIZE * 6 * CHUNK_SIZE_X* CHUNK_SIZE_Y* CHUNK_SIZE_Z];
  this.materials=new Material[chunksX * chunksY * chunksZ];
  for (i=0; i < materials.length; i++) {
    materials[i]=new Material(new ColorAttribute(ColorAttribute.Diffuse,MathUtils.random(0.5f,1f),MathUtils.random(0.5f,1f),MathUtils.random(0.5f,1f),1));
  }
}
