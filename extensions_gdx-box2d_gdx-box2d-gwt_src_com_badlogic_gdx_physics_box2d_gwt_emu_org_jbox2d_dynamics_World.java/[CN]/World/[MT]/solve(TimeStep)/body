{
  m_profile.solveInit.startAccum();
  m_profile.solveVelocity.startAccum();
  m_profile.solvePosition.startAccum();
  for (Body b=m_bodyList; b != null; b=b.m_next) {
    b.m_xf0.set(b.m_xf);
  }
  island.init(m_bodyCount,m_contactManager.m_contactCount,m_jointCount,m_contactManager.m_contactListener);
  for (Body b=m_bodyList; b != null; b=b.m_next) {
    b.m_flags&=~Body.e_islandFlag;
  }
  for (Contact c=m_contactManager.m_contactList; c != null; c=c.m_next) {
    c.m_flags&=~Contact.ISLAND_FLAG;
  }
  for (Joint j=m_jointList; j != null; j=j.m_next) {
    j.m_islandFlag=false;
  }
  int stackSize=m_bodyCount;
  if (stack.length < stackSize) {
    stack=new Body[stackSize];
  }
  for (Body seed=m_bodyList; seed != null; seed=seed.m_next) {
    if ((seed.m_flags & Body.e_islandFlag) == Body.e_islandFlag) {
      continue;
    }
    if (seed.isAwake() == false || seed.isActive() == false) {
      continue;
    }
    if (seed.getType() == BodyType.STATIC) {
      continue;
    }
    island.clear();
    int stackCount=0;
    stack[stackCount++]=seed;
    seed.m_flags|=Body.e_islandFlag;
    while (stackCount > 0) {
      Body b=stack[--stackCount];
      assert(b.isActive() == true);
      island.add(b);
      b.setAwake(true);
      if (b.getType() == BodyType.STATIC) {
        continue;
      }
      for (ContactEdge ce=b.m_contactList; ce != null; ce=ce.next) {
        Contact contact=ce.contact;
        if ((contact.m_flags & Contact.ISLAND_FLAG) == Contact.ISLAND_FLAG) {
          continue;
        }
        if (contact.isEnabled() == false || contact.isTouching() == false) {
          continue;
        }
        boolean sensorA=contact.m_fixtureA.m_isSensor;
        boolean sensorB=contact.m_fixtureB.m_isSensor;
        if (sensorA || sensorB) {
          continue;
        }
        island.add(contact);
        contact.m_flags|=Contact.ISLAND_FLAG;
        Body other=ce.other;
        if ((other.m_flags & Body.e_islandFlag) == Body.e_islandFlag) {
          continue;
        }
        assert(stackCount < stackSize);
        stack[stackCount++]=other;
        other.m_flags|=Body.e_islandFlag;
      }
      for (JointEdge je=b.m_jointList; je != null; je=je.next) {
        if (je.joint.m_islandFlag == true) {
          continue;
        }
        Body other=je.other;
        if (other.isActive() == false) {
          continue;
        }
        island.add(je.joint);
        je.joint.m_islandFlag=true;
        if ((other.m_flags & Body.e_islandFlag) == Body.e_islandFlag) {
          continue;
        }
        assert(stackCount < stackSize);
        stack[stackCount++]=other;
        other.m_flags|=Body.e_islandFlag;
      }
    }
    island.solve(m_profile,step,m_gravity,m_allowSleep);
    for (int i=0; i < island.m_bodyCount; ++i) {
      Body b=island.m_bodies[i];
      if (b.getType() == BodyType.STATIC) {
        b.m_flags&=~Body.e_islandFlag;
      }
    }
  }
  m_profile.solveInit.endAccum();
  m_profile.solveVelocity.endAccum();
  m_profile.solvePosition.endAccum();
  broadphaseTimer.reset();
  for (Body b=m_bodyList; b != null; b=b.getNext()) {
    if ((b.m_flags & Body.e_islandFlag) == 0) {
      continue;
    }
    if (b.getType() == BodyType.STATIC) {
      continue;
    }
    b.synchronizeFixtures();
  }
  m_contactManager.findNewContacts();
  m_profile.broadphase.record(broadphaseTimer.getMilliseconds());
}
