{
  for (int i=0, l=ParticleChannels.LifePercentOffset, s=0, a=0, c=controller.particles.size * rotationalForceChannel.strideSize; i < c; s+=strengthChannel.strideSize, i+=rotationalForceChannel.strideSize, a+=angularChannel.strideSize, l+=lifeChannel.strideSize) {
    float lifePercent=lifeChannel.data[l], strength=strengthChannel.data[s + ParticleChannels.VelocityStrengthStartOffset] + strengthChannel.data[s + ParticleChannels.VelocityStrengthDiffOffset] * strengthValue.getScale(lifePercent), phi=angularChannel.data[a + ParticleChannels.VelocityPhiStartOffset] + angularChannel.data[a + ParticleChannels.VelocityPhiDiffOffset] * phiValue.getScale(lifePercent), theta=angularChannel.data[a + ParticleChannels.VelocityThetaStartOffset] + angularChannel.data[a + ParticleChannels.VelocityThetaDiffOffset] * thetaValue.getScale(lifePercent);
    float cosTheta=MathUtils.cosDeg(theta), sinTheta=MathUtils.sinDeg(theta), cosPhi=MathUtils.cosDeg(phi), sinPhi=MathUtils.sinDeg(phi);
    TMP_V3.set(cosTheta * sinPhi,cosPhi,sinTheta * sinPhi);
    TMP_V3.scl(strength * MathUtils.degreesToRadians);
    rotationalForceChannel.data[i + ParticleChannels.XOffset]+=TMP_V3.x;
    rotationalForceChannel.data[i + ParticleChannels.YOffset]+=TMP_V3.y;
    rotationalForceChannel.data[i + ParticleChannels.ZOffset]+=TMP_V3.z;
  }
}
