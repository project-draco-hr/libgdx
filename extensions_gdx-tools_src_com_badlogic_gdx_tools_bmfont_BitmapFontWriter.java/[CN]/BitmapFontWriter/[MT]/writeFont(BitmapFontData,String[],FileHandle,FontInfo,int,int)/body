{
  if (info == null) {
    info=new FontInfo();
    info.face=outFntFile.nameWithoutExtension();
  }
  int lineHeight=(int)fontData.lineHeight;
  int pages=pageRefs.length;
  int packed=0;
  int base=(int)((fontData.capHeight) + (fontData.flipped ? -fontData.ascent : fontData.ascent));
  OutputFormat fmt=BitmapFontWriter.getOutputFormat();
  boolean xml=fmt == OutputFormat.XML;
  StringBuilder buf=new StringBuilder();
  if (xml) {
    buf.append("<font>\n");
  }
  String xmlOpen=xml ? "\t<" : "";
  String xmlCloseSelf=xml ? "/>" : "";
  String xmlTab=xml ? "\t" : "";
  String xmlClose=xml ? ">" : "";
  String xmlQuote=xml ? "\"" : "";
  String alphaChnlParams=xml ? " alphaChnl=\"0\" redChnl=\"0\" greenChnl=\"0\" blueChnl=\"0\"" : " alphaChnl=0 redChnl=0 greenChnl=0 blueChnl=0";
  buf.append(xmlOpen).append("info face=\"").append(info.face == null ? "" : info.face.replaceAll("\"","'")).append("\" size=").append(quote(info.size)).append(" bold=").append(quote(info.bold ? 1 : 0)).append(" italic=").append(quote(info.italic ? 1 : 0)).append(" charset=\"").append(info.charset == null ? "" : info.charset).append("\" unicode=").append(quote(info.unicode ? 1 : 0)).append(" stretchH=").append(quote(info.stretchH)).append(" smooth=").append(quote(info.smooth ? 1 : 0)).append(" aa=").append(quote(info.aa)).append(" padding=").append(xmlQuote).append(info.padding.up).append(",").append(info.padding.down).append(",").append(info.padding.left).append(",").append(info.padding.right).append(xmlQuote).append(" spacing=").append(xmlQuote).append(info.spacing.horizontal).append(",").append(info.spacing.vertical).append(xmlQuote).append(xmlCloseSelf).append("\n");
  buf.append(xmlOpen).append("common lineHeight=").append(quote(lineHeight)).append(" base=").append(quote(base)).append(" scaleW=").append(quote(scaleW)).append(" scaleH=").append(quote(scaleH)).append(" pages=").append(quote(pages)).append(" packed=").append(quote(packed)).append(alphaChnlParams).append(xmlCloseSelf).append("\n");
  if (xml)   buf.append("\t<pages>\n");
  for (int i=0; i < pageRefs.length; i++) {
    buf.append(xmlTab).append(xmlOpen).append("page id=").append(quote(i)).append(" file=\"").append(pageRefs[i]).append("\"").append(xmlCloseSelf).append("\n");
  }
  if (xml)   buf.append("\t</pages>\n");
  Array<Glyph> glyphs=new Array<Glyph>(256);
  for (int i=0; i < fontData.glyphs.length; i++) {
    if (fontData.glyphs[i] == null)     continue;
    for (int j=0; j < fontData.glyphs[i].length; j++) {
      if (fontData.glyphs[i][j] != null) {
        glyphs.add(fontData.glyphs[i][j]);
      }
    }
  }
  buf.append(xmlOpen).append("chars count=").append(quote(glyphs.size)).append(xmlClose).append("\n");
  int padLeft=0, padRight=0, padTop=0, padX=0, padY=0;
  if (info != null) {
    padTop=info.padding.up;
    padLeft=info.padding.left;
    padRight=info.padding.right;
    padX=padLeft + padRight;
    padY=info.padding.up + info.padding.down;
  }
  for (int i=0; i < glyphs.size; i++) {
    Glyph g=glyphs.get(i);
    boolean empty=g.width == 0 || g.height == 0;
    buf.append(xmlTab).append(xmlOpen).append("char id=").append(quote(String.format("%-6s",g.id),true)).append("x=").append(quote(String.format("%-5s",empty ? 0 : g.srcX - padLeft),true)).append("y=").append(quote(String.format("%-5s",empty ? 0 : g.srcY - padRight),true)).append("width=").append(quote(String.format("%-5s",empty ? 0 : g.width + padX),true)).append("height=").append(quote(String.format("%-5s",empty ? 0 : g.height + padY),true)).append("xoffset=").append(quote(String.format("%-5s",g.xoffset - padLeft),true)).append("yoffset=").append(quote(String.format("%-5s",fontData.flipped ? g.yoffset + padTop : -(g.height + (g.yoffset + padTop))),true)).append("xadvance=").append(quote(String.format("%-5s",g.xadvance),true)).append("page=").append(quote(String.format("%-5s",g.page),true)).append("chnl=").append(quote(0,true)).append(xmlCloseSelf).append("\n");
  }
  if (xml)   buf.append("\t</chars>\n");
  int kernCount=0;
  StringBuilder kernBuf=new StringBuilder();
  for (int i=0; i < glyphs.size; i++) {
    for (int j=0; j < glyphs.size; j++) {
      Glyph first=glyphs.get(i);
      Glyph second=glyphs.get(j);
      int kern=first.getKerning((char)second.id);
      if (kern != 0) {
        kernCount++;
        kernBuf.append(xmlTab).append(xmlOpen).append("kerning first=").append(quote(first.id)).append(" second=").append(quote(second.id)).append(" amount=").append(quote(kern,true)).append(xmlCloseSelf).append("\n");
      }
    }
  }
  buf.append(xmlOpen).append("kernings count=").append(quote(kernCount)).append(xmlClose).append("\n");
  buf.append(kernBuf);
  if (xml) {
    buf.append("\t</kernings>\n");
    buf.append("</font>");
  }
  String charset=info.charset;
  if (charset != null && charset.length() == 0)   charset=null;
  outFntFile.writeString(buf.toString(),false,charset);
}
