{
  if (filename == null && wildcardMatcher == null) {
    return true;
  }
  if (filename == null || wildcardMatcher == null) {
    return false;
  }
  if (caseSensitivity == null) {
    caseSensitivity=IOCase.SENSITIVE;
  }
  String[] wcs=splitOnTokens(wildcardMatcher);
  boolean anyChars=false;
  int textIdx=0;
  int wcsIdx=0;
  Stack<int[]> backtrack=new Stack<int[]>();
  do {
    if (backtrack.size() > 0) {
      int[] array=backtrack.pop();
      wcsIdx=array[0];
      textIdx=array[1];
      anyChars=true;
    }
    while (wcsIdx < wcs.length) {
      if (wcs[wcsIdx].equals("?")) {
        textIdx++;
        if (textIdx > filename.length()) {
          break;
        }
        anyChars=false;
      }
 else       if (wcs[wcsIdx].equals("*")) {
        anyChars=true;
        if (wcsIdx == wcs.length - 1) {
          textIdx=filename.length();
        }
      }
 else {
        if (anyChars) {
          textIdx=caseSensitivity.checkIndexOf(filename,textIdx,wcs[wcsIdx]);
          if (textIdx == -1) {
            break;
          }
          int repeat=caseSensitivity.checkIndexOf(filename,textIdx + 1,wcs[wcsIdx]);
          if (repeat >= 0) {
            backtrack.push(new int[]{wcsIdx,repeat});
          }
        }
 else {
          if (!caseSensitivity.checkRegionMatches(filename,textIdx,wcs[wcsIdx])) {
            break;
          }
        }
        textIdx+=wcs[wcsIdx].length();
        anyChars=false;
      }
      wcsIdx++;
    }
    if (wcsIdx == wcs.length && textIdx == filename.length()) {
      return true;
    }
  }
 while (backtrack.size() > 0);
  return false;
}
