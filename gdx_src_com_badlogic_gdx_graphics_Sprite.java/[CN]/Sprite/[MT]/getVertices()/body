{
  if (dirty) {
    dirty=false;
    float[] vertices=this.vertices;
    float localX=-originX;
    float localY=-originY;
    float localX2=localX + width;
    float localY2=localY + height;
    float worldOriginX=this.x - localX;
    float worldOriginY=this.y - localY;
    if (scaleX != 1 || scaleY != 1) {
      localX*=scaleX;
      localY*=scaleY;
      localX2*=scaleX;
      localY2*=scaleY;
    }
    if (rotation != 0) {
      float cos=MathUtils.cosDeg(rotation);
      float sin=MathUtils.sinDeg(rotation);
      float x1=localX * cos - localY * sin + worldOriginX;
      float y1=localY * cos + localX * sin + worldOriginY;
      vertices[X1]=x1;
      vertices[Y1]=y1;
      float x2=localX * cos - localY2 * sin + worldOriginX;
      float y2=localY2 * cos + localX * sin + worldOriginY;
      vertices[X2]=x2;
      vertices[Y2]=y2;
      float x3=localX2 * cos - localY2 * sin + worldOriginX;
      float y3=localY2 * cos + localX2 * sin + worldOriginY;
      vertices[X3]=x3;
      vertices[Y3]=y3;
      vertices[X4]=x1 + (x3 - x2);
      vertices[Y4]=y3 - (y2 - y1);
    }
 else {
      float x1=localX + worldOriginX;
      float y1=localY + worldOriginY;
      float x2=localX2 + worldOriginX;
      float y2=localY2 + worldOriginY;
      vertices[X1]=x1;
      vertices[Y1]=y1;
      vertices[X2]=x1;
      vertices[Y2]=y2;
      vertices[X3]=x2;
      vertices[Y3]=y2;
      vertices[X4]=x2;
      vertices[Y4]=y1;
    }
  }
  return vertices;
}
