{
  Locale targetLocale=candidateLocales.get(candidateIndex);
  ResourceBundle parent=null;
  if (candidateIndex != candidateLocales.size() - 1) {
    parent=findBundle(bundleKey,candidateLocales,formats,candidateIndex + 1,control,baseBundle);
  }
 else   if (baseBundle != null && targetLocale.equals(Locale.ROOT)) {
    return baseBundle;
  }
  Object ref;
  while ((ref=referenceQueue.poll()) != null) {
    cache.remove(((BundleReference)ref).getBundleKey());
  }
  boolean expiredBundle=false;
  bundleKey.setLocale(targetLocale);
  ResourceBundle bundle=findBundleInCache(bundleKey,control);
  if (isValidBundle(bundle)) {
    expiredBundle=bundle.expired;
    if (!expiredBundle) {
      if (bundle.parent == parent) {
        return bundle;
      }
      BundleReference bundleRef=cache.get(bundleKey);
      if (bundleRef != null && bundleRef.get() == bundle) {
        cache.remove(bundleKey,bundleRef);
      }
    }
  }
  if (bundle != MISSING_BUNDLE) {
    BundleKey constKey=new BundleKey(bundleKey);
    try {
      bundle=loadBundle(bundleKey,formats,control,expiredBundle);
      if (bundle != null) {
        if (bundle.parent == null) {
          bundle.setParent(parent);
        }
        bundle.locale=targetLocale;
        bundle=putBundleInCache(bundleKey,bundle,control);
        return bundle;
      }
      putBundleInCache(bundleKey,MISSING_BUNDLE,control);
    }
  finally {
      if (constKey.getThrowable() instanceof InterruptedException) {
        Thread.currentThread().interrupt();
      }
    }
  }
  return parent;
}
