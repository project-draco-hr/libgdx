{
  rects=new Array(rects);
  while (rects.size > 0) {
    int bestRectIndex=-1;
    Rect bestNode=new Rect();
    bestNode.score1=Integer.MAX_VALUE;
    bestNode.score2=Integer.MAX_VALUE;
    for (int i=0; i < rects.size; i++) {
      Rect newNode=ScoreRect(rects.get(i),method);
      if (newNode.score1 < bestNode.score1 || (newNode.score1 == bestNode.score1 && newNode.score2 < bestNode.score2)) {
        bestNode.set(rects.get(i));
        bestNode.score1=newNode.score1;
        bestNode.score2=newNode.score2;
        bestNode.x=newNode.x;
        bestNode.y=newNode.y;
        bestNode.width=newNode.width;
        bestNode.height=newNode.height;
        bestNode.rotated=newNode.rotated;
        bestRectIndex=i;
      }
    }
    if (bestRectIndex == -1)     break;
    PlaceRect(bestNode);
    rects.removeIndex(bestRectIndex);
  }
  Page result=getResult();
  result.remainingRects=rects;
  return result;
}
