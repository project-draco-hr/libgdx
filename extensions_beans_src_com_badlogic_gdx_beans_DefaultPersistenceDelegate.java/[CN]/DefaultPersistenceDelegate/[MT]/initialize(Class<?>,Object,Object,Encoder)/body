{
  super.initialize(type,oldInstance,newInstance,enc);
  if (type != oldInstance.getClass()) {
    return;
  }
  BeanInfo info=null;
  try {
    info=Introspector.getBeanInfo(type);
  }
 catch (  IntrospectionException ex) {
    enc.getExceptionListener().exceptionThrown(ex);
    return;
  }
  PropertyDescriptor[] pds=info.getPropertyDescriptors();
  Method getter, setter;
  for (int i=0; i < pds.length; i++) {
    if (Boolean.TRUE.equals(pds[i].getValue("transient"))) {
      continue;
    }
    getter=pds[i].getReadMethod();
    setter=pds[i].getWriteMethod();
    if (getter == null || setter == null) {
      continue;
    }
    Expression getterExp=new Expression(oldInstance,getter.getName(),null);
    try {
      Object oldVal=getterExp.getValue();
      enc.writeExpression(getterExp);
      Object targetVal=enc.get(oldVal);
      Object newVal=new Expression(newInstance,getter.getName(),null).getValue();
      boolean invokeSetter=targetVal == null ? (newVal != null && oldVal == null) : !enc.getPersistenceDelegate(targetVal.getClass()).mutatesTo(targetVal,newVal);
      if (invokeSetter) {
        enc.writeStatement(new Statement(oldInstance,setter.getName(),new Object[]{oldVal}));
      }
    }
 catch (    Exception ex) {
      enc.getExceptionListener().exceptionThrown(ex);
    }
  }
}
