{
  m_indexA=m_bodyA.m_islandIndex;
  m_indexB=m_bodyB.m_islandIndex;
  m_localCenterA.set(m_bodyA.m_sweep.localCenter);
  m_localCenterB.set(m_bodyB.m_sweep.localCenter);
  m_invMassA=m_bodyA.m_invMass;
  m_invMassB=m_bodyB.m_invMass;
  m_invIA=m_bodyA.m_invI;
  m_invIB=m_bodyB.m_invI;
  Vec2 cA=data.positions[m_indexA].c;
  float aA=data.positions[m_indexA].a;
  Vec2 vA=data.velocities[m_indexA].v;
  float wA=data.velocities[m_indexA].w;
  Vec2 cB=data.positions[m_indexB].c;
  float aB=data.positions[m_indexB].a;
  Vec2 vB=data.velocities[m_indexB].v;
  float wB=data.velocities[m_indexB].w;
  final Rot qA=pool.popRot();
  final Rot qB=pool.popRot();
  final Vec2 d=pool.popVec2();
  final Vec2 temp=pool.popVec2();
  final Vec2 rA=pool.popVec2();
  final Vec2 rB=pool.popVec2();
  qA.set(aA);
  qB.set(aB);
  Rot.mulToOutUnsafe(qA,d.set(m_localAnchorA).subLocal(m_localCenterA),rA);
  Rot.mulToOutUnsafe(qB,d.set(m_localAnchorB).subLocal(m_localCenterB),rB);
  d.set(cB).subLocal(cA).addLocal(rB).subLocal(rA);
  float mA=m_invMassA, mB=m_invMassB;
  float iA=m_invIA, iB=m_invIB;
{
    Rot.mulToOutUnsafe(qA,m_localXAxisA,m_axis);
    temp.set(d).addLocal(rA);
    m_a1=Vec2.cross(temp,m_axis);
    m_a2=Vec2.cross(rB,m_axis);
    m_motorMass=mA + mB + iA * m_a1 * m_a1 + iB * m_a2 * m_a2;
    if (m_motorMass > 0.0f) {
      m_motorMass=1.0f / m_motorMass;
    }
  }
{
    Rot.mulToOutUnsafe(qA,m_localYAxisA,m_perp);
    temp.set(d).addLocal(rA);
    m_s1=Vec2.cross(temp,m_perp);
    m_s2=Vec2.cross(rB,m_perp);
    float k11=mA + mB + iA * m_s1 * m_s1 + iB * m_s2 * m_s2;
    float k12=iA * m_s1 + iB * m_s2;
    float k13=iA * m_s1 * m_a1 + iB * m_s2 * m_a2;
    float k22=iA + iB;
    if (k22 == 0.0f) {
      k22=1.0f;
    }
    float k23=iA * m_a1 + iB * m_a2;
    float k33=mA + mB + iA * m_a1 * m_a1 + iB * m_a2 * m_a2;
    m_K.ex.set(k11,k12,k13);
    m_K.ey.set(k12,k22,k23);
    m_K.ez.set(k13,k23,k33);
  }
  if (m_enableLimit) {
    float jointTranslation=Vec2.dot(m_axis,d);
    if (MathUtils.abs(m_upperTranslation - m_lowerTranslation) < 2.0f * Settings.linearSlop) {
      m_limitState=LimitState.EQUAL;
    }
 else     if (jointTranslation <= m_lowerTranslation) {
      if (m_limitState != LimitState.AT_LOWER) {
        m_limitState=LimitState.AT_LOWER;
        m_impulse.z=0.0f;
      }
    }
 else     if (jointTranslation >= m_upperTranslation) {
      if (m_limitState != LimitState.AT_UPPER) {
        m_limitState=LimitState.AT_UPPER;
        m_impulse.z=0.0f;
      }
    }
 else {
      m_limitState=LimitState.INACTIVE;
      m_impulse.z=0.0f;
    }
  }
 else {
    m_limitState=LimitState.INACTIVE;
    m_impulse.z=0.0f;
  }
  if (m_enableMotor == false) {
    m_motorImpulse=0.0f;
  }
  if (data.step.warmStarting) {
    m_impulse.mulLocal(data.step.dtRatio);
    m_motorImpulse*=data.step.dtRatio;
    final Vec2 P=pool.popVec2();
    temp.set(m_axis).mulLocal(m_motorImpulse + m_impulse.z);
    P.set(m_perp).mulLocal(m_impulse.x).addLocal(temp);
    float LA=m_impulse.x * m_s1 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a1;
    float LB=m_impulse.x * m_s2 + m_impulse.y + (m_motorImpulse + m_impulse.z) * m_a2;
    vA.x-=mA * P.x;
    vA.y-=mA * P.y;
    wA-=iA * LA;
    vB.x+=mB * P.x;
    vB.y+=mB * P.y;
    wB+=iB * LB;
    pool.pushVec2(1);
  }
 else {
    m_impulse.setZero();
    m_motorImpulse=0.0f;
  }
  data.velocities[m_indexA].w=wA;
  data.velocities[m_indexB].w=wB;
  pool.pushRot(2);
  pool.pushVec2(4);
}
