{
  addListener(clickListener=new ClickListener(){
    public void clicked(    InputEvent event,    float x,    float y){
      Node node=getNodeAt(y);
      if (node == null)       return;
      if (node != getNodeAt(getTouchDownY()))       return;
      if (multiSelect && selectedNodes.size > 0 && (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT))) {
        float low=selectedNodes.first().actor.getY();
        float high=node.actor.getY();
        if (!Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) && !Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT))         selectedNodes.clear();
        if (low > high)         selectNodes(rootNodes,high,low);
 else         selectNodes(rootNodes,low,high);
        fireChangeEvent();
        return;
      }
      if (!multiSelect || (!Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) && !Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT))) {
        if (node.children.size > 0) {
          float rowX=node.actor.getX();
          if (node.icon != null)           rowX-=iconSpacing + node.icon.getMinWidth();
          if (x < rowX) {
            node.setExpanded(!node.expanded);
            return;
          }
        }
        if (!node.isSelectable())         return;
        boolean unselect=toggleSelect && selectedNodes.size == 1 && selectedNodes.contains(node,true);
        selectedNodes.clear();
        if (unselect) {
          fireChangeEvent();
          return;
        }
      }
 else       if (!node.isSelectable())       return;
      if (!selectedNodes.removeValue(node,true))       selectedNodes.add(node);
      fireChangeEvent();
    }
    public boolean mouseMoved(    InputEvent event,    float x,    float y){
      setOverNode(getNodeAt(y));
      return false;
    }
    public void exit(    InputEvent event,    float x,    float y,    int pointer,    Actor toActor){
      super.exit(event,x,y,pointer,toActor);
      if (toActor == null || !toActor.isDescendantOf(Tree.this))       setOverNode(null);
    }
  }
);
}
