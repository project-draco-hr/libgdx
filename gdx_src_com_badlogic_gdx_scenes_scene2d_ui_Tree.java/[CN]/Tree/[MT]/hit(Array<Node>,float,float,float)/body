{
  for (int i=0, n=nodes.size; i < n; i++) {
    Node node=nodes.get(i);
    if (y > rowY - node.height - ySpacing / 2 && y <= rowY + ySpacing / 2) {
      if (x < leftColumnWidth - iconSpacing)       return -1;
      float rowX=node.rightActor.getX();
      if (node.icon != null)       rowX-=iconSpacing + node.icon.getMinWidth();
      if (x < rowX) {
        node.setExpanded(!node.expanded);
        return -1;
      }
      if (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) && !Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT) && selectedNodes.size > 0) {
        float low=selectedNodes.first().rightActor.getY();
        float high=node.rightActor.getY();
        if (!Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) && !Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT))         selectedNodes.clear();
        if (low > high)         selectNodes(rootNodes,high,low);
 else         selectNodes(rootNodes,low,high);
        return -1;
      }
      if (!Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) && !Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT))       selectedNodes.clear();
      if (!selectedNodes.removeValue(node,true))       selectedNodes.add(node);
      ChangeEvent changeEvent=Pools.obtain(ChangeEvent.class);
      fire(changeEvent);
      Pools.free(changeEvent);
      return -1;
    }
    rowY-=node.height + ySpacing;
    if (node.expanded) {
      rowY=hit(node.children,x,y,rowY);
      if (rowY == -1)       return -1;
    }
  }
  return rowY;
}
