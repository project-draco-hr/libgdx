{
  buffer.setLength(0);
  String varName="t";
  if (t instanceof JPrimitiveType)   varName="p";
  pb("Type " + varName + " = new Type();");
  pb(varName + ".name = \"" + t.getErasedType().getQualifiedSourceName()+ "\";");
  pb(varName + ".clazz = " + t.getErasedType().getQualifiedSourceName()+ ".class;");
  if (t instanceof JClassType) {
    JClassType c=(JClassType)t;
    if (isVisible(c.getSuperclass()))     pb(varName + ".superClass = " + c.getSuperclass().getErasedType().getQualifiedSourceName()+ ".class;");
    if (c.getFlattenedSupertypeHierarchy() != null) {
      pb("Set<Class> " + varName + "Assignables = new HashSet<Class>();");
      for (      JType i : c.getFlattenedSupertypeHierarchy()) {
        if (!isVisible(i))         continue;
        pb(varName + "Assignables.add(" + i.getErasedType().getQualifiedSourceName()+ ".class);");
      }
      pb(varName + ".assignables = " + varName+ "Assignables;");
    }
    if (c.isInterface() != null)     pb(varName + ".isInterface = true;");
    if (c.isEnum() != null)     pb(varName + ".isEnum = true;");
    if (c.isArray() != null)     pb(varName + ".isArray = true;");
    if (c.isMemberType())     pb(varName + ".isMemberClass = true;");
    pb(varName + ".isStatic = " + c.isStatic()+ ";");
    pb(varName + ".isAbstract = " + c.isAbstract()+ ";");
    if (c.getFields() != null) {
      pb(varName + ".fields = new Field[] {");
      for (      JField f : c.getFields()) {
        String enclosingType=getType(c);
        String fieldType=getType(f.getType());
        String setter="s" + (nextStub++);
        String getter="g" + (nextStub++);
        String elementType=getElementTypes(f);
        pb("new Field(\"" + f.getName() + "\", "+ enclosingType+ ", "+ fieldType+ ", "+ f.isFinal()+ ", "+ f.isDefaultAccess()+ ", "+ f.isPrivate()+ ", "+ f.isProtected()+ ", "+ f.isPublic()+ ", "+ f.isStatic()+ ", "+ f.isTransient()+ ", "+ f.isVolatile()+ ", "+ "\""+ getter+ "\", "+ "\""+ setter+ "\", "+ elementType+ "), ");
        SetterGetterStub stub=new SetterGetterStub();
        stub.name=f.getName();
        stub.enclosingType=enclosingType;
        stub.type=fieldType;
        stub.isStatic=f.isStatic();
        stub.isFinal=f.isFinal();
        if (enclosingType != null && fieldType != null) {
          stub.getter=getter;
          stub.setter=setter;
        }
        setterGetterStubs.add(stub);
      }
      pb("};");
    }
    printMethods(c,varName,"Method",c.getMethods());
    if (!c.isAbstract() && (c.getEnclosingType() == null || c.isStatic())) {
      printMethods(c,varName,"Constructor",c.getConstructors());
    }
 else {
      logger.log(Type.INFO,c.getName() + " can't be instantiated. Constructors not generated");
    }
    if (c.isArray() != null) {
      pb(varName + ".componentType = " + getType(c.isArray().getComponentType())+ ";");
    }
    if (c.isEnum() != null) {
      JEnumConstant[] enumConstants=c.isEnum().getEnumConstants();
      if (enumConstants != null) {
        pb(varName + ".enumConstants = new Object[" + enumConstants.length+ "];");
        for (int i=0; i < enumConstants.length; i++) {
          pb(varName + ".enumConstants[" + i+ "] = "+ c.getErasedType().getQualifiedSourceName()+ "."+ enumConstants[i].getName()+ ";");
        }
      }
    }
  }
 else {
    pb(varName + ".isPrimitive = true;");
  }
  pb("types.put(\"" + t.getErasedType().getQualifiedSourceName() + "\", "+ varName+ ");");
  return buffer.toString();
}
