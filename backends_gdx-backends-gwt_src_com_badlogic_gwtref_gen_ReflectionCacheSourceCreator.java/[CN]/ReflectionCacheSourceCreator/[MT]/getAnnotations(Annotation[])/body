{
  if (annotations != null && annotations.length > 0) {
    StringBuilder b=new StringBuilder();
    b.append("new java.lang.annotation.Annotation[] {");
    for (    Annotation annotation : annotations) {
      Class<?> type=annotation.annotationType();
      b.append(" new ").append(type.getCanonicalName()).append("() {");
      Method[] methods=type.getDeclaredMethods();
      for (      Method method : methods) {
        Class<?> returnType=method.getReturnType();
        b.append(" @Override public");
        b.append(" ").append(returnType.getSimpleName());
        b.append(" ").append(method.getName()).append("() { return");
        if (returnType.isArray()) {
          b.append(" new ").append(returnType.getSimpleName()).append(" {");
        }
        Object invokeResult=null;
        try {
          invokeResult=method.invoke(annotation);
        }
 catch (        IllegalAccessException e) {
          logger.log(Type.ERROR,"Error invoking annotation method.");
        }
catch (        InvocationTargetException e) {
          logger.log(Type.ERROR,"Error invoking annotation method.");
        }
        if (invokeResult != null) {
          if (returnType.equals(String[].class)) {
            for (            String s : (String[])invokeResult) {
              b.append(" \"").append(s).append("\",");
            }
          }
 else           if (returnType.equals(String.class)) {
            b.append(" \"").append((String)invokeResult).append("\"");
          }
 else {
            logger.log(Type.ERROR,"Return type not supported (or not yet implemented).");
          }
        }
        if (returnType.isArray()) {
          b.append(" }");
        }
        b.append("; ");
        b.append("}");
      }
      b.append(" @Override public Class<? extends java.lang.annotation.Annotation> annotationType() { return ");
      b.append(type.getCanonicalName());
      b.append(".class; }");
      b.append("}, ");
    }
    b.append("}");
    return b.toString();
  }
  return "null";
}
