{
  ArrayList<VertexIndices> vertCombos=new ArrayList<VertexIndices>();
  short[] indices=new short[triangles.length * 3];
  int idx=0;
  short vertIdx=0;
  for (int i=0; i < triangles.length; i++) {
    MD2Triangle triangle=triangles[i];
    for (int j=0; j < 3; j++) {
      VertexIndices vert=null;
      boolean contains=false;
      for (int k=0; k < vertCombos.size(); k++) {
        VertexIndices vIdx=vertCombos.get(k);
        if (vIdx.vIdx == triangle.vertices[j] && vIdx.tIdx == triangle.texCoords[j]) {
          vert=vIdx;
          contains=true;
          break;
        }
      }
      if (!contains) {
        vert=new VertexIndices(triangle.vertices[j],triangle.texCoords[j],vertIdx);
        vertCombos.add(vert);
        vertIdx++;
      }
      indices[idx++]=vert.nIdx;
    }
  }
  idx=0;
  float[] uvs=new float[vertCombos.size() * 2];
  for (int i=0; i < vertCombos.size(); i++) {
    VertexIndices vtI=vertCombos.get(i);
    uvs[idx++]=texCoords[vtI.tIdx * 2];
    uvs[idx++]=texCoords[vtI.tIdx * 2 + 1];
  }
  for (int i=0; i < frames.length; i++) {
    MD2Frame frame=frames[i];
    idx=0;
    float[] newVerts=new float[vertCombos.size() * 6];
    for (int j=0; j < vertCombos.size(); j++) {
      VertexIndices vIdx=vertCombos.get(j);
      newVerts[idx++]=frame.vertices[vIdx.vIdx * 3];
      newVerts[idx++]=frame.vertices[vIdx.vIdx * 3 + 1];
      newVerts[idx++]=frame.vertices[vIdx.vIdx * 3 + 2];
      newVerts[idx++]=MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][1] * 70;
      newVerts[idx++]=MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][2] * 70;
      newVerts[idx++]=MD2Normals.normals[frame.normalIndices[vIdx.vIdx]][0] * 70;
    }
    frame.vertices=newVerts;
  }
  header.numVertices=vertCombos.size();
  float[] blendedVertices=new float[header.numVertices * 8];
  MD2Frame frame=frames[0];
  idx=0;
  int idxV=0;
  int idxT=0;
  for (int i=0; i < header.numVertices; i++) {
    VertexIndices vIdx=vertCombos.get(i);
    blendedVertices[idx++]=frame.vertices[idxV++];
    blendedVertices[idx++]=frame.vertices[idxV++];
    blendedVertices[idx++]=frame.vertices[idxV++];
    blendedVertices[idx++]=frame.vertices[idxV++];
    blendedVertices[idx++]=frame.vertices[idxV++];
    blendedVertices[idx++]=frame.vertices[idxV++];
    blendedVertices[idx++]=uvs[idxT++];
    blendedVertices[idx++]=uvs[idxT++];
  }
  ObjectMap<String,KeyframedAnimation> animations=new ObjectMap<String,KeyframedAnimation>();
  String lastName=frames[0].name;
  int beginFrame=0;
  for (int frameNum=1; frameNum < frames.length; frameNum++) {
    if (!frames[frameNum].name.equals(lastName) || frameNum == frames.length - 1) {
      int subAnimLen=frameNum - beginFrame;
      KeyframedAnimation subAnim=new KeyframedAnimation(lastName,frameDuration,new Keyframe[subAnimLen]);
      for (int subFrame=beginFrame; subFrame < frameNum; subFrame++) {
        int absFrameNum=subFrame - beginFrame;
        frame=frames[subFrame];
        float[] vertices=new float[header.numVertices * 3];
        idx=0;
        idxV=0;
        for (int i=0; i < header.numVertices; i++) {
          vertices[idx++]=frame.vertices[idxV++];
          vertices[idx++]=frame.vertices[idxV++];
          vertices[idx++]=frame.vertices[idxV++];
        }
        Keyframe keyFrame=new Keyframe(absFrameNum * frameDuration,vertices);
        subAnim.keyframes[absFrameNum]=keyFrame;
        animations.put(subAnim.name,subAnim);
      }
      lastName=frames[frameNum].name;
      beginFrame=frameNum;
    }
  }
  KeyframedAnimation animation=new KeyframedAnimation("all",frameDuration,new Keyframe[frames.length]);
  float timeStamp=0;
  for (int frameNum=0; frameNum < frames.length; frameNum++) {
    frame=frames[frameNum];
    float[] vertices=new float[header.numVertices * 6];
    idx=0;
    idxV=0;
    for (int i=0; i < header.numVertices; i++) {
      vertices[idx++]=frame.vertices[idxV++];
      vertices[idx++]=frame.vertices[idxV++];
      vertices[idx++]=frame.vertices[idxV++];
      vertices[idx++]=frame.vertices[idxV++];
      vertices[idx++]=frame.vertices[idxV++];
      vertices[idx++]=frame.vertices[idxV++];
    }
    Keyframe keyFrame=new Keyframe(frameNum * frameDuration,vertices);
    animation.keyframes[frameNum]=keyFrame;
  }
  Mesh mesh=new Mesh(false,header.numVertices,indices.length,new VertexAttribute(Usage.Position,3,ShaderProgram.POSITION_ATTRIBUTE),new VertexAttribute(Usage.Normal,3,ShaderProgram.NORMAL_ATTRIBUTE),new VertexAttribute(Usage.TextureCoordinates,2,ShaderProgram.TEXCOORD_ATTRIBUTE + "0"));
  mesh.setIndices(indices);
  animations.put("all",animation);
  KeyframedSubMesh subMesh=new KeyframedSubMesh("md2-mesh",mesh,blendedVertices,animations,6,GL10.GL_TRIANGLES);
  KeyframedModel model=new KeyframedModel(new KeyframedSubMesh[]{subMesh});
  model.setAnimation("all",0,false);
  return model;
}
