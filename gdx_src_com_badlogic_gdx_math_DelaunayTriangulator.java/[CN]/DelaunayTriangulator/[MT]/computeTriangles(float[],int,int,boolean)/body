{
  IntArray triangles=this.triangles;
  triangles.clear();
  if (count < 6)   return triangles;
  triangles.ensureCapacity(count);
  int end=offset + count;
  if (!sorted)   sort(points,offset,count);
  float xmin=points[0], ymin=points[1];
  float xmax=xmin, ymax=ymin;
  for (int i=offset + 2; i < end; i++) {
    float value=points[i];
    if (value < xmin)     xmin=value;
    if (value > xmax)     xmax=value;
    i++;
    value=points[i];
    if (value < ymin)     ymin=value;
    if (value > ymax)     ymax=value;
  }
  float dx=xmax - xmin, dy=ymax - ymin;
  float dmax=(dx > dy ? dx : dy) * 20f;
  float xmid=(xmax + xmin) / 2f, ymid=(ymax + ymin) / 2f;
  float[] superTriangle=this.superTriangle;
  superTriangle[0]=xmid - dmax;
  superTriangle[1]=ymid - dmax;
  superTriangle[2]=xmid;
  superTriangle[3]=ymid + dmax;
  superTriangle[4]=xmid + dmax;
  superTriangle[5]=ymid - dmax;
  IntArray edges=this.edges;
  edges.ensureCapacity(count / 2);
  BooleanArray complete=this.complete;
  complete.clear();
  complete.ensureCapacity(count);
  triangles.add(end);
  triangles.add(end + 2);
  triangles.add(end + 4);
  complete.add(false);
  for (int pointIndex=offset; pointIndex < end; pointIndex+=2) {
    float x=points[pointIndex], y=points[pointIndex + 1];
    int[] trianglesArray=triangles.items;
    boolean[] completeArray=complete.items;
    for (int triangleIndex=triangles.size - 1; triangleIndex >= 0; triangleIndex-=3) {
      int completeIndex=triangleIndex / 3;
      if (completeArray[completeIndex])       continue;
      int p1=trianglesArray[triangleIndex - 2];
      int p2=trianglesArray[triangleIndex - 1];
      int p3=trianglesArray[triangleIndex];
      float x1, y1, x2, y2, x3, y3;
      if (p1 >= end) {
        int i=p1 - end;
        x1=superTriangle[i];
        y1=superTriangle[i + 1];
      }
 else {
        x1=points[p1];
        y1=points[p1 + 1];
      }
      if (p2 >= end) {
        int i=p2 - end;
        x2=superTriangle[i];
        y2=superTriangle[i + 1];
      }
 else {
        x2=points[p2];
        y2=points[p2 + 1];
      }
      if (p3 >= end) {
        int i=p3 - end;
        x3=superTriangle[i];
        y3=superTriangle[i + 1];
      }
 else {
        x3=points[p3];
        y3=points[p3 + 1];
      }
switch (circumCircle(x,y,x1,y1,x2,y2,x3,y3)) {
case COMPLETE:
        completeArray[completeIndex]=true;
      break;
case INSIDE:
    edges.add(p1);
  edges.add(p2);
edges.add(p2);
edges.add(p3);
edges.add(p3);
edges.add(p1);
triangles.removeIndex(triangleIndex);
triangles.removeIndex(triangleIndex - 1);
triangles.removeIndex(triangleIndex - 2);
complete.removeIndex(completeIndex);
break;
}
}
int[] edgesArray=edges.items;
for (int i=0, n=edges.size; i < n; i+=2) {
int p1=edgesArray[i];
if (p1 == -1) continue;
int p2=edgesArray[i + 1];
boolean skip=false;
for (int ii=i + 2; ii < n; ii+=2) {
if (p1 == edgesArray[ii + 1] && p2 == edgesArray[ii]) {
skip=true;
edgesArray[ii]=-1;
}
}
if (skip) continue;
triangles.add(p1);
triangles.add(edgesArray[i + 1]);
triangles.add(pointIndex);
complete.add(false);
}
edges.clear();
}
int[] trianglesArray=triangles.items;
for (int i=triangles.size - 1; i >= 0; i-=3) {
if (trianglesArray[i] >= end || trianglesArray[i - 1] >= end || trianglesArray[i - 2] >= end) {
triangles.removeIndex(i);
triangles.removeIndex(i - 1);
triangles.removeIndex(i - 2);
}
}
if (!sorted) {
int[] originalIndicesArray=originalIndices.items;
for (int i=0, n=triangles.size; i < n; i++) trianglesArray[i]=originalIndicesArray[trianglesArray[i] / 2] * 2;
}
return triangles;
}
