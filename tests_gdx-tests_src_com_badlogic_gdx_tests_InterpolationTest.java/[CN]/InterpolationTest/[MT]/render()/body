{
  Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
  float bottomLeftX=Gdx.graphics.getWidth() / 2 - graphSize / 2, bottomLeftY=Gdx.graphics.getHeight() / 2 - graphSize / 2;
  String text=String.valueOf(duration);
  if (text.length() > 4)   text=text.substring(0,text.lastIndexOf('.') + 3);
  text="duration: " + text + " s (ctrl + scroll to change)";
  stage.getBatch().begin();
  list.getStyle().font.draw(stage.getBatch(),text,bottomLeftX + graphSize / 2 - list.getStyle().font.getBounds(text).width / 2,bottomLeftY + graphSize + list.getStyle().font.getLineHeight());
  stage.getBatch().end();
  renderer.begin(ShapeType.Line);
  renderer.rect(bottomLeftX,bottomLeftY,graphSize,graphSize);
  float lastX=bottomLeftX, lastY=bottomLeftY;
  for (float step=0; step <= steps; step++) {
    Interpolation interpolation=getInterpolation(selectedInterpolation);
    float percent=step / steps;
    float x=bottomLeftX + graphSize * percent, y=bottomLeftY + graphSize * interpolation.apply(percent);
    renderer.line(lastX,lastY,x,y);
    lastX=x;
    lastY=y;
  }
  time+=Gdx.graphics.getDeltaTime();
  if (time > duration) {
    time=Float.NaN;
    startPosition.set(targetPosition);
  }
  renderer.line(bottomLeftX + graphSize * time / duration,bottomLeftY,bottomLeftX + graphSize * time / duration,bottomLeftY + graphSize);
  renderer.setColor(Color.GRAY);
  renderer.line(startPosition,targetPosition);
  renderer.setColor(Color.WHITE);
  renderer.end();
  renderer.begin(ShapeType.Filled);
  if (!Float.isNaN(time))   getPosition(time);
  renderer.circle(position.x,position.y,7);
  renderer.end();
  stage.act();
  stage.draw();
}
