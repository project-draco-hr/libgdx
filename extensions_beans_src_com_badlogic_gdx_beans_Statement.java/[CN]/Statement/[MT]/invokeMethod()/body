{
  Object result=null;
  try {
    Object target=getTarget();
    String methodName=getMethodName();
    Object[] arguments=getArguments();
    Class<?> targetClass=target.getClass();
    if (targetClass.isArray()) {
      Method method=findArrayMethod(methodName,arguments);
      Object[] copy=new Object[arguments.length + 1];
      copy[0]=target;
      System.arraycopy(arguments,0,copy,1,arguments.length);
      result=method.invoke(null,copy);
    }
 else     if (BeansUtils.NEWINSTANCE.equals(methodName) && target == Array.class) {
      result=Array.newInstance((Class<?>)arguments[0],((Integer)arguments[1]).intValue());
    }
 else     if (BeansUtils.NEW.equals(methodName) || BeansUtils.NEWINSTANCE.equals(methodName)) {
      if (target instanceof Class<?>) {
        Constructor<?> constructor=findConstructor((Class<?>)target,arguments);
        result=constructor.newInstance(arguments);
      }
 else {
        if (BeansUtils.NEW.equals(methodName)) {
          throw new NoSuchMethodException(this.toString());
        }
        Method method=findMethod(targetClass,methodName,arguments,false);
        result=method.invoke(target,arguments);
      }
    }
 else     if (methodName.equals(BeansUtils.NEWARRAY)) {
      Class<?> clazz=(Class<?>)target, argClass;
      for (int index=0; index < arguments.length; index++) {
        argClass=arguments[index] == null ? null : arguments[index].getClass();
        if (argClass != null && !clazz.isAssignableFrom(argClass) && !BeansUtils.isPrimitiveWrapper(argClass,clazz)) {
          throw new IllegalArgumentException(Messages.getString("beans.63"));
        }
      }
      result=Array.newInstance(clazz,arguments.length);
      if (clazz.isPrimitive()) {
        arrayCopy(clazz,arguments,result,arguments.length);
      }
 else {
        System.arraycopy(arguments,0,result,0,arguments.length);
      }
      return result;
    }
 else     if (target instanceof Class<?>) {
      Method method=null;
      try {
        if (target != Class.class) {
          method=findMethod((Class<?>)target,methodName,arguments,true);
          result=method.invoke(null,arguments);
        }
      }
 catch (      NoSuchMethodException e) {
      }
      if (method == null) {
        if (BeansUtils.FORNAME.equals(methodName) && arguments.length == 1 && arguments[0] instanceof String) {
          try {
            result=Class.forName((String)arguments[0]);
          }
 catch (          ClassNotFoundException e2) {
            result=Class.forName((String)arguments[0],true,Thread.currentThread().getContextClassLoader());
          }
        }
 else {
          method=findMethod(targetClass,methodName,arguments,false);
          result=method.invoke(target,arguments);
        }
      }
    }
 else     if (target instanceof Iterator<?>) {
      final Iterator<?> iterator=(Iterator<?>)target;
      final Method method=findMethod(targetClass,methodName,arguments,false);
      if (iterator.hasNext()) {
        result=new PrivilegedAction<Object>(){
          public Object run(){
            try {
              method.setAccessible(true);
              return (method.invoke(iterator,new Object[0]));
            }
 catch (            Exception e) {
            }
            return null;
          }
        }
.run();
      }
    }
 else {
      Method method=findMethod(targetClass,methodName,arguments,false);
      method.setAccessible(true);
      result=method.invoke(target,arguments);
    }
  }
 catch (  InvocationTargetException ite) {
    Throwable t=ite.getCause();
    throw (t != null) && (t instanceof Exception) ? (Exception)t : ite;
  }
  return result;
}
