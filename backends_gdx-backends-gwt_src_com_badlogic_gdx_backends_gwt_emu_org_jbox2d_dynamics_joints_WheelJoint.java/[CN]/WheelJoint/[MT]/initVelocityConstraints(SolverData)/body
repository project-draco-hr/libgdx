{
  m_indexA=m_bodyA.m_islandIndex;
  m_indexB=m_bodyB.m_islandIndex;
  m_localCenterA.set(m_bodyA.m_sweep.localCenter);
  m_localCenterB.set(m_bodyB.m_sweep.localCenter);
  m_invMassA=m_bodyA.m_invMass;
  m_invMassB=m_bodyB.m_invMass;
  m_invIA=m_bodyA.m_invI;
  m_invIB=m_bodyB.m_invI;
  float mA=m_invMassA, mB=m_invMassB;
  float iA=m_invIA, iB=m_invIB;
  Vec2 cA=data.positions[m_indexA].c;
  float aA=data.positions[m_indexA].a;
  Vec2 vA=data.velocities[m_indexA].v;
  float wA=data.velocities[m_indexA].w;
  Vec2 cB=data.positions[m_indexB].c;
  float aB=data.positions[m_indexB].a;
  Vec2 vB=data.velocities[m_indexB].v;
  float wB=data.velocities[m_indexB].w;
  final Rot qA=pool.popRot();
  final Rot qB=pool.popRot();
  final Vec2 temp=pool.popVec2();
  qA.set(aA);
  qB.set(aB);
  Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_localCenterA),rA);
  Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_localCenterB),rB);
  d.set(cB).addLocal(rB).subLocal(cA).subLocal(rA);
{
    Rot.mulToOut(qA,m_localYAxisA,m_ay);
    m_sAy=Vec2.cross(temp.set(d).addLocal(rA),m_ay);
    m_sBy=Vec2.cross(rB,m_ay);
    m_mass=mA + mB + iA * m_sAy * m_sAy + iB * m_sBy * m_sBy;
    if (m_mass > 0.0f) {
      m_mass=1.0f / m_mass;
    }
  }
  m_springMass=0.0f;
  m_bias=0.0f;
  m_gamma=0.0f;
  if (m_frequencyHz > 0.0f) {
    Rot.mulToOut(qA,m_localXAxisA,m_ax);
    m_sAx=Vec2.cross(temp.set(d).addLocal(rA),m_ax);
    m_sBx=Vec2.cross(rB,m_ax);
    float invMass=mA + mB + iA * m_sAx * m_sAx + iB * m_sBx * m_sBx;
    if (invMass > 0.0f) {
      m_springMass=1.0f / invMass;
      float C=Vec2.dot(d,m_ax);
      float omega=2.0f * MathUtils.PI * m_frequencyHz;
      float d=2.0f * m_springMass * m_dampingRatio* omega;
      float k=m_springMass * omega * omega;
      float h=data.step.dt;
      m_gamma=h * (d + h * k);
      if (m_gamma > 0.0f) {
        m_gamma=1.0f / m_gamma;
      }
      m_bias=C * h * k* m_gamma;
      m_springMass=invMass + m_gamma;
      if (m_springMass > 0.0f) {
        m_springMass=1.0f / m_springMass;
      }
    }
  }
 else {
    m_springImpulse=0.0f;
  }
  if (m_enableMotor) {
    m_motorMass=iA + iB;
    if (m_motorMass > 0.0f) {
      m_motorMass=1.0f / m_motorMass;
    }
  }
 else {
    m_motorMass=0.0f;
    m_motorImpulse=0.0f;
  }
  if (data.step.warmStarting) {
    final Vec2 P=pool.popVec2();
    m_impulse*=data.step.dtRatio;
    m_springImpulse*=data.step.dtRatio;
    m_motorImpulse*=data.step.dtRatio;
    P.x=m_impulse * m_ay.x + m_springImpulse * m_ax.x;
    P.y=m_impulse * m_ay.y + m_springImpulse * m_ax.y;
    float LA=m_impulse * m_sAy + m_springImpulse * m_sAx + m_motorImpulse;
    float LB=m_impulse * m_sBy + m_springImpulse * m_sBx + m_motorImpulse;
    vA.x-=m_invMassA * P.x;
    vA.y-=m_invMassA * P.y;
    wA-=m_invIA * LA;
    vB.x+=m_invMassB * P.x;
    vB.y+=m_invMassB * P.y;
    wB+=m_invIB * LB;
    pool.pushVec2(1);
  }
 else {
    m_impulse=0.0f;
    m_springImpulse=0.0f;
    m_motorImpulse=0.0f;
  }
  pool.pushRot(2);
  pool.pushVec2(1);
  data.velocities[m_indexA].w=wA;
  data.velocities[m_indexB].w=wB;
}
