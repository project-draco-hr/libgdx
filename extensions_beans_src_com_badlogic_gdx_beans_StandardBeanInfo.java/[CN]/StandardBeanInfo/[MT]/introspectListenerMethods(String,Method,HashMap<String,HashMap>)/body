{
  String methodName=theMethod.getName();
  if (methodName == null) {
    return;
  }
  if (!((methodName.startsWith(type)) && (methodName.endsWith(SUFFIX_LISTEN)))) {
    return;
  }
  String listenerName=methodName.substring(type.length());
  String eventName=listenerName.substring(0,listenerName.lastIndexOf(SUFFIX_LISTEN));
  if ((eventName == null) || (eventName.length() == 0)) {
    return;
  }
  Class[] paramTypes=theMethod.getParameterTypes();
  if ((paramTypes == null) || (paramTypes.length != 1)) {
    return;
  }
  Class<?> listenerType=paramTypes[0];
  if (!EventListener.class.isAssignableFrom(listenerType)) {
    return;
  }
  if (!listenerType.getName().endsWith(listenerName)) {
    return;
  }
  HashMap table=methodsTable.get(eventName);
  if (table == null) {
    table=new HashMap();
  }
  if (table.get("listenerType") == null) {
    table.put("listenerType",listenerType);
    table.put("listenerMethods",introspectListenerMethods(listenerType));
  }
  table.put(type,theMethod);
  if (type.equals(PREFIX_ADD)) {
    Class[] exceptionTypes=theMethod.getExceptionTypes();
    if (exceptionTypes != null) {
      for (int i=0; i < exceptionTypes.length; i++) {
        if (exceptionTypes[i].getName().equals(TooManyListenersException.class.getName())) {
          table.put("isUnicast","true");
          break;
        }
      }
    }
  }
  methodsTable.put(eventName,table);
}
