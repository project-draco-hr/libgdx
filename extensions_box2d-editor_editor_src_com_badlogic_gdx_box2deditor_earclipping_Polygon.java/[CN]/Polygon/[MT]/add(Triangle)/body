{
  int firstP=-1;
  int firstT=-1;
  int secondP=-1;
  int secondT=-1;
  for (int i=0; i < nVertices; i++) {
    if (t.x[0] == x[i] && t.y[0] == y[i]) {
      if (firstP == -1) {
        firstP=i;
        firstT=0;
      }
 else {
        secondP=i;
        secondT=0;
      }
    }
 else     if (t.x[1] == x[i] && t.y[1] == y[i]) {
      if (firstP == -1) {
        firstP=i;
        firstT=1;
      }
 else {
        secondP=i;
        secondT=1;
      }
    }
 else     if (t.x[2] == x[i] && t.y[2] == y[i]) {
      if (firstP == -1) {
        firstP=i;
        firstT=2;
      }
 else {
        secondP=i;
        secondT=2;
      }
    }
  }
  if (firstP == 0 && secondP == nVertices - 1) {
    firstP=nVertices - 1;
    secondP=0;
  }
  if (secondP == -1) {
    return null;
  }
  int tipT=0;
  if (tipT == firstT || tipT == secondT) {
    tipT=1;
  }
  if (tipT == firstT || tipT == secondT) {
    tipT=2;
  }
  float[] newx=new float[nVertices + 1];
  float[] newy=new float[nVertices + 1];
  int currOut=0;
  for (int i=0; i < nVertices; i++) {
    newx[currOut]=x[i];
    newy[currOut]=y[i];
    if (i == firstP) {
      ++currOut;
      newx[currOut]=t.x[tipT];
      newy[currOut]=t.y[tipT];
    }
    ++currOut;
  }
  return new Polygon(newx,newy);
}
