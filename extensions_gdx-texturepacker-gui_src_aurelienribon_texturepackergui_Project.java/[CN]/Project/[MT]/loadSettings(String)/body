{
  Settings settings=new Settings();
  String[] lines=str.split("\n");
  Matcher m;
  for (  String ln : lines) {
    m=Pattern.compile("alias=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.alias=Boolean.valueOf(m.group(1));
    m=Pattern.compile("alphaThreshold=(\\d+)").matcher(ln.trim());
    if (m.matches())     settings.alphaThreshold=Integer.valueOf(m.group(1));
    m=Pattern.compile("debug=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.debug=Boolean.valueOf(m.group(1));
    m=Pattern.compile("defaultFileFormat=(.+)").matcher(ln.trim());
    if (m.matches())     settings.defaultFileFormat=FileFormat.valueOf(m.group(1));
    m=Pattern.compile("defaultFilterMag=(.+)").matcher(ln.trim());
    if (m.matches())     settings.defaultFilterMag=TextureFilter.valueOf(m.group(1));
    m=Pattern.compile("defaultFilterMin=(.+)").matcher(ln.trim());
    if (m.matches())     settings.defaultFilterMin=TextureFilter.valueOf(m.group(1));
    m=Pattern.compile("defaultFormat=(.+)").matcher(ln.trim());
    if (m.matches())     settings.defaultFormat=Format.valueOf(m.group(1));
    m=Pattern.compile("defaultImageQuality=(.+)").matcher(ln.trim());
    if (m.matches())     settings.defaultImageQuality=Float.valueOf(m.group(1));
    m=Pattern.compile("duplicatePadding=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.duplicatePadding=Boolean.valueOf(m.group(1));
    m=Pattern.compile("edgePadding=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.edgePadding=Boolean.valueOf(m.group(1));
    m=Pattern.compile("ignoreBlankImages=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.ignoreBlankImages=Boolean.valueOf(m.group(1));
    m=Pattern.compile("incremental=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.incremental=Boolean.valueOf(m.group(1));
    m=Pattern.compile("incrementalFilePath=(.+)").matcher(ln.trim());
    if (m.matches())     settings.incrementalFilePath=m.group(1).trim().equals("") ? null : FilenameHelper.trim(m.group(1).trim());
    m=Pattern.compile("maxHeight=(\\d+)").matcher(ln.trim());
    if (m.matches())     settings.maxHeight=Integer.valueOf(m.group(1));
    m=Pattern.compile("maxWidth=(\\d+)").matcher(ln.trim());
    if (m.matches())     settings.maxWidth=Integer.valueOf(m.group(1));
    m=Pattern.compile("minHeight=(\\d+)").matcher(ln.trim());
    if (m.matches())     settings.minHeight=Integer.valueOf(m.group(1));
    m=Pattern.compile("minWidth=(\\d+)").matcher(ln.trim());
    if (m.matches())     settings.minWidth=Integer.valueOf(m.group(1));
    m=Pattern.compile("padding=(\\d+)").matcher(ln.trim());
    if (m.matches())     settings.padding=Integer.valueOf(m.group(1));
    m=Pattern.compile("pot=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.pot=Boolean.valueOf(m.group(1));
    m=Pattern.compile("rotate=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.rotate=Boolean.valueOf(m.group(1));
    m=Pattern.compile("stripWhitespace=(true|false)").matcher(ln.trim());
    if (m.matches())     settings.stripWhitespace=Boolean.valueOf(m.group(1));
  }
  return settings;
}
