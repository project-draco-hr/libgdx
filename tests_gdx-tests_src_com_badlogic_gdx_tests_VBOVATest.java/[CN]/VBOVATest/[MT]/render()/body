{
  Gdx.gl11.glClear(GL11.GL_COLOR_BUFFER_BIT);
switch (mode) {
case 0:
case 3:
    vertexBuffer=vbo;
  Gdx.gl11.glColor4f(1,0,0,1);
break;
case 1:
case 4:
vertexBuffer=vbosd;
Gdx.gl11.glColor4f(0,1,0,1);
break;
case 2:
case 5:
vertexBuffer=va;
Gdx.gl11.glColor4f(0,0,1,1);
break;
}
for (int i=0; i < 5; i++) {
if (!isStatic) vertexBuffer.setVertices(vertices,0,vertices.length);
vertexBuffer.bind();
if (mode == 3) {
ibo.bind();
if (!isStatic) ibo.setIndices(indices,0,indices.length);
}
if (mode == 4) {
ibosd.bind();
if (!isStatic) ibosd.setIndices(indices,0,indices.length);
}
if (mode == 5) {
vaibo.setIndices(indices,0,indices.length);
}
if (mode <= 2) {
Gdx.gl11.glDrawArrays(GL11.GL_TRIANGLES,0,TRIANGLES * 3);
}
 else {
if (mode > 4) Gdx.gl11.glDrawElements(GL11.GL_TRIANGLES,TRIANGLES * 3,GL11.GL_UNSIGNED_SHORT,ibo.getBuffer());
 else Gdx.gl11.glDrawElements(GL11.GL_TRIANGLES,TRIANGLES * 3,GL11.GL_UNSIGNED_SHORT,0);
}
if (mode == 3) ibo.unbind();
if (mode == 4) ibosd.unbind();
vertexBuffer.unbind();
}
long endTime=TimeUtils.nanoTime();
if (endTime - startTime >= 4000000000l) {
double secs=(endTime - startTime) / 1000000000.0;
double fps=frames / secs;
Gdx.app.log("VBOVATest",vertexBuffer.getClass().getName() + ", " + isStatic+ ", "+ (mode > 2)+ ", "+ fps);
mode++;
if (mode > 5) {
mode=0;
isStatic=!isStatic;
}
startTime=TimeUtils.nanoTime();
frames=0;
}
frames++;
}
