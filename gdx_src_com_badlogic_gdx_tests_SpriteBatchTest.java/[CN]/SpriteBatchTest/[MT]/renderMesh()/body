{
  int srcX=0;
  int srcY=0;
  int srcWidth=16;
  int srcHeight=16;
  float invTexWidth=1.0f / texture.getWidth();
  float invTexHeight=1.0f / texture.getHeight();
  int idx=0;
  Color tint=Color.WHITE;
  for (int i=0; i < coords.length; i+=2) {
    int x=coords[i];
    int y=coords[i + 1];
    float u=srcX * invTexWidth;
    float v=srcY * invTexHeight;
    float u2=(srcX + srcWidth) * invTexWidth;
    float v2=(srcY + srcHeight) * invTexHeight;
    float fx=(float)x;
    float fy=(float)y;
    float fx2=(float)(x + srcWidth);
    float fy2=(float)(y - srcHeight);
    vertices[idx++]=fx;
    vertices[idx++]=fy;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u;
    vertices[idx++]=v;
    vertices[idx++]=fx;
    vertices[idx++]=fy2;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u;
    vertices[idx++]=v2;
    vertices[idx++]=fx2;
    vertices[idx++]=fy2;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u2;
    vertices[idx++]=v2;
    vertices[idx++]=fx2;
    vertices[idx++]=fy2;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u2;
    vertices[idx++]=v2;
    vertices[idx++]=fx2;
    vertices[idx++]=fy;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u2;
    vertices[idx++]=v;
    vertices[idx++]=fx;
    vertices[idx++]=fy;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u;
    vertices[idx++]=v;
  }
  texture.bind();
  mesh.setVertices(vertices);
  mesh.render(GL10.GL_TRIANGLES);
  idx=0;
  for (int i=0; i < coords2.length; i+=2) {
    int x=coords2[i];
    int y=coords2[i + 1];
    float u=srcX * invTexWidth;
    float v=srcY * invTexHeight;
    float u2=(srcX + srcWidth) * invTexWidth;
    float v2=(srcY + srcHeight) * invTexHeight;
    float fx=(float)x;
    float fy=(float)y;
    float fx2=(float)(x + srcWidth);
    float fy2=(float)(y - srcHeight);
    vertices[idx++]=fx;
    vertices[idx++]=fy;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u;
    vertices[idx++]=v;
    vertices[idx++]=fx;
    vertices[idx++]=fy2;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u;
    vertices[idx++]=v2;
    vertices[idx++]=fx2;
    vertices[idx++]=fy2;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u2;
    vertices[idx++]=v2;
    vertices[idx++]=fx2;
    vertices[idx++]=fy2;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u2;
    vertices[idx++]=v2;
    vertices[idx++]=fx2;
    vertices[idx++]=fy;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u2;
    vertices[idx++]=v;
    vertices[idx++]=fx;
    vertices[idx++]=fy;
    vertices[idx++]=tint.r;
    vertices[idx++]=tint.g;
    vertices[idx++]=tint.b;
    vertices[idx++]=tint.a;
    vertices[idx++]=u;
    vertices[idx++]=v;
  }
  texture2.bind();
  mesh.setVertices(vertices);
  mesh.render(GL10.GL_TRIANGLES);
}
