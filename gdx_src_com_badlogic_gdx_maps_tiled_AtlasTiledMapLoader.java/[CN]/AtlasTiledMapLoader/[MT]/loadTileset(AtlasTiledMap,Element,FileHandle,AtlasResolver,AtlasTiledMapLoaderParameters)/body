{
  if (element.getName().equals("tileset")) {
    String name=element.get("name",null);
    int firstgid=element.getIntAttribute("firstgid",1);
    int tilewidth=element.getIntAttribute("tilewidth",0);
    int tileheight=element.getIntAttribute("tileheight",0);
    int spacing=element.getIntAttribute("spacing",0);
    int margin=element.getIntAttribute("margin",0);
    String source=element.getAttribute("source",null);
    String imageSource="";
    int imageWidth=0, imageHeight=0;
    FileHandle image=null;
    if (source != null) {
      FileHandle tsx=getRelativeFileHandle(tmxFile,source);
      try {
        element=xml.parse(tsx);
        name=element.get("name",null);
        tilewidth=element.getIntAttribute("tilewidth",0);
        tileheight=element.getIntAttribute("tileheight",0);
        spacing=element.getIntAttribute("spacing",0);
        margin=element.getIntAttribute("margin",0);
        imageSource=element.getChildByName("image").getAttribute("source");
        imageWidth=element.getChildByName("image").getIntAttribute("width",0);
        imageHeight=element.getChildByName("image").getIntAttribute("height",0);
      }
 catch (      IOException e) {
        throw new GdxRuntimeException("Error parsing external tileset.");
      }
    }
 else {
      imageSource=element.getChildByName("image").getAttribute("source");
      imageWidth=element.getChildByName("image").getIntAttribute("width",0);
      imageHeight=element.getChildByName("image").getIntAttribute("height",0);
    }
    TextureAtlas atlas=null;
    String regionsName="";
    if (map.getProperties().containsKey("atlas_" + name)) {
      FileHandle atlasHandle=getRelativeFileHandle(tmxFile,map.getProperties().get("atlas_" + name,String.class));
      atlasHandle=resolve(atlasHandle.path());
      atlas=resolver.getAtlas(atlasHandle.path());
      regionsName=atlasHandle.nameWithoutExtension();
      if (parameter != null && parameter.forceTextureFilters) {
        for (        Texture texture : atlas.getTextures()) {
          trackedTextures.add(texture);
        }
      }
    }
    TiledMapTileSet tileset=new TiledMapTileSet();
    MapProperties props=tileset.getProperties();
    tileset.setName(name);
    props.put("firstgid",firstgid);
    props.put("imagesource",imageSource);
    props.put("imagewidth",imageWidth);
    props.put("imageheight",imageHeight);
    props.put("tilewidth",tilewidth);
    props.put("tileheight",tileheight);
    props.put("margin",margin);
    props.put("spacing",spacing);
    Array<AtlasRegion> regions=atlas.findRegions(regionsName);
    for (    AtlasRegion region : regions) {
      StaticTiledMapTile tile=new StaticTiledMapTile(region);
      if (region != null) {
        if (!yUp) {
          region.flip(false,true);
        }
        int tileid=firstgid + region.index;
        tile.setId(tileid);
        tileset.putTile(tileid,tile);
      }
    }
    Array<Element> tileElements=element.getChildrenByName("tile");
    for (    Element tileElement : tileElements) {
      int localtid=tileElement.getIntAttribute("id",0);
      TiledMapTile tile=tileset.getTile(firstgid + localtid);
      if (tile != null) {
        Element properties=tileElement.getChildByName("properties");
        if (properties != null) {
          loadProperties(tile.getProperties(),properties);
        }
      }
    }
    Element properties=element.getChildByName("properties");
    if (properties != null) {
      loadProperties(tileset.getProperties(),properties);
    }
    map.getTileSets().addTileSet(tileset);
  }
}
