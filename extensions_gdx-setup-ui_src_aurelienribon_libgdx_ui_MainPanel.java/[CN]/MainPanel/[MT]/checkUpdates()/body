{
  final String version="2.0.0";
  versionLabel.setText("v" + version + " (...)");
  URL tmpUrl;
  try {
    tmpUrl=new URL("http://www.aurelienribon.com/libgdx-setup/config.txt");
  }
 catch (  MalformedURLException ex) {
    throw new RuntimeException(ex);
  }
  final URL url=tmpUrl;
  final ByteArrayOutputStream stream=new ByteArrayOutputStream();
  final HttpUtils.Callback callback=new HttpUtils.Callback(){
    @Override public void canceled(){
    }
    @Override public void updated(    int length,    int totalLength){
    }
    @Override public void completed(){
      try {
        testUpdate(version,stream.toString("UTF-8"));
      }
 catch (      UnsupportedEncodingException ex) {
        System.err.println("[error] " + ex.getMessage());
      }
    }
    @Override public void error(    IOException ex){
      versionLabel.setText("v" + version + " (error1)");
      Style.registerCssClasses(versionLabel,".versionLabelError");
      Style.apply(versionLabel,new Style(Res.getUrl("css/style.css")));
    }
  }
;
  Timer timer=new Timer(2000,new ActionListener(){
    @Override public void actionPerformed(    ActionEvent e){
      HttpUtils.downloadAsync(url,stream,callback);
    }
  }
);
  timer.setRepeats(false);
  timer.start();
}
