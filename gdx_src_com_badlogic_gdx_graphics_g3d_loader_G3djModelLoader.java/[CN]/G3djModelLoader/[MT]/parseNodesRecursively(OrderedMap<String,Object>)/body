{
  ModelNode jsonNode=new ModelNode();
  String id=(String)json.get("id");
  if (id == null)   throw new GdxRuntimeException("Node id missing.");
  jsonNode.id=id;
  Array<Object> translation=(Array<Object>)json.get("translation");
  if (translation != null && translation.size != 3)   throw new GdxRuntimeException("Node translation incomplete");
  jsonNode.translation=translation == null ? null : new Vector3((Float)translation.get(0),(Float)translation.get(1),(Float)translation.get(2));
  Array<Object> rotation=(Array<Object>)json.get("rotation");
  if (rotation != null && rotation.size != 4)   throw new GdxRuntimeException("Node rotation incomplete");
  jsonNode.rotation=rotation == null ? null : new Quaternion((Float)rotation.get(0),(Float)rotation.get(1),(Float)rotation.get(2),(Float)rotation.get(3));
  Array<Object> scale=(Array<Object>)json.get("scale");
  if (scale != null && scale.size != 3)   throw new GdxRuntimeException("Node scale incomplete");
  jsonNode.scale=scale == null ? null : new Vector3((Float)scale.get(0),(Float)scale.get(1),(Float)scale.get(2));
  String meshId=(String)json.get("mesh");
  if (meshId != null)   jsonNode.meshId=meshId;
  Array<OrderedMap<String,Object>> materials=(Array<OrderedMap<String,Object>>)json.get("parts");
  if (materials != null) {
    jsonNode.parts=new ModelNodePart[materials.size];
    int i=0;
    for (    OrderedMap<String,Object> material : materials) {
      ModelNodePart nodePart=new ModelNodePart();
      String meshPartId=(String)material.get("meshpartid");
      String materialId=(String)material.get("materialid");
      if (meshPartId == null || materialId == null) {
        throw new GdxRuntimeException("Node " + id + " part is missing meshPartId or materialId");
      }
      nodePart.materialId=materialId;
      nodePart.meshPartId=meshPartId;
      Array<Object> bones=(Array<Object>)material.get("bones");
      if (bones != null) {
        nodePart.bones=new String[bones.size];
        for (int j=0; j < bones.size; j++)         nodePart.bones[j]=(String)bones.get(j);
      }
      jsonNode.parts[i++]=nodePart;
    }
  }
  Array<OrderedMap<String,Object>> children=(Array<OrderedMap<String,Object>>)json.get("children");
  if (children != null) {
    jsonNode.children=new ModelNode[children.size];
    int i=0;
    for (    OrderedMap<String,Object> child : children) {
      jsonNode.children[i++]=parseNodesRecursively(child);
    }
  }
  return jsonNode;
}
