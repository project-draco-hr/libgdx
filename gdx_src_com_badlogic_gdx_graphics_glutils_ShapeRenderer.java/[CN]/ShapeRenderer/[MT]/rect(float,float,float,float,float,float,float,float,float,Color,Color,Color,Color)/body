{
  check(ShapeType.Line,ShapeType.Filled,8);
  float cos=MathUtils.cosDeg(degrees);
  float sin=MathUtils.sinDeg(degrees);
  float fx=-originX;
  float fy=-originY;
  float fx2=width - originX;
  float fy2=height - originY;
  if (scaleX != 1 || scaleY != 1) {
    fx*=scaleX;
    fy*=scaleY;
    fx2*=scaleX;
    fy2*=scaleY;
  }
  float x1=x + cos * fx + -sin * fy + originX;
  float y1=y + sin * fx + cos * fy + originY;
  float x2=x + cos * fx2 + -sin * fy + originX;
  float y2=y + sin * fx2 + cos * fy + originY;
  float x3=x + cos * fx2 + -sin * fy2 + originX;
  float y3=y + sin * fx2 + cos * fy2 + originY;
  float x4=x + cos * fx + -sin * fy2 + originX;
  float y4=y + sin * fx + cos * fy2 + originY;
  if (shapeType == ShapeType.Line) {
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
    renderer.color(col2.r,col2.g,col2.b,col2.a);
    renderer.vertex(x2,y2,0);
    renderer.color(col2.r,col2.g,col2.b,col2.a);
    renderer.vertex(x2,y2,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col4.r,col4.g,col4.b,col4.a);
    renderer.vertex(x4,y4,0);
    renderer.color(col4.r,col4.g,col4.b,col4.a);
    renderer.vertex(x4,y4,0);
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
  }
 else {
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
    renderer.color(col2.r,col2.g,col2.b,col2.a);
    renderer.vertex(x2,y2,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col4.r,col4.g,col4.b,col4.a);
    renderer.vertex(x4,y4,0);
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
  }
}
