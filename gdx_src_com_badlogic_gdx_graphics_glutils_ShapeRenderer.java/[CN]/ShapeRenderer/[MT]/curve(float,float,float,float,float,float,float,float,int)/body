{
  if (currType != ShapeType.Curve)   throw new GdxRuntimeException("Must call begin(ShapeType.Curve)");
  checkDirty();
  checkFlush(segments * 2 + 2);
  float dx1=cx1 - x1;
  float dy1=cy1 - y1;
  float dx2=cx2 - cx1;
  float dy2=cy2 - cy1;
  float dx3=x2 - cx2;
  float dy3=y2 - cy2;
  float subdiv_step=1f / segments;
  float subdiv_step2=subdiv_step * subdiv_step;
  float subdiv_step3=subdiv_step * subdiv_step * subdiv_step;
  float pre1=3 * subdiv_step;
  float pre2=3 * subdiv_step2;
  float pre4=6 * subdiv_step2;
  float pre5=6 * subdiv_step3;
  float tmp1x=x1 - cx1 * 2 + cx2;
  float tmp1y=y1 - cy1 * 2 + cy2;
  float tmp2x=(cx1 - cx2) * 3 - x1 + x2;
  float tmp2y=(cy1 - cy2) * 3 - y1 + y2;
  float fx=x1;
  float fy=y1;
  float dfx=(cx1 - x1) * pre1 + tmp1x * pre2 + tmp2x * subdiv_step3;
  float dfy=(cy1 - y1) * pre1 + tmp1y * pre2 + tmp2y * subdiv_step3;
  float ddfx=tmp1x * pre4 + tmp2x * pre5;
  float ddfy=tmp1y * pre4 + tmp2y * pre5;
  float dddfx=tmp2x * pre5;
  float dddfy=tmp2y * pre5;
  while (segments-- > 0) {
    renderer.color(color.r,color.g,color.b,color.a);
    renderer.vertex(fx,fy,0);
    fx+=dfx;
    fy+=dfy;
    dfx+=ddfx;
    dfy+=ddfy;
    ddfx+=dddfx;
    ddfy+=dddfy;
    renderer.color(color.r,color.g,color.b,color.a);
    renderer.vertex(fx,fy,0);
  }
  renderer.color(color.r,color.g,color.b,color.a);
  renderer.vertex(fx,fy,0);
  renderer.color(color.r,color.g,color.b,color.a);
  renderer.vertex(x2,y2,0);
}
