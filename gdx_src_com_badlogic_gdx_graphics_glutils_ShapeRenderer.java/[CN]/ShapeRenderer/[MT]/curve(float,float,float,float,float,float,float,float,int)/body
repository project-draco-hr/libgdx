{
  if (currType != ShapeType.Curve)   throw new GdxRuntimeException("Must call begin(ShapeType.Curve)");
  checkDirty();
  checkFlush(segments + 1);
  float dx1=x2 - x1;
  float dy1=y2 - y1;
  float dx2=x3 - x2;
  float dy2=y3 - y2;
  float dx3=x4 - x3;
  float dy3=y4 - y3;
  float subdiv_step=1f / segments;
  float subdiv_step2=subdiv_step * subdiv_step;
  float subdiv_step3=subdiv_step * subdiv_step * subdiv_step;
  float pre1=3 * subdiv_step;
  float pre2=3 * subdiv_step2;
  float pre4=6 * subdiv_step2;
  float pre5=6 * subdiv_step3;
  float tmp1x=x1 - x2 * 2 + x3;
  float tmp1y=y1 - y2 * 2 + y3;
  float tmp2x=(x2 - x3) * 3 - x1 + x4;
  float tmp2y=(y2 - y3) * 3 - y1 + y4;
  float fx=x1;
  float fy=y1;
  float dfx=(x2 - x1) * pre1 + tmp1x * pre2 + tmp2x * subdiv_step3;
  float dfy=(y2 - y1) * pre1 + tmp1y * pre2 + tmp2y * subdiv_step3;
  float ddfx=tmp1x * pre4 + tmp2x * pre5;
  float ddfy=tmp1y * pre4 + tmp2y * pre5;
  float dddfx=tmp2x * pre5;
  float dddfy=tmp2y * pre5;
  renderer.color(color.r,color.g,color.b,color.a);
  renderer.vertex(x1,y1,0);
  while (segments-- > 0) {
    fx+=dfx;
    fy+=dfy;
    dfx+=ddfx;
    dfy+=ddfy;
    ddfx+=dddfx;
    ddfy+=dddfy;
    renderer.color(color.r,color.g,color.b,color.a);
    renderer.vertex(fx,fy,0);
  }
  renderer.color(color.r,color.g,color.b,color.a);
  renderer.vertex(x4,y4,0);
}
