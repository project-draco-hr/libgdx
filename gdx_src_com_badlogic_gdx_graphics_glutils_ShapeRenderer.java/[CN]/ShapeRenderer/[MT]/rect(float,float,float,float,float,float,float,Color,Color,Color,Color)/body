{
  check(ShapeType.Line,ShapeType.Filled,8);
  float cos=MathUtils.cosDeg(degrees);
  float sin=MathUtils.sinDeg(degrees);
  float x1=x + cos * (0 - originX) + -sin * (0 - originY) + originX;
  float y1=y + sin * (0 - originX) + cos * (0 - originY) + originY;
  float x2=x + cos * (width - originX) + -sin * (0 - originY) + originX;
  float y2=y + sin * (width - originX) + cos * (0 - originY) + originY;
  float x3=x + cos * (width - originX) + -sin * (height - originY) + originX;
  float y3=y + sin * (width - originX) + cos * (height - originY) + originY;
  float x4=x + cos * (0 - originX) + -sin * (height - originY) + originX;
  float y4=y + sin * (0 - originX) + cos * (height - originY) + originY;
  if (shapeType == ShapeType.Line) {
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
    renderer.color(col2.r,col2.g,col2.b,col2.a);
    renderer.vertex(x2,y2,0);
    renderer.color(col2.r,col2.g,col2.b,col2.a);
    renderer.vertex(x2,y2,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col4.r,col4.g,col4.b,col4.a);
    renderer.vertex(x4,y4,0);
    renderer.color(col4.r,col4.g,col4.b,col4.a);
    renderer.vertex(x4,y4,0);
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
  }
 else {
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
    renderer.color(col2.r,col2.g,col2.b,col2.a);
    renderer.vertex(x2,y2,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col3.r,col3.g,col3.b,col3.a);
    renderer.vertex(x3,y3,0);
    renderer.color(col4.r,col4.g,col4.b,col4.a);
    renderer.vertex(x4,y4,0);
    renderer.color(col1.r,col1.g,col1.b,col1.a);
    renderer.vertex(x1,y1,0);
  }
}
