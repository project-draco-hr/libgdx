{
  Object[] params=values.toArray();
  Class[] stringParamTypes=new Class[params.length];
  Method method=null;
  try {
    for (int i=0, n=params.length; i < n; i++)     stringParamTypes[i]=String.class;
    method=object.getClass().getMethod(name,stringParamTypes);
  }
 catch (  NoSuchMethodException ignored) {
    try {
      for (int i=0, n=params.length; i < n; i++)       stringParamTypes[i]=CharSequence.class;
      method=object.getClass().getMethod(name,stringParamTypes);
    }
 catch (    NoSuchMethodException ignored2) {
    }
  }
  if (method != null) {
    try {
      method.invoke(object,params);
    }
 catch (    Exception ex) {
      throw new RuntimeException("Error invoking method: " + name,ex);
    }
    return;
  }
  Method[] methods=object.getClass().getMethods();
  outer:   for (int i=0, n=methods.length; i < n; i++) {
    method=methods[i];
    if (!method.getName().equalsIgnoreCase(name))     continue;
    Class[] paramTypes=method.getParameterTypes();
    if (paramTypes.length != values.size())     continue;
    params=values.toArray();
    for (int ii=0, nn=paramTypes.length; ii < nn; ii++) {
      Object value=convertType(object,(String)params[ii],paramTypes[ii],name);
      if (value == null)       continue outer;
      params[ii]=value;
    }
    try {
      method.invoke(object,params);
      return;
    }
 catch (    Exception ex) {
      throw new RuntimeException("Error invoking method: " + name,ex);
    }
  }
  throw new NoSuchMethodException();
}
