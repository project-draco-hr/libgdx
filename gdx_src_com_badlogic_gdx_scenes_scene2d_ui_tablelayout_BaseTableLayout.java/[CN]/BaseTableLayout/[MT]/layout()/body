{
  Toolkit toolkit=this.toolkit;
  ArrayList<Cell> cells=this.cells;
  if (cells.size() > 0 && !cells.get(cells.size() - 1).endRow)   endRow();
  int[] columnMinWidth=new int[columns];
  int[] rowMinHeight=new int[rows];
  int[] columnPrefWidth=new int[columns];
  int[] rowPrefHeight=new int[rows];
  int spaceRightLast=0;
  for (int i=0, n=cells.size(); i < n; i++) {
    Cell c=cells.get(i);
    if (c.ignore)     continue;
    c.padLeftTemp=c.column == 0 ? toolkit.width(this,c.padLeft) : toolkit.width(this,c.padLeft) + Math.max(0,toolkit.width(this,c.spaceLeft) - spaceRightLast);
    c.padTopTemp=c.cellAboveIndex == -1 ? toolkit.height(this,c.padTop) : toolkit.height(this,c.padTop) + Math.max(0,toolkit.height(this,c.spaceTop) - toolkit.height(this,cells.get(c.cellAboveIndex).spaceBottom));
    int spaceRight=toolkit.width(this,c.spaceRight);
    c.padRightTemp=c.column + c.colspan == columns ? toolkit.width(this,c.padRight) : toolkit.width(this,c.padRight) + spaceRight;
    c.padBottomTemp=c.row == rows - 1 ? toolkit.height(this,c.padBottom) : toolkit.height(this,c.padBottom) + toolkit.height(this,c.spaceBottom);
    spaceRightLast=spaceRight;
    int prefWidth=toolkit.getWidgetWidth(this,(C)c.widget,c.prefWidth);
    int prefHeight=toolkit.getWidgetHeight(this,(C)c.widget,c.prefHeight);
    int minWidth=toolkit.getWidgetWidth(this,(C)c.widget,c.minWidth);
    int minHeight=toolkit.getWidgetHeight(this,(C)c.widget,c.minHeight);
    if (prefWidth < minWidth)     prefWidth=minWidth;
    if (prefHeight < minHeight)     prefHeight=minHeight;
    if (c.colspan == 1) {
      int hpadding=c.padLeftTemp + c.padRightTemp;
      columnPrefWidth[c.column]=Math.max(columnPrefWidth[c.column],prefWidth + hpadding);
      columnMinWidth[c.column]=Math.max(columnMinWidth[c.column],minWidth + hpadding);
    }
    int vpadding=c.padTopTemp + c.padBottomTemp;
    rowPrefHeight[c.row]=Math.max(rowPrefHeight[c.row],prefHeight + vpadding);
    rowMinHeight[c.row]=Math.max(rowMinHeight[c.row],minHeight + vpadding);
  }
  tableMinWidth=0;
  tableMinHeight=0;
  tablePrefWidth=0;
  tablePrefHeight=0;
  for (int i=0; i < columns; i++) {
    tableMinWidth+=columnMinWidth[i];
    tablePrefWidth+=columnPrefWidth[i];
  }
  for (int i=0; i < rows; i++) {
    tableMinHeight+=rowMinHeight[i];
    tablePrefHeight+=Math.max(rowMinHeight[i],rowPrefHeight[i]);
  }
  int hpadding=toolkit.width(this,padLeft) + toolkit.width(this,padRight);
  int vpadding=toolkit.height(this,padTop) + toolkit.height(this,padBottom);
  int width=toolkit.width(this,this.width) - hpadding;
  int height=toolkit.height(this,this.height) - vpadding;
  tableMinWidth=Math.max(tableMinWidth + hpadding,width);
  tableMinHeight=Math.max(tableMinHeight + vpadding,height);
  tablePrefWidth=Math.max(tablePrefWidth + hpadding,tableMinWidth);
  tablePrefHeight=Math.max(tablePrefHeight + vpadding,tableMinHeight);
  int[] columnMaxWidth;
  int tableLayoutWidth=this.layoutWidth;
  int totalGrowWidth=tablePrefWidth - tableMinWidth;
  if (totalGrowWidth == 0)   columnMaxWidth=columnMinWidth;
 else {
    int extraWidth=Math.max(0,tableLayoutWidth - tableMinWidth);
    columnMaxWidth=new int[columns];
    for (int i=0; i < columns; i++) {
      int growWidth=columnPrefWidth[i] - columnMinWidth[i];
      float growRatio=growWidth / (float)totalGrowWidth;
      columnMaxWidth[i]=columnMinWidth[i] + (int)(extraWidth * growRatio);
    }
  }
  int[] rowMaxHeight;
  int tableLayoutHeight=this.layoutHeight;
  int totalGrowHeight=tablePrefHeight - tableMinHeight;
  if (totalGrowHeight == 0)   rowMaxHeight=rowMinHeight;
 else {
    int extraHeight=Math.max(0,tableLayoutHeight - tableMinHeight);
    rowMaxHeight=new int[rows];
    for (int i=0; i < rows; i++) {
      int growHeight=rowPrefHeight[i] - rowMinHeight[i];
      float growRatio=growHeight / (float)totalGrowHeight;
      rowMaxHeight[i]=rowMinHeight[i] + (int)(extraHeight * growRatio);
    }
  }
  int[] columnWidth=new int[columns];
  int[] rowHeight=new int[rows];
  float[] expandWidth=new float[columns];
  float[] expandHeight=new float[rows];
  float totalExpandWidth=0, totalExpandHeight=0;
  for (int i=0, n=cells.size(); i < n; i++) {
    Cell c=cells.get(i);
    if (c.ignore)     continue;
    int spannedCellMaxWidth=0;
    for (int column=c.column, nn=column + c.colspan; column < nn; column++) {
      spannedCellMaxWidth+=columnMaxWidth[column];
      if (c.colspan == 1 && c.expandX != 0 && expandWidth[column] == 0) {
        expandWidth[column]=c.expandX / (float)c.colspan;
        totalExpandWidth+=c.expandX / (float)c.colspan;
      }
    }
    spannedCellMaxWidth-=c.padLeftTemp + c.padRightTemp;
    if (c.expandY != 0 && expandHeight[c.row] == 0) {
      expandHeight[c.row]=c.expandY;
      totalExpandHeight+=c.expandY;
    }
    int prefWidth=toolkit.getWidgetWidth(this,(C)c.widget,c.prefWidth);
    int prefHeight=toolkit.getWidgetHeight(this,(C)c.widget,c.prefHeight);
    int minWidth=toolkit.getWidgetWidth(this,(C)c.widget,c.minWidth);
    int minHeight=toolkit.getWidgetHeight(this,(C)c.widget,c.minHeight);
    if (prefWidth < minWidth)     prefWidth=minWidth;
    if (prefHeight < minHeight)     prefHeight=minHeight;
    c.widgetWidth=Math.min(spannedCellMaxWidth,prefWidth);
    c.widgetHeight=Math.min(rowMaxHeight[c.row] - c.padTopTemp - c.padBottomTemp,prefHeight);
    if (c.colspan == 1)     columnWidth[c.column]=Math.max(columnWidth[c.column],c.widgetWidth + c.padLeftTemp + c.padRightTemp);
    rowHeight[c.row]=Math.max(rowHeight[c.row],c.widgetHeight + c.padTopTemp + c.padBottomTemp);
  }
  int uniformMaxWidth=0, uniformMaxHeight=0;
  for (int i=0, n=cells.size(); i < n; i++) {
    Cell c=cells.get(i);
    if (c.ignore)     continue;
    if (c.uniformX != null)     uniformMaxWidth=Math.max(uniformMaxWidth,columnWidth[c.column]);
    if (c.uniformY != null)     uniformMaxHeight=Math.max(uniformMaxHeight,rowHeight[c.row]);
  }
  if (uniformMaxWidth > 0 || uniformMaxHeight > 0) {
    outer:     for (int i=0, n=cells.size(); i < n; i++) {
      Cell c=cells.get(i);
      if (c.ignore)       continue;
      if (uniformMaxWidth > 0 && c.uniformX != null) {
        int diff=uniformMaxWidth - columnWidth[c.column];
        if (diff > 0) {
          columnWidth[c.column]=uniformMaxWidth;
          tableMinWidth+=diff;
          tablePrefWidth+=diff;
        }
      }
      if (uniformMaxHeight > 0 && c.uniformY != null) {
        int diff=uniformMaxHeight - rowHeight[c.row];
        if (diff > 0) {
          rowHeight[c.row]=uniformMaxHeight;
          tableMinHeight+=diff;
          tablePrefHeight+=diff;
        }
      }
      continue outer;
    }
  }
  if (totalExpandWidth > 0) {
    int extra=Math.max(0,tableLayoutWidth - tablePrefWidth);
    int used=0, lastIndex=0;
    for (int i=0; i < columns; i++) {
      if (expandWidth[i] == 0)       continue;
      int amount=(int)(extra * expandWidth[i] / totalExpandWidth);
      columnWidth[i]+=amount;
      used+=amount;
      lastIndex=i;
    }
    columnWidth[lastIndex]+=extra - used;
  }
  if (totalExpandHeight > 0) {
    int extra=Math.max(0,tableLayoutHeight - tablePrefHeight);
    int used=0, lastIndex=0;
    for (int i=0; i < rows; i++) {
      if (expandHeight[i] == 0)       continue;
      int amount=(int)(extra * expandHeight[i] / totalExpandHeight);
      rowHeight[i]+=amount;
      used+=amount;
      lastIndex=i;
    }
    rowHeight[lastIndex]+=extra - used;
  }
  for (int i=0, n=cells.size(); i < n; i++) {
    Cell c=cells.get(i);
    if (c.ignore)     continue;
    if (c.colspan == 1)     continue;
    int minWidth=toolkit.getWidgetWidth(this,(C)c.widget,c.minWidth);
    int spannedCellWidth=0;
    for (int column=c.column, nn=column + c.colspan; column < nn; column++)     spannedCellWidth+=columnWidth[column];
    int extraWidth=Math.max(0,minWidth - spannedCellWidth) / c.colspan;
    for (int column=c.column, nn=column + c.colspan; column < nn; column++)     columnWidth[column]+=extraWidth;
    c.widgetWidth=Math.max(c.widgetWidth,minWidth - (c.padLeftTemp + c.padRightTemp));
  }
  int tableWidth=0, tableHeight=0;
  for (int i=0; i < columns; i++)   tableWidth+=columnWidth[i];
  tableWidth=Math.max(tableWidth + hpadding,width);
  for (int i=0; i < rows; i++)   tableHeight+=rowHeight[i];
  tableHeight=Math.max(tableHeight + vpadding,height);
  int x=layoutX + toolkit.width(this,padLeft);
  if ((align & RIGHT) != 0)   x+=tableLayoutWidth - tableWidth;
 else   if ((align & LEFT) == 0)   x+=(tableLayoutWidth - tableWidth) / 2;
  int y=layoutY + toolkit.height(this,padTop);
  if ((align & BOTTOM) != 0)   y+=tableLayoutHeight - tableHeight;
 else   if ((align & TOP) == 0)   y+=(tableLayoutHeight - tableHeight) / 2;
  int currentX=x;
  int currentY=y;
  for (int i=0, n=cells.size(); i < n; i++) {
    Cell c=cells.get(i);
    if (c.ignore)     continue;
    int spannedCellWidth=0;
    for (int column=c.column, nn=column + c.colspan; column < nn; column++)     spannedCellWidth+=columnWidth[column];
    spannedCellWidth-=c.padLeftTemp + c.padRightTemp;
    currentX+=c.padLeftTemp;
    if (c.fillX > 0) {
      c.widgetWidth=(int)(spannedCellWidth * c.fillX);
      int maxWidth=toolkit.getWidgetWidth(this,(C)c.widget,c.maxWidth);
      if (maxWidth > 0)       c.widgetWidth=Math.min(c.widgetWidth,maxWidth);
    }
    if (c.fillY > 0) {
      c.widgetHeight=(int)(rowHeight[c.row] * c.fillY) - c.padTopTemp - c.padBottomTemp;
      int maxHeight=toolkit.getWidgetHeight(this,(C)c.widget,c.maxHeight);
      if (maxHeight > 0)       c.widgetHeight=Math.min(c.widgetHeight,maxHeight);
    }
    if ((c.align & LEFT) != 0)     c.widgetX=currentX;
 else     if ((c.align & RIGHT) != 0)     c.widgetX=currentX + spannedCellWidth - c.widgetWidth;
 else     c.widgetX=currentX + (spannedCellWidth - c.widgetWidth) / 2;
    if ((c.align & TOP) != 0)     c.widgetY=currentY + c.padTopTemp;
 else     if ((c.align & BOTTOM) != 0)     c.widgetY=currentY + rowHeight[c.row] - c.widgetHeight - c.padBottomTemp;
 else     c.widgetY=currentY + (rowHeight[c.row] - c.widgetHeight + c.padTopTemp - c.padBottomTemp) / 2;
    if (c.endRow) {
      currentX=x;
      currentY+=rowHeight[c.row];
    }
 else     currentX+=spannedCellWidth + c.padRightTemp;
  }
  if (debug == DEBUG_NONE)   return;
  toolkit.clearDebugRectangles(this);
  currentX=x;
  currentY=y;
  if ((debug & DEBUG_TABLE) != 0 || (debug & DEBUG_ALL) != 0) {
    toolkit.addDebugRectangle(this,DEBUG_TABLE,layoutX,layoutY,tableLayoutWidth,tableLayoutHeight);
    toolkit.addDebugRectangle(this,DEBUG_TABLE,x,y,tableWidth - hpadding,tableHeight - vpadding);
  }
  for (int i=0, n=cells.size(); i < n; i++) {
    Cell c=cells.get(i);
    if (c.ignore)     continue;
    if ((debug & DEBUG_WIDGET) != 0 || (debug & DEBUG_ALL) != 0)     toolkit.addDebugRectangle(this,DEBUG_WIDGET,c.widgetX,c.widgetY,c.widgetWidth,c.widgetHeight);
    int spannedCellWidth=0;
    for (int column=c.column, nn=column + c.colspan; column < nn; column++)     spannedCellWidth+=columnWidth[column];
    spannedCellWidth-=c.padLeftTemp + c.padRightTemp;
    currentX+=c.padLeftTemp;
    if ((debug & DEBUG_CELL) != 0 || (debug & DEBUG_ALL) != 0) {
      toolkit.addDebugRectangle(this,DEBUG_CELL,currentX,currentY + c.padTopTemp,spannedCellWidth,rowHeight[c.row] - c.padTopTemp - c.padBottomTemp);
    }
    if (c.endRow) {
      currentX=x;
      currentY+=rowHeight[c.row];
    }
 else     currentX+=spannedCellWidth + c.padRightTemp;
  }
}
