{
  if (m_frequencyHz > 0.0f) {
    return true;
  }
  final Rot qA=pool.popRot();
  final Rot qB=pool.popRot();
  final Vec2 rA=pool.popVec2();
  final Vec2 rB=pool.popVec2();
  final Vec2 u=pool.popVec2();
  Vec2 cA=data.positions[m_indexA].c;
  float aA=data.positions[m_indexA].a;
  Vec2 cB=data.positions[m_indexB].c;
  float aB=data.positions[m_indexB].a;
  qA.set(aA);
  qB.set(aB);
  Rot.mulToOutUnsafe(qA,u.set(m_localAnchorA).subLocal(m_localCenterA),rA);
  Rot.mulToOutUnsafe(qB,u.set(m_localAnchorB).subLocal(m_localCenterB),rB);
  u.set(cB).addLocal(rB).subLocal(cA).subLocal(rA);
  float length=u.normalize();
  float C=length - m_length;
  C=MathUtils.clamp(C,-Settings.maxLinearCorrection,Settings.maxLinearCorrection);
  float impulse=-m_mass * C;
  float Px=impulse * u.x;
  float Py=impulse * u.y;
  cA.x-=m_invMassA * Px;
  cA.y-=m_invMassA * Py;
  aA-=m_invIA * (rA.x * Py - rA.y * Px);
  cB.x+=m_invMassB * Px;
  cB.y+=m_invMassB * Py;
  aB+=m_invIB * (rB.x * Py - rB.y * Px);
  data.positions[m_indexA].c.set(cA);
  data.positions[m_indexA].a=aA;
  data.positions[m_indexB].c.set(cB);
  data.positions[m_indexB].a=aB;
  pool.pushVec2(3);
  pool.pushRot(2);
  return MathUtils.abs(C) < Settings.linearSlop;
}
