{
  update();
  facing90.set(factory.facing);
  facing90.rotate(90).nor();
  float angle=Math.min(1,Math.max(0,norm(scale_angle(factory.resourceAmount),0,0.25f)));
  fade=Math.min(MathUtils.PI,fade + (Gdx.graphics.getDeltaTime()));
  if (fade == MathUtils.PI)   fade=0;
  production_tile1.setOrigin(0,0);
  production_tile1.setColor(angle,angle,angle,angle);
  production_tile1.setRotation(factory.facing.angle());
  production_tile1.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
  production_tile1.draw(spriteBatch);
  angle=Math.min(1,Math.max(0,norm(scale_angle(factory.resourceAmount),0.25f,0.5f)));
  production_tile2.setOrigin(0,0);
  production_tile2.setColor(angle,angle,angle,angle);
  production_tile2.setRotation(factory.facing.angle());
  production_tile2.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
  production_tile2.draw(spriteBatch);
  angle=Math.min(1,Math.max(0,norm(scale_angle(factory.resourceAmount),0.5f,0.75f)));
  production_tile3.setOrigin(0,0);
  production_tile3.setColor(angle,angle,angle,angle);
  production_tile3.setRotation(factory.facing.angle());
  production_tile3.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
  production_tile3.draw(spriteBatch);
  angle=Math.min(1,Math.max(0,norm(scale_angle(factory.resourceAmount),0.75f,1f)));
  production_tile4.setOrigin(0,0);
  production_tile4.setColor(angle,angle,angle,angle);
  production_tile4.setRotation(factory.facing.angle());
  production_tile4.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
  production_tile4.draw(spriteBatch);
  angle=scale_angle(potential_cost);
  if (angle == 0) {
    if (needle_angle > 0 || needle_velocity < 0) {
      needle_velocity=Math.min(needle_velocity + 0.2f * Gdx.graphics.getDeltaTime(),0.025f);
      needle_angle=Math.max(needle_angle - needle_velocity,0);
      if (needle_angle == 0) {
        needle_velocity*=Math.pow(-0.475f,Gdx.graphics.getDeltaTime());
      }
    }
  }
 else {
    needle_velocity=0;
    needle_angle=angle;
  }
  needle.setOrigin(0,0);
  needle.setPosition(factory.collisionCenter.x - (2 * factory.facing.x) - (-2 * facing90.x),factory.collisionCenter.y - (2 * factory.facing.y) - (-2 * facing90.y));
  needle.setRotation(factory.facing.angle() + ((-needle_angle) * 360) - 90);
  needle.draw(spriteBatch);
  production2.setOrigin(0,0);
  production2.setRotation(factory.facing.angle());
  production2.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
  production2.draw(spriteBatch);
  production3.setOrigin(0,0);
  production3.setRotation(factory.facing.angle());
  production3.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
  production3.draw(spriteBatch);
  if (factory.button_held) {
    if (potential_cost > upgradeCost) {
      upgrade_outline.setOrigin(0,0);
      upgrade_outline.setRotation(factory.facing.angle());
      upgrade_outline.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
      upgrade_outline.draw(spriteBatch);
      currentBuildingUnit=3;
    }
 else     if (potential_cost > frigateCost) {
      frigate_outline.setOrigin(0,0);
      frigate_outline.setRotation(factory.facing.angle());
      frigate_outline.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
      frigate_outline.draw(spriteBatch);
      currentBuildingUnit=2;
    }
 else     if (potential_cost > bomberCost) {
      bomber_outline.setOrigin(0,0);
      bomber_outline.setRotation(factory.facing.angle());
      bomber_outline.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
      bomber_outline.draw(spriteBatch);
      currentBuildingUnit=1;
    }
 else     if (potential_cost > fighterCost) {
      fighter_outline.setOrigin(0,0);
      fighter_outline.setRotation(factory.facing.angle());
      fighter_outline.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
      fighter_outline.draw(spriteBatch);
      currentBuildingUnit=0;
    }
 else {
      currentBuildingUnit=-1;
    }
  }
 else {
    currentBuildingUnit=-1;
    float health=factory.healthPercentage();
    if (health < Constants.lowHealthThreshold) {
      float factor=health / Constants.lowHealthThreshold;
      health_none.setOrigin(0,0);
      health_none.setRotation(factory.facing.angle());
      health_none.setColor(1,factor * 0.3f,factor * 0.3f,1);
      health_none.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
      health_none.draw(spriteBatch);
    }
 else     if (health < Constants.highHealthThreshold) {
      float factor=(health - Constants.lowHealthThreshold) / (Constants.highHealthThreshold - Constants.lowHealthThreshold);
      health_some.setOrigin(0,0);
      health_some.setRotation(factory.facing.angle());
      health_some.setColor(1,factor * 0.7f + 0.3f,factor * 0.2f + 0.3f,1);
      health_some.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
      health_some.draw(spriteBatch);
    }
 else {
      float factor=(health - Constants.highHealthThreshold) / (1 - Constants.highHealthThreshold);
      health_full.setOrigin(0,0);
      health_full.setRotation(factory.facing.angle());
      health_full.setColor((1 - factor) * 0.3f + 0.7f,1,factor * 0.4f + 0.6f,1);
      health_full.setPosition(factory.collisionCenter.x - (35 * factory.facing.x) - (32 * facing90.x),factory.collisionCenter.y - (35 * factory.facing.y) - (32 * facing90.y));
      health_full.draw(spriteBatch);
    }
  }
}
