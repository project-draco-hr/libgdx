{
  for (int vertexOffset=2, k=0; vertexOffset < vertices.length; vertexOffset+=4) {
    finalVertex.x=finalVertex.y=finalVertex.z=0;
    int weightOffset=(int)vertices[vertexOffset];
    int weightCount=(int)vertices[vertexOffset + 1];
    weightOffset=(weightOffset << 2) + weightOffset;
    for (int j=0; j < weightCount; j++) {
      int jointOffset=(int)weights[weightOffset++] << 3;
      float bias=weights[weightOffset++];
      float vx=weights[weightOffset++], vy=weights[weightOffset++], vz=weights[weightOffset++];
      float qx=skeleton.joints[jointOffset + 4], qy=skeleton.joints[jointOffset + 5], qz=skeleton.joints[jointOffset + 6], qw=skeleton.joints[jointOffset + 7];
      float ix=-qx, iy=-qy, iz=-qz, iw=qw;
      float tw=-qx * vx - qy * vy - qz * vz;
      float tx=qw * vx + qy * vz - qz * vy;
      float ty=qw * vy + qz * vx - qx * vz;
      float tz=qw * vz + qx * vy - qy * vx;
      vx=tx * iw + tw * ix + ty * iz - tz * iy;
      vy=ty * iw + tw * iy + tz * ix - tx * iz;
      vz=tz * iw + tw * iz + tx * iy - ty * ix;
      finalVertex.x+=(skeleton.joints[jointOffset + 1] + vx) * bias;
      finalVertex.y+=(skeleton.joints[jointOffset + 2] + vy) * bias;
      finalVertex.z+=(skeleton.joints[jointOffset + 3] + vz) * bias;
    }
    verts[k++]=finalVertex.x;
    verts[k++]=finalVertex.y;
    verts[k++]=finalVertex.z;
    k+=2;
  }
}
