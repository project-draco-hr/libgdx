{
  final Rot qA=pool.popRot();
  final Rot qB=pool.popRot();
  final Vec2 rA=pool.popVec2();
  final Vec2 rB=pool.popVec2();
  final Vec2 d=pool.popVec2();
  final Vec2 axis=pool.popVec2();
  final Vec2 perp=pool.popVec2();
  final Vec2 temp=pool.popVec2();
  final Vec2 C1=pool.popVec2();
  final Vec3 impulse=pool.popVec3();
  Vec2 cA=data.positions[m_indexA].c;
  float aA=data.positions[m_indexA].a;
  Vec2 cB=data.positions[m_indexB].c;
  float aB=data.positions[m_indexB].a;
  qA.set(aA);
  qB.set(aB);
  float mA=m_invMassA, mB=m_invMassB;
  float iA=m_invIA, iB=m_invIB;
  Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_localCenterA),rA);
  Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_localCenterB),rB);
  d.set(cB).addLocal(rB).subLocal(cA).subLocal(rA);
  Rot.mulToOutUnsafe(qA,m_localXAxisA,axis);
  float a1=Vec2.cross(temp.set(d).addLocal(rA),axis);
  float a2=Vec2.cross(rB,axis);
  Rot.mulToOutUnsafe(qA,m_localYAxisA,perp);
  float s1=Vec2.cross(temp.set(d).addLocal(rA),perp);
  float s2=Vec2.cross(rB,perp);
  C1.x=Vec2.dot(perp,d);
  C1.y=aB - aA - m_referenceAngle;
  float linearError=MathUtils.abs(C1.x);
  float angularError=MathUtils.abs(C1.y);
  boolean active=false;
  float C2=0.0f;
  if (m_enableLimit) {
    float translation=Vec2.dot(axis,d);
    if (MathUtils.abs(m_upperTranslation - m_lowerTranslation) < 2.0f * Settings.linearSlop) {
      C2=MathUtils.clamp(translation,-Settings.maxLinearCorrection,Settings.maxLinearCorrection);
      linearError=MathUtils.max(linearError,MathUtils.abs(translation));
      active=true;
    }
 else     if (translation <= m_lowerTranslation) {
      C2=MathUtils.clamp(translation - m_lowerTranslation + Settings.linearSlop,-Settings.maxLinearCorrection,0.0f);
      linearError=MathUtils.max(linearError,m_lowerTranslation - translation);
      active=true;
    }
 else     if (translation >= m_upperTranslation) {
      C2=MathUtils.clamp(translation - m_upperTranslation - Settings.linearSlop,0.0f,Settings.maxLinearCorrection);
      linearError=MathUtils.max(linearError,translation - m_upperTranslation);
      active=true;
    }
  }
  if (active) {
    float k11=mA + mB + iA * s1 * s1 + iB * s2 * s2;
    float k12=iA * s1 + iB * s2;
    float k13=iA * s1 * a1 + iB * s2 * a2;
    float k22=iA + iB;
    if (k22 == 0.0f) {
      k22=1.0f;
    }
    float k23=iA * a1 + iB * a2;
    float k33=mA + mB + iA * a1 * a1 + iB * a2 * a2;
    final Mat33 K=pool.popMat33();
    K.ex.set(k11,k12,k13);
    K.ey.set(k12,k22,k23);
    K.ez.set(k13,k23,k33);
    final Vec3 C=pool.popVec3();
    C.x=C1.x;
    C.y=C1.y;
    C.z=C2;
    K.solve33ToOut(C.negateLocal(),impulse);
    pool.pushVec3(1);
    pool.pushMat33(1);
  }
 else {
    float k11=mA + mB + iA * s1 * s1 + iB * s2 * s2;
    float k12=iA * s1 + iB * s2;
    float k22=iA + iB;
    if (k22 == 0.0f) {
      k22=1.0f;
    }
    final Mat22 K=pool.popMat22();
    K.ex.set(k11,k12);
    K.ey.set(k12,k22);
    K.solveToOut(C1.negateLocal(),temp);
    C1.negateLocal();
    impulse.x=temp.x;
    impulse.y=temp.y;
    impulse.z=0.0f;
    pool.pushMat22(1);
  }
  float Px=impulse.x * perp.x + impulse.z * axis.x;
  float Py=impulse.x * perp.y + impulse.z * axis.y;
  float LA=impulse.x * s1 + impulse.y + impulse.z * a1;
  float LB=impulse.x * s2 + impulse.y + impulse.z * a2;
  cA.x-=mA * Px;
  cA.y-=mA * Py;
  aA-=iA * LA;
  cB.x+=mB * Px;
  cB.y+=mB * Py;
  aB+=iB * LB;
  data.positions[m_indexA].c.set(cA);
  data.positions[m_indexA].a=aA;
  data.positions[m_indexB].c.set(cB);
  data.positions[m_indexB].a=aB;
  pool.pushVec2(7);
  pool.pushVec3(1);
  pool.pushRot(2);
  return linearError <= Settings.linearSlop && angularError <= Settings.angularSlop;
}
