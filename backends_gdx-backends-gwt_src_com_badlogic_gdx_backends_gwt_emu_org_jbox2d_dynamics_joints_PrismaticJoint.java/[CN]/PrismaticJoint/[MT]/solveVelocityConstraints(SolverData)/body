{
  Vec2 vA=data.velocities[m_indexA].v;
  float wA=data.velocities[m_indexA].w;
  Vec2 vB=data.velocities[m_indexB].v;
  float wB=data.velocities[m_indexB].w;
  float mA=m_invMassA, mB=m_invMassB;
  float iA=m_invIA, iB=m_invIB;
  final Vec2 temp=pool.popVec2();
  if (m_enableMotor && m_limitState != LimitState.EQUAL) {
    temp.set(vB).subLocal(vA);
    float Cdot=Vec2.dot(m_axis,temp) + m_a2 * wB - m_a1 * wA;
    float impulse=m_motorMass * (m_motorSpeed - Cdot);
    float oldImpulse=m_motorImpulse;
    float maxImpulse=data.step.dt * m_maxMotorForce;
    m_motorImpulse=MathUtils.clamp(m_motorImpulse + impulse,-maxImpulse,maxImpulse);
    impulse=m_motorImpulse - oldImpulse;
    final Vec2 P=pool.popVec2();
    P.set(m_axis).mulLocal(impulse);
    float LA=impulse * m_a1;
    float LB=impulse * m_a2;
    vA.x-=mA * P.x;
    vA.y-=mA * P.y;
    wA-=iA * LA;
    vB.x+=mB * P.x;
    vB.y+=mB * P.y;
    wB+=iB * LB;
    pool.pushVec2(1);
  }
  final Vec2 Cdot1=pool.popVec2();
  temp.set(vB).subLocal(vA);
  Cdot1.x=Vec2.dot(m_perp,temp) + m_s2 * wB - m_s1 * wA;
  Cdot1.y=wB - wA;
  if (m_enableLimit && m_limitState != LimitState.INACTIVE) {
    float Cdot2;
    temp.set(vB).subLocal(vA);
    Cdot2=Vec2.dot(m_axis,temp) + m_a2 * wB - m_a1 * wA;
    final Vec3 Cdot=pool.popVec3();
    Cdot.set(Cdot1.x,Cdot1.y,Cdot2);
    final Vec3 f1=pool.popVec3();
    final Vec3 df=pool.popVec3();
    f1.set(m_impulse);
    m_K.solve33ToOut(Cdot.negateLocal(),df);
    m_impulse.addLocal(df);
    if (m_limitState == LimitState.AT_LOWER) {
      m_impulse.z=MathUtils.max(m_impulse.z,0.0f);
    }
 else     if (m_limitState == LimitState.AT_UPPER) {
      m_impulse.z=MathUtils.min(m_impulse.z,0.0f);
    }
    final Vec2 b=pool.popVec2();
    final Vec2 f2r=pool.popVec2();
    temp.set(m_K.ez.x,m_K.ez.y).mulLocal(m_impulse.z - f1.z);
    b.set(Cdot1).negateLocal().subLocal(temp);
    m_K.solve22ToOut(b,f2r);
    f2r.addLocal(f1.x,f1.y);
    m_impulse.x=f2r.x;
    m_impulse.y=f2r.y;
    df.set(m_impulse).subLocal(f1);
    final Vec2 P=pool.popVec2();
    temp.set(m_axis).mulLocal(df.z);
    P.set(m_perp).mulLocal(df.x).addLocal(temp);
    float LA=df.x * m_s1 + df.y + df.z * m_a1;
    float LB=df.x * m_s2 + df.y + df.z * m_a2;
    vA.x-=mA * P.x;
    vA.y-=mA * P.y;
    wA-=iA * LA;
    vB.x+=mB * P.x;
    vB.y+=mB * P.y;
    wB+=iB * LB;
    pool.pushVec2(3);
    pool.pushVec3(3);
  }
 else {
    final Vec2 df=pool.popVec2();
    m_K.solve22ToOut(Cdot1.negateLocal(),df);
    Cdot1.negateLocal();
    m_impulse.x+=df.x;
    m_impulse.y+=df.y;
    final Vec2 P=pool.popVec2();
    P.set(m_perp).mulLocal(df.x);
    float LA=df.x * m_s1 + df.y;
    float LB=df.x * m_s2 + df.y;
    vA.x-=mA * P.x;
    vA.y-=mA * P.y;
    wA-=iA * LA;
    vB.x+=mB * P.x;
    vB.y+=mB * P.y;
    wB+=iB * LB;
    pool.pushVec2(2);
  }
  data.velocities[m_indexA].w=wA;
  data.velocities[m_indexB].w=wB;
  pool.pushVec2(2);
}
