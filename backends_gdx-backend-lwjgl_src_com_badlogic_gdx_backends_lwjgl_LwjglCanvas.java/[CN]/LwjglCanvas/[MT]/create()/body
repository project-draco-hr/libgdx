{
  try {
    graphics.setupDisplay();
    listener.create();
    listener.resize(Math.max(1,graphics.getWidth()),Math.max(1,graphics.getHeight()));
    start();
  }
 catch (  Exception ex) {
    stopped();
    exception(ex);
    return;
  }
  EventQueue.invokeLater(new Runnable(){
    int lastWidth=Math.max(1,graphics.getWidth());
    int lastHeight=Math.max(1,graphics.getHeight());
    public void run(){
      if (!running || Display.isCloseRequested()) {
        running=false;
        stopped();
        return;
      }
      try {
        graphics.updateTime();
        int width=Math.max(1,graphics.getWidth());
        int height=Math.max(1,graphics.getHeight());
        if (lastWidth != width || lastHeight != height) {
          lastWidth=width;
          lastHeight=height;
          Gdx.gl.glViewport(0,0,lastWidth,lastHeight);
          resize(width,height);
          listener.resize(width,height);
        }
synchronized (runnables) {
          executedRunnables.clear();
          executedRunnables.addAll(runnables);
          runnables.clear();
          for (int i=0; i < executedRunnables.size(); i++) {
            try {
              executedRunnables.get(i).run();
            }
 catch (            Throwable t) {
              t.printStackTrace();
            }
          }
        }
        input.update();
        input.processEvents();
        listener.render();
        if (audio != null)         audio.update();
        Display.update();
        canvas.setCursor(cursor);
        if (graphics.vsync)         Display.sync(60);
      }
 catch (      Throwable ex) {
        exception(ex);
      }
      EventQueue.invokeLater(this);
    }
  }
);
}
