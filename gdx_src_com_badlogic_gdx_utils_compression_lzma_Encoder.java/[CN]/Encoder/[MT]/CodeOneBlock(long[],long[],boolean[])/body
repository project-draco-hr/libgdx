{
  inSize[0]=0;
  outSize[0]=0;
  finished[0]=true;
  if (_inStream != null) {
    _matchFinder.SetStream(_inStream);
    _matchFinder.Init();
    _needReleaseMFStream=true;
    _inStream=null;
  }
  if (_finished)   return;
  _finished=true;
  long progressPosValuePrev=nowPos64;
  if (nowPos64 == 0) {
    if (_matchFinder.GetNumAvailableBytes() == 0) {
      Flush((int)nowPos64);
      return;
    }
    ReadMatchDistances();
    int posState=(int)(nowPos64) & _posStateMask;
    _rangeEncoder.Encode(_isMatch,(_state << Base.kNumPosStatesBitsMax) + posState,0);
    _state=Base.StateUpdateChar(_state);
    byte curByte=_matchFinder.GetIndexByte(0 - _additionalOffset);
    _literalEncoder.GetSubCoder((int)(nowPos64),_previousByte).Encode(_rangeEncoder,curByte);
    _previousByte=curByte;
    _additionalOffset--;
    nowPos64++;
  }
  if (_matchFinder.GetNumAvailableBytes() == 0) {
    Flush((int)nowPos64);
    return;
  }
  while (true) {
    int len=GetOptimum((int)nowPos64);
    int pos=backRes;
    int posState=((int)nowPos64) & _posStateMask;
    int complexState=(_state << Base.kNumPosStatesBitsMax) + posState;
    if (len == 1 && pos == -1) {
      _rangeEncoder.Encode(_isMatch,complexState,0);
      byte curByte=_matchFinder.GetIndexByte((int)(0 - _additionalOffset));
      LiteralEncoder.Encoder2 subCoder=_literalEncoder.GetSubCoder((int)nowPos64,_previousByte);
      if (!Base.StateIsCharState(_state)) {
        byte matchByte=_matchFinder.GetIndexByte((int)(0 - _repDistances[0] - 1- _additionalOffset));
        subCoder.EncodeMatched(_rangeEncoder,matchByte,curByte);
      }
 else       subCoder.Encode(_rangeEncoder,curByte);
      _previousByte=curByte;
      _state=Base.StateUpdateChar(_state);
    }
 else {
      _rangeEncoder.Encode(_isMatch,complexState,1);
      if (pos < Base.kNumRepDistances) {
        _rangeEncoder.Encode(_isRep,_state,1);
        if (pos == 0) {
          _rangeEncoder.Encode(_isRepG0,_state,0);
          if (len == 1)           _rangeEncoder.Encode(_isRep0Long,complexState,0);
 else           _rangeEncoder.Encode(_isRep0Long,complexState,1);
        }
 else {
          _rangeEncoder.Encode(_isRepG0,_state,1);
          if (pos == 1)           _rangeEncoder.Encode(_isRepG1,_state,0);
 else {
            _rangeEncoder.Encode(_isRepG1,_state,1);
            _rangeEncoder.Encode(_isRepG2,_state,pos - 2);
          }
        }
        if (len == 1)         _state=Base.StateUpdateShortRep(_state);
 else {
          _repMatchLenEncoder.Encode(_rangeEncoder,len - Base.kMatchMinLen,posState);
          _state=Base.StateUpdateRep(_state);
        }
        int distance=_repDistances[pos];
        if (pos != 0) {
          for (int i=pos; i >= 1; i--)           _repDistances[i]=_repDistances[i - 1];
          _repDistances[0]=distance;
        }
      }
 else {
        _rangeEncoder.Encode(_isRep,_state,0);
        _state=Base.StateUpdateMatch(_state);
        _lenEncoder.Encode(_rangeEncoder,len - Base.kMatchMinLen,posState);
        pos-=Base.kNumRepDistances;
        int posSlot=GetPosSlot(pos);
        int lenToPosState=Base.GetLenToPosState(len);
        _posSlotEncoder[lenToPosState].Encode(_rangeEncoder,posSlot);
        if (posSlot >= Base.kStartPosModelIndex) {
          int footerBits=(int)((posSlot >> 1) - 1);
          int baseVal=((2 | (posSlot & 1)) << footerBits);
          int posReduced=pos - baseVal;
          if (posSlot < Base.kEndPosModelIndex)           BitTreeEncoder.ReverseEncode(_posEncoders,baseVal - posSlot - 1,_rangeEncoder,footerBits,posReduced);
 else {
            _rangeEncoder.EncodeDirectBits(posReduced >> Base.kNumAlignBits,footerBits - Base.kNumAlignBits);
            _posAlignEncoder.ReverseEncode(_rangeEncoder,posReduced & Base.kAlignMask);
            _alignPriceCount++;
          }
        }
        int distance=pos;
        for (int i=Base.kNumRepDistances - 1; i >= 1; i--)         _repDistances[i]=_repDistances[i - 1];
        _repDistances[0]=distance;
        _matchPriceCount++;
      }
      _previousByte=_matchFinder.GetIndexByte(len - 1 - _additionalOffset);
    }
    _additionalOffset-=len;
    nowPos64+=len;
    if (_additionalOffset == 0) {
      if (_matchPriceCount >= (1 << 7))       FillDistancesPrices();
      if (_alignPriceCount >= Base.kAlignTableSize)       FillAlignPrices();
      inSize[0]=nowPos64;
      outSize[0]=_rangeEncoder.GetProcessedSizeAdd();
      if (_matchFinder.GetNumAvailableBytes() == 0) {
        Flush((int)nowPos64);
        return;
      }
      if (nowPos64 - progressPosValuePrev >= (1 << 12)) {
        _finished=false;
        finished[0]=false;
        return;
      }
    }
  }
}
