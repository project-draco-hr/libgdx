{
switch (read1(in)) {
case 'Z':
    return Boolean.valueOf(Singleton.getInt(pool,read2(in) - 1) != 0);
case 'B':
  return Byte.valueOf((byte)Singleton.getInt(pool,read2(in) - 1));
case 'C':
return Character.valueOf((char)Singleton.getInt(pool,read2(in) - 1));
case 'S':
return Short.valueOf((short)Singleton.getInt(pool,read2(in) - 1));
case 'I':
return Integer.valueOf(Singleton.getInt(pool,read2(in) - 1));
case 'F':
return Float.valueOf(Float.intBitsToFloat(Singleton.getInt(pool,read2(in) - 1)));
case 'J':
{
return Long.valueOf(Singleton.getLong(pool,read2(in) - 1));
}
case 'D':
{
return Double.valueOf(Double.longBitsToDouble(Singleton.getLong(pool,read2(in) - 1)));
}
case 's':
{
byte[] data=(byte[])Singleton.getObject(pool,read2(in) - 1);
return new String(data,0,data.length - 1);
}
case 'e':
{
byte[] typeName=(byte[])Singleton.getObject(pool,read2(in) - 1);
byte[] name=(byte[])Singleton.getObject(pool,read2(in) - 1);
return Enum.valueOf(SystemClassLoader.getClass(loadVMClass(loader,typeName,1,typeName.length - 3)),new String(name,0,name.length - 1));
}
case 'c':
{
byte[] name=(byte[])Singleton.getObject(pool,read2(in) - 1);
return SystemClassLoader.getClass(loadVMClass(loader,name,1,name.length - 3));
}
case '@':
return parseAnnotation(loader,pool,in);
case '[':
{
Object[] array=new Object[read2(in)];
for (int i=0; i < array.length; ++i) {
array[i]=parseAnnotationValue(loader,pool,in);
}
return array;
}
default :
throw new AssertionError();
}
}
