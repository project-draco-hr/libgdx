{
  if (value instanceof ObjectMap) {
    ObjectMap<String,Object> map=(ObjectMap)value;
    String className=(String)map.remove(typeName);
    if (className != null) {
      try {
        type=Class.forName(className);
      }
 catch (      ClassNotFoundException ex) {
        type=tagToClass.get(className);
        if (type == null)         throw new SerializationException(ex);
      }
    }
    Object object=null;
    try {
      object=type.newInstance();
    }
 catch (    Exception ex) {
      try {
        Constructor constructor=type.getDeclaredConstructor();
        constructor.setAccessible(true);
        object=constructor.newInstance();
      }
 catch (      SecurityException ignored) {
      }
catch (      NoSuchMethodException ignored) {
        if (type.isMemberClass() && !Modifier.isStatic(type.getModifiers()))         throw new SerializationException("Class cannot be created (non-static member class): " + type.getName(),ex);
 else         throw new SerializationException("Class cannot be created (missing no-arg constructor): " + type.getName(),ex);
      }
catch (      Exception privateConstructorException) {
        ex=privateConstructorException;
      }
      if (object == null)       throw new SerializationException("Error constructing instance of class: " + type.getName(),ex);
    }
    ObjectMap<String,Field> fields=typeToFields.get(type);
    if (fields == null)     fields=cacheFields(type);
    for (    Entry<String,Object> entry : map.entries()) {
      Field field=fields.get(entry.key);
      if (field == null)       throw new SerializationException("Unable to find field: " + entry.key + " ("+ type.getName()+ ")");
      try {
        field.set(object,read(entry.value,field.getType()));
      }
 catch (      Exception ex) {
        throw new SerializationException("Error setting field: " + field.getName() + " ("+ type.getName()+ ")",ex);
      }
    }
    return object;
  }
  if (value instanceof Array) {
    Array array=(Array)value;
    if (type.isAssignableFrom(Array.class)) {
      Array newArray=new Array(array.size);
      for (int i=0, n=array.size; i < n; i++)       newArray.add(read(array.get(i),String.class));
      return newArray;
    }
    if (type.isAssignableFrom(ArrayList.class)) {
      ArrayList newArray=new ArrayList(array.size);
      for (int i=0, n=array.size; i < n; i++)       newArray.add(read(array.get(i),String.class));
      return newArray;
    }
    if (type.isArray()) {
      Class componentType=type.getComponentType();
      Object newArray=java.lang.reflect.Array.newInstance(componentType,array.size);
      for (int i=0, n=array.size; i < n; i++)       java.lang.reflect.Array.set(newArray,i,read(array.get(i),componentType));
      return newArray;
    }
    throw new SerializationException("Unable to convert value to required type: " + value + " ("+ type.getName()+ ")");
  }
  if (value instanceof String) {
    String string=(String)value;
    if (type == String.class || value == null)     return value;
    try {
      if (type == int.class || type == Integer.class)       return Integer.valueOf(string);
      if (type == float.class || type == Float.class)       return Float.valueOf(string);
      if (type == long.class || type == Long.class)       return Long.valueOf(string);
      if (type == double.class || type == Double.class)       return Double.valueOf(string);
      if (type == short.class || type == Short.class)       return Short.valueOf(string);
      if (type == byte.class || type == Byte.class)       return Byte.valueOf(string);
    }
 catch (    NumberFormatException ignored) {
    }
    if (type == boolean.class || type == Boolean.class)     return Boolean.valueOf(string);
    if (type == char.class || type == Character.class)     return string.charAt(0);
    if (type.isEnum()) {
      Object[] constants=type.getEnumConstants();
      for (int i=0, n=constants.length; i < n; i++)       if (string.equals(constants[i].toString()))       return constants[i];
    }
    if (type == CharSequence.class)     return string;
    throw new SerializationException("Unable to convert value to required type: " + value + " ("+ type.getName()+ ")");
  }
  return null;
}
