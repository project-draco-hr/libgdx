{
  if (value == null) {
    if (name == null)     writer.add(value);
 else     writer.set(name,value);
    return;
  }
  Class actualType=value.getClass();
  if (actualType.isPrimitive() || actualType == String.class || actualType == Integer.class || actualType == Boolean.class || actualType == Float.class || actualType == Long.class || actualType == Double.class || actualType == Short.class || actualType == Byte.class || actualType == Character.class) {
    if (name == null)     writer.add(value);
 else     writer.set(name,value);
    return;
  }
  if (value instanceof Serializable) {
    startObject(name,valueType,actualType,writer);
    ((Serializable)value).write(this,writer);
    writer.pop();
    return;
  }
  Serializer serializer=classToSerializer.get(actualType);
  if (serializer != null) {
    startObject(name,valueType,actualType,writer);
    serializer.write(this,writer,value);
    writer.pop();
    return;
  }
  if (value instanceof Collection) {
    if (name == null)     writer.array();
 else     writer.array(name);
    for (    Object item : (Collection)value)     writeValue(null,item,null,writer);
    writer.pop();
    return;
  }
  if (value instanceof Array) {
    if (name == null)     writer.array();
 else     writer.array(name);
    for (    Object item : (Array)value)     writeValue(null,item,null,writer);
    writer.pop();
    return;
  }
  if (actualType.isArray()) {
    if (name == null)     writer.array();
 else     writer.array(name);
    int length=java.lang.reflect.Array.getLength(value);
    for (int i=0; i < length; i++)     writeValue(null,java.lang.reflect.Array.get(value,i),null,writer);
    writer.pop();
    return;
  }
  if (actualType.isEnum()) {
    writer.set(name,value);
    return;
  }
  startObject(name,valueType,actualType,writer);
  ObjectMap<String,Field> fields=typeToFields.get(actualType);
  if (fields == null)   fields=cacheFields(actualType);
  for (  Field valueField : fields.values()) {
    try {
      if (debug)       System.out.println("Writing field: " + valueField.getName() + " ("+ value.getClass().getName()+ ")");
      writeValue(valueField.getName(),valueField.get(value),valueField.getType(),writer);
    }
 catch (    IllegalAccessException ex) {
      throw new SerializationException("Error accessing field: " + valueField.getName() + " ("+ value.getClass().getName()+ ")",ex);
    }
catch (    SerializationException ex) {
      ex.addTrace(valueField + " (" + value.getClass().getName()+ ")");
      throw ex;
    }
catch (    RuntimeException runtimeEx) {
      SerializationException ex=new SerializationException(runtimeEx);
      ex.addTrace(valueField + " (" + value.getClass().getName()+ ")");
      throw ex;
    }
  }
  writer.pop();
}
