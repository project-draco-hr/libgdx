{
  if (value == null) {
    if (name == null)     writer.add(value);
 else     writer.set(name,value);
    return;
  }
  Class actualType=value.getClass();
  if (actualType.isPrimitive() || actualType == String.class || actualType == Integer.class || actualType == Boolean.class || actualType == Float.class || actualType == Long.class || actualType == Double.class || actualType == Short.class || actualType == Byte.class || actualType == Character.class) {
    if (name == null)     writer.add(value);
 else     writer.set(name,value);
    return;
  }
  if (value instanceof Serializable) {
    startObject(name,valueType,actualType,writer);
    ((Serializable)value).write(this,writer);
    writer.pop();
    return;
  }
  Serializer serializer=classToSerializer.get(actualType);
  if (serializer != null) {
    serializer.write(this,writer,name,value);
    return;
  }
  if (value instanceof Collection) {
    if (name == null)     writer.array();
 else     writer.array(name);
    for (    Object item : (Collection)value)     writeValue(null,item,null,writer);
    writer.pop();
    return;
  }
  if (value instanceof Array) {
    if (name == null)     writer.array();
 else     writer.array(name);
    for (    Object item : (Array)value)     writeValue(null,item,null,writer);
    writer.pop();
    return;
  }
  if (actualType.isArray()) {
    if (name == null)     writer.array();
 else     writer.array(name);
    Class componentType=actualType.getComponentType();
    int length=java.lang.reflect.Array.getLength(value);
    for (int i=0; i < length; i++)     writeValue(null,java.lang.reflect.Array.get(value,i),componentType,writer);
    writer.pop();
    return;
  }
  if (value instanceof ObjectMap) {
    startObject(name,valueType,actualType,writer);
    for (    Entry entry : ((ObjectMap<?,?>)value).entries())     writeValue((String)entry.key,entry.value,null,writer);
    writer.pop();
    return;
  }
  if (value instanceof Map) {
    startObject(name,valueType,actualType,writer);
    for (    Map.Entry entry : ((Map<?,?>)value).entrySet())     writeValue((String)entry.getKey(),entry.getValue(),null,writer);
    writer.pop();
    return;
  }
  if (actualType.isEnum()) {
    writer.set(name,value);
    return;
  }
  startObject(name,valueType,actualType,writer);
  writeFields(value,writer);
  writer.pop();
}
