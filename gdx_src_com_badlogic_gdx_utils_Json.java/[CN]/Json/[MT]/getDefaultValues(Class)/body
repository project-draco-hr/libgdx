{
  if (!usePrototypes)   return null;
  Object[] values=classToDefaultValues.get(type);
  if (values == null) {
    Object object=newInstance(type);
    ObjectMap<String,FieldMetadata> fields=typeToFields.get(type);
    if (fields == null)     fields=cacheFields(type);
    values=new Object[fields.size];
    classToDefaultValues.put(type,values);
    int i=0;
    for (    FieldMetadata metadata : fields.values()) {
      Field field=metadata.field;
      try {
        values[i++]=field.get(object);
      }
 catch (      IllegalAccessException ex) {
        throw new SerializationException("Error accessing field: " + field.getName() + " ("+ type.getName()+ ")",ex);
      }
catch (      SerializationException ex) {
        ex.addTrace(field + " (" + type.getName()+ ")");
        throw ex;
      }
catch (      RuntimeException runtimeEx) {
        SerializationException ex=new SerializationException(runtimeEx);
        ex.addTrace(field + " (" + type.getName()+ ")");
        throw ex;
      }
    }
  }
  return values;
}
