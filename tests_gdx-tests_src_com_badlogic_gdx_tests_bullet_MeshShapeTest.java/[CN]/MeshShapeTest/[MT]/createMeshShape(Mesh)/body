{
  short[] indices=new short[mesh.getNumIndices()];
  float[] vertices=new float[mesh.getNumVertices() * mesh.getVertexSize() / 4];
  mesh.getIndices(indices);
  mesh.getVertices(vertices);
  btIndexedMesh indexedMesh=new TestIndexedMesh();
  indexedMesh.setM_indexType(PHY_ScalarType.PHY_SHORT);
  indexedMesh.setM_numTriangles(mesh.getNumIndices() / 3);
  indexedMesh.setM_numVertices(mesh.getNumVertices());
  indexedMesh.setM_triangleIndexStride(6);
  indexedMesh.setM_vertexStride(mesh.getVertexSize());
  indexedMesh.setM_vertexType(PHY_ScalarType.PHY_FLOAT);
  indexedMesh.setTriangleIndexBase(indices,indices.length);
  indexedMesh.setVertexBase(vertices,vertices.length);
  btTriangleIndexVertexArray meshInterface=new TestTriangleIndexVertexArray();
  meshInterface.addIndexedMesh(indexedMesh,PHY_ScalarType.PHY_SHORT);
  return new TestBvhTriangleMeshShape(meshInterface,true);
}
