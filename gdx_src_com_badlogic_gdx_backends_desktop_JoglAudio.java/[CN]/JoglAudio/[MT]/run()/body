{
  int NUM_SAMPLES=1000;
  byte[] buffer=new byte[NUM_SAMPLES * 4];
  ShortBuffer shortBuffer=ByteBuffer.wrap(buffer).asShortBuffer();
  int[] intBuffer=new int[NUM_SAMPLES * 2];
  while (true) {
    for (int i=0; i < buffer.length; i++)     buffer[i]=0;
    for (int i=0; i < intBuffer.length; i++)     intBuffer[i]=0;
synchronized (this) {
      int numBuffers=buffers.size();
      Iterator<JoglSoundBuffer> bufferIter=buffers.iterator();
      while (bufferIter.hasNext()) {
        JoglSoundBuffer soundBuffer=bufferIter.next();
        for (int i=0; i < NUM_SAMPLES * 2; i+=2) {
          if (soundBuffer.readSamples >= soundBuffer.numSamples) {
            bufferIter.remove();
            break;
          }
          int left=soundBuffer.samples[soundBuffer.readSamples++];
          int right=soundBuffer.samples[soundBuffer.readSamples++];
          intBuffer[i]+=left;
          intBuffer[i + 1]+=right;
        }
      }
      if (numBuffers > 0) {
        shortBuffer.position(0);
        for (int i=0; i < intBuffer.length; i++) {
          int sample=(intBuffer[i] / numBuffers);
          if (sample < Short.MIN_VALUE)           sample=Short.MIN_VALUE;
          if (sample > Short.MAX_VALUE)           sample=Short.MAX_VALUE;
          shortBuffer.put((short)sample);
        }
      }
      int readBytes=line.write(buffer,0,buffer.length);
      while (readBytes != buffer.length)       readBytes+=line.write(buffer,readBytes,buffer.length - readBytes);
    }
  }
}
