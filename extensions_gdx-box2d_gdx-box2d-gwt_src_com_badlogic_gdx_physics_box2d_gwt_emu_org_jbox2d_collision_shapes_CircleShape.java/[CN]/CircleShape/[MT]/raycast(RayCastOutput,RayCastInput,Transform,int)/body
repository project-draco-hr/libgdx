{
  final Vec2 inputp1=input.p1;
  final Vec2 inputp2=input.p2;
  final Rot tq=transform.q;
  final Vec2 tp=transform.p;
  final float positionx=tq.c * m_p.x - tq.s * m_p.y + tp.x;
  final float positiony=tq.s * m_p.x + tq.c * m_p.y + tp.y;
  final float sx=inputp1.x - positionx;
  final float sy=inputp1.y - positiony;
  final float b=sx * sx + sy * sy - m_radius * m_radius;
  final float rx=inputp2.x - inputp1.x;
  final float ry=inputp2.y - inputp1.y;
  final float c=sx * rx + sy * ry;
  final float rr=rx * rx + ry * ry;
  final float sigma=c * c - rr * b;
  if (sigma < 0.0f || rr < Settings.EPSILON) {
    return false;
  }
  float a=-(c + MathUtils.sqrt(sigma));
  if (0.0f <= a && a <= input.maxFraction * rr) {
    a/=rr;
    output.fraction=a;
    output.normal.x=rx * a + sx;
    output.normal.y=ry * a + sy;
    output.normal.normalize();
    return true;
  }
  return false;
}
