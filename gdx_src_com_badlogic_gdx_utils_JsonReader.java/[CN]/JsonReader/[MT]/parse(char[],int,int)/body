{
  int cs, p=offset, pe=length, eof=pe, top=0;
  int[] stack=new int[4];
  int s=0;
  Array<String> names=new Array(8);
  boolean needsUnescape=false;
  boolean discardBuffer=false;
  RuntimeException parseRuntimeEx=null;
  boolean debug=false;
  if (debug)   System.out.println();
  try {
{
      cs=json_start;
      top=0;
    }
{
      int _klen;
      int _trans=0;
      int _acts;
      int _nacts;
      int _keys;
      int _goto_targ=0;
      _goto:       while (true) {
switch (_goto_targ) {
case 0:
          if (p == pe) {
            _goto_targ=4;
            continue _goto;
          }
        if (cs == 0) {
          _goto_targ=5;
          continue _goto;
        }
case 1:
      _match:       do {
        _keys=_json_key_offsets[cs];
        _trans=_json_index_offsets[cs];
        _klen=_json_single_lengths[cs];
        if (_klen > 0) {
          int _lower=_keys;
          int _mid;
          int _upper=_keys + _klen - 1;
          while (true) {
            if (_upper < _lower)             break;
            _mid=_lower + ((_upper - _lower) >> 1);
            if (data[p] < _json_trans_keys[_mid])             _upper=_mid - 1;
 else             if (data[p] > _json_trans_keys[_mid])             _lower=_mid + 1;
 else {
              _trans+=(_mid - _keys);
              break _match;
            }
          }
          _keys+=_klen;
          _trans+=_klen;
        }
        _klen=_json_range_lengths[cs];
        if (_klen > 0) {
          int _lower=_keys;
          int _mid;
          int _upper=_keys + (_klen << 1) - 2;
          while (true) {
            if (_upper < _lower)             break;
            _mid=_lower + (((_upper - _lower) >> 1) & ~1);
            if (data[p] < _json_trans_keys[_mid])             _upper=_mid - 2;
 else             if (data[p] > _json_trans_keys[_mid + 1])             _lower=_mid + 2;
 else {
              _trans+=((_mid - _keys) >> 1);
              break _match;
            }
          }
          _trans+=_klen;
        }
      }
 while (false);
    cs=_json_trans_targs[_trans];
  if (_json_trans_actions[_trans] != 0) {
    _acts=_json_trans_actions[_trans];
    _nacts=(int)_json_actions[_acts++];
    while (_nacts-- > 0) {
switch (_json_actions[_acts++]) {
case 0:
{
          s=p;
          needsUnescape=false;
          discardBuffer=false;
        }
      break;
case 1:
{
      needsUnescape=true;
    }
  break;
case 2:
{
  String name=new String(data,s,p - s);
  s=p;
  if (needsUnescape)   name=unescape(name);
  if (debug)   System.out.println("name: " + name);
  names.add(name);
}
break;
case 3:
{
if (!discardBuffer) {
String value=new String(data,s,p - s);
s=p;
if (needsUnescape) value=unescape(value);
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("string: " + name + "="+ value);
string(name,value);
}
}
break;
case 4:
{
String value=new String(data,s,p - s);
s=p;
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("number: " + name + "="+ Float.parseFloat(value));
number(name,Float.parseFloat(value));
}
break;
case 5:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("boolean: " + name + "=true");
bool(name,true);
discardBuffer=true;
}
break;
case 6:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("boolean: " + name + "=false");
bool(name,false);
discardBuffer=true;
}
break;
case 7:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("null: " + name);
string(name,null);
discardBuffer=true;
}
break;
case 8:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("startObject: " + name);
startObject(name);
{
if (top == stack.length) {
int[] newStack=new int[stack.length * 2];
System.arraycopy(stack,0,newStack,0,stack.length);
stack=newStack;
}
{
stack[top++]=cs;
cs=9;
_goto_targ=2;
if (true) continue _goto;
}
}
}
break;
case 9:
{
if (debug) System.out.println("endObject");
pop();
{
cs=stack[--top];
_goto_targ=2;
if (true) continue _goto;
}
}
break;
case 10:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("startArray: " + name);
startArray(name);
{
if (top == stack.length) {
int[] newStack=new int[stack.length * 2];
System.arraycopy(stack,0,newStack,0,stack.length);
stack=newStack;
}
{
stack[top++]=cs;
cs=49;
_goto_targ=2;
if (true) continue _goto;
}
}
}
break;
case 11:
{
if (debug) System.out.println("endArray");
pop();
{
cs=stack[--top];
_goto_targ=2;
if (true) continue _goto;
}
}
break;
}
}
}
case 2:
if (cs == 0) {
_goto_targ=5;
continue _goto;
}
if (++p != pe) {
_goto_targ=1;
continue _goto;
}
case 4:
if (p == eof) {
int __acts=_json_eof_actions[cs];
int __nacts=(int)_json_actions[__acts++];
while (__nacts-- > 0) {
switch (_json_actions[__acts++]) {
case 3:
{
if (!discardBuffer) {
String value=new String(data,s,p - s);
s=p;
if (needsUnescape) value=unescape(value);
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("string: " + name + "="+ value);
string(name,value);
}
}
break;
case 4:
{
String value=new String(data,s,p - s);
s=p;
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("number: " + name + "="+ Float.parseFloat(value));
number(name,Float.parseFloat(value));
}
break;
case 5:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("boolean: " + name + "=true");
bool(name,true);
discardBuffer=true;
}
break;
case 6:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("boolean: " + name + "=false");
bool(name,false);
discardBuffer=true;
}
break;
case 7:
{
String name=names.size > 0 ? names.pop() : null;
if (debug) System.out.println("null: " + name);
string(name,null);
discardBuffer=true;
}
break;
}
}
}
case 5:
}
break;
}
}
}
 catch (RuntimeException ex) {
parseRuntimeEx=ex;
}
if (p < pe) {
int lineNumber=1;
for (int i=0; i < p; i++) if (data[i] == '\n') lineNumber++;
throw new SerializationException("Error parsing JSON on line " + lineNumber + " near: "+ new String(data,p,pe - p),parseRuntimeEx);
}
 else if (elements.size != 0) {
Object element=elements.peek();
elements.clear();
if (element instanceof OrderedMap) throw new SerializationException("Error parsing JSON, unmatched brace.");
 else throw new SerializationException("Error parsing JSON, unmatched bracket.");
}
Object root=this.root;
this.root=null;
return root;
}
