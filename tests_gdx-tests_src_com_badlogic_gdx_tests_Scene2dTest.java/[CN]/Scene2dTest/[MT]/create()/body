{
  stage=new Stage();
  Gdx.input.setInputProcessor(stage);
  final TextureRegion region=new TextureRegion(new Texture("data/badlogic.jpg"));
  Actor actor=new Actor(){
    public void draw(    SpriteBatch batch,    float parentAlpha){
      Color color=getColor();
      batch.setColor(color.r,color.g,color.b,parentAlpha);
      batch.draw(region,getX(),getY(),getOriginX(),getOriginY(),getWidth(),getHeight(),getScaleX(),getScaleY(),getRotation());
    }
  }
;
  actor.setBounds(15,15,100,100);
  actor.setOrigin(50,50);
  stage.addActor(actor);
  actor.addListener(new ActorListener(){
    public boolean touchDown(    ActorEvent event,    float x,    float y,    int pointer,    int button){
      System.out.println("down");
      return true;
    }
    public void touchUp(    ActorEvent event,    float x,    float y,    int pointer,    int button){
      System.out.println("up " + event.getTarget());
    }
  }
);
  Skin skin=new Skin(Gdx.files.internal("data/uiskin.json"));
  final TextButton button=new TextButton("Fancy Background",skin);
  button.pad(100).debug();
  button.addListener(new ActorGestureListener(){
    public boolean longPress(    Actor actor,    float x,    float y){
      System.out.println("long press " + x + ", "+ y);
      return true;
    }
    public void fling(    ActorEvent event,    float velocityX,    float velocityY){
      System.out.println("fling " + velocityX + ", "+ velocityY);
    }
    public void zoom(    ActorEvent event,    float initialDistance,    float distance){
      System.out.println("zoom " + initialDistance + ", "+ distance);
    }
    public void pan(    ActorEvent event,    float x,    float y,    float deltaX,    float deltaY){
      event.getTarget().translate(deltaX,deltaY);
      if (deltaX < 0)       System.out.println("panning " + deltaX + ", "+ deltaY+ " "+ event.getTarget());
    }
  }
);
  button.setPosition(50,50);
  stage.addActor(button);
  meow.setDuration(2);
  actor.addAction(forever(sequence(moveBy(50,0,2),moveBy(-50,0,2))));
  patch=skin.getPatch("default-round");
}
