{
  m_indexA=m_bodyA.m_islandIndex;
  m_indexB=m_bodyB.m_islandIndex;
  m_localCenterA.set(m_bodyA.m_sweep.localCenter);
  m_localCenterB.set(m_bodyB.m_sweep.localCenter);
  m_invMassA=m_bodyA.m_invMass;
  m_invMassB=m_bodyB.m_invMass;
  m_invIA=m_bodyA.m_invI;
  m_invIB=m_bodyB.m_invI;
  Vec2 cA=data.positions[m_indexA].c;
  float aA=data.positions[m_indexA].a;
  Vec2 vA=data.velocities[m_indexA].v;
  float wA=data.velocities[m_indexA].w;
  Vec2 cB=data.positions[m_indexB].c;
  float aB=data.positions[m_indexB].a;
  Vec2 vB=data.velocities[m_indexB].v;
  float wB=data.velocities[m_indexB].w;
  final Rot qA=pool.popRot();
  final Rot qB=pool.popRot();
  final Vec2 temp=pool.popVec2();
  qA.set(aA);
  qB.set(aB);
  Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_localCenterA),m_rA);
  Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_localCenterB),m_rB);
  m_u.set(cB).addLocal(m_rB).subLocal(cA).subLocal(m_rA);
  m_length=m_u.length();
  float C=m_length - m_maxLength;
  if (C > 0.0f) {
    m_state=LimitState.AT_UPPER;
  }
 else {
    m_state=LimitState.INACTIVE;
  }
  if (m_length > Settings.linearSlop) {
    m_u.mulLocal(1.0f / m_length);
  }
 else {
    m_u.setZero();
    m_mass=0.0f;
    m_impulse=0.0f;
    return;
  }
  float crA=Vec2.cross(m_rA,m_u);
  float crB=Vec2.cross(m_rB,m_u);
  float invMass=m_invMassA + m_invIA * crA * crA + m_invMassB + m_invIB * crB * crB;
  m_mass=invMass != 0.0f ? 1.0f / invMass : 0.0f;
  if (data.step.warmStarting) {
    m_impulse*=data.step.dtRatio;
    float Px=m_impulse * m_u.x;
    float Py=m_impulse * m_u.y;
    vA.x-=m_invMassA * Px;
    vA.y-=m_invMassA * Py;
    wA-=m_invIA * (m_rA.x * Py - m_rA.y * Px);
    vB.x+=m_invMassB * Px;
    vB.y+=m_invMassB * Py;
    wB+=m_invIB * (m_rB.x * Py - m_rB.y * Px);
  }
 else {
    m_impulse=0.0f;
  }
  pool.pushRot(2);
  pool.pushVec2(1);
  data.velocities[m_indexA].w=wA;
  data.velocities[m_indexB].w=wB;
}
