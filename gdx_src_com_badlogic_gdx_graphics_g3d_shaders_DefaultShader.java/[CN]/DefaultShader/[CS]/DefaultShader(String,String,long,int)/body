{
  if (!Gdx.graphics.isGL20Available())   throw new GdxRuntimeException("This shader requires OpenGL ES 2.0");
  currentLights=maxLightsCount < 0 ? null : new Light[maxLightsCount];
  if (currentLights != null)   for (int i=0; i < currentLights.length; i++)   currentLights[i]=new Light();
  String prefix="";
  this.mask=mask;
  if (!ignoreUnimplemented && (implementedFlags & mask) != mask)   throw new GdxRuntimeException("Some attributes not implemented yet (" + mask + ")");
  if (maxLightsCount > 0)   prefix+="#define lightsCount " + maxLightsCount + "\n";
  if ((mask & BlendingAttribute.Type) == BlendingAttribute.Type)   prefix+="#define " + BlendingAttribute.Alias + "Flag\n";
  if ((mask & TextureAttribute.Diffuse) == TextureAttribute.Diffuse)   prefix+="#define " + TextureAttribute.DiffuseAlias + "Flag\n";
  if ((mask & ColorAttribute.Diffuse) == ColorAttribute.Diffuse)   prefix+="#define " + ColorAttribute.DiffuseAlias + "Flag\n";
  program=new ShaderProgram(prefix + vertexShader,prefix + fragmentShader);
  if (!program.isCompiled())   throw new GdxRuntimeException(program.getLog());
  projTransLoc=program.getUniformLocation(PROJECTION_TRANSFORM);
  modelTransLoc=program.getUniformLocation(MODEL_TRANSFORM);
  normalTransLoc=program.getUniformLocation(NORMAL_TRANSFORM);
  diffuseTextureLoc=((mask & TextureAttribute.Diffuse) != TextureAttribute.Diffuse) ? -1 : program.getUniformLocation(TextureAttribute.DiffuseAlias);
  diffuseColorLoc=((mask & ColorAttribute.Diffuse) != ColorAttribute.Diffuse) ? -1 : program.getUniformLocation(ColorAttribute.DiffuseAlias);
  ambientLoc=maxLightsCount < 0 ? -1 : program.getUniformLocation("ambient");
  lightsLoc=maxLightsCount > 0 ? program.getUniformLocation("lights[0].type") : -1;
  lightSize=(lightsLoc >= 0 && maxLightsCount > 1) ? (program.getUniformLocation("lights[1].type") - lightsLoc) : -1;
  lightTypeOffset=0;
  lightColorOffset=lightsLoc >= 0 ? program.getUniformLocation("lights[0].color") - lightsLoc : -1;
  lightPositionOffset=lightsLoc >= 0 ? program.getUniformLocation("lights[0].position") - lightsLoc : -1;
  lightAttenuationOffset=lightsLoc >= 0 ? program.getUniformLocation("lights[0].attenuation") - lightsLoc : -1;
  lightDirectionOffset=lightsLoc >= 0 ? program.getUniformLocation("lights[0].direction") - lightsLoc : -1;
  lightAngleOffset=lightsLoc >= 0 ? program.getUniformLocation("lights[0].angle") - lightsLoc : -1;
  lightExponentOffset=lightsLoc >= 0 ? program.getUniformLocation("lights[0].exponent") - lightsLoc : -1;
}
