{
  if (!renderable.material.has(BlendingAttribute.Type))   context.setBlending(false,GL10.GL_SRC_ALPHA,GL10.GL_ONE_MINUS_SRC_ALPHA);
  if (currentLocalTransform != renderable.localTransform)   set(u_localTrans,(currentLocalTransform=renderable.localTransform) == null ? idtMatrix : renderable.localTransform);
  if (currentModelTransform != renderable.modelTransform)   set(u_modelTrans,(currentModelTransform=renderable.modelTransform) == null ? idtMatrix : renderable.modelTransform);
  if (currentLocalTransform == null && currentModelTransform == null)   setWorldTransform(idtMatrix,false);
 else   if (currentLocalTransform == null)   setWorldTransform(currentModelTransform,false);
 else   if (currentModelTransform == null)   setWorldTransform(currentLocalTransform,false);
 else   setWorldTransform(combinedWorldTransform.set(currentLocalTransform).mul(currentModelTransform),true);
  bindMaterial(renderable);
  if (lighting)   bindLights(renderable);
  if (currentMesh != renderable.mesh) {
    if (currentMesh != null)     currentMesh.unbind(program);
    renderable.mesh.setAutoBind(false);
    (currentMesh=renderable.mesh).bind(program);
  }
  if (hasUniform(u_bones)) {
    for (int i=0; i < bones.length; i++) {
      final int idx=i / 16;
      bones[i]=(renderable.bones == null || idx >= renderable.bones.length || renderable.bones[idx] == null) ? idtMatrix.val[i % 16] : renderable.bones[idx].val[i % 16];
    }
    program.setUniformMatrix4fv(loc(u_bones),bones,0,bones.length);
  }
  renderable.mesh.render(program,renderable.primitiveType,renderable.meshPartOffset,renderable.meshPartSize);
}
