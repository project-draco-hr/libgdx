{
  final Lights lights=renderable.lights;
  final Array<DirectionalLight> dirs=lights.directionalLights;
  final Array<PointLight> points=lights.pointLights;
  if (dirLightsLoc >= 0) {
    for (int i=0; i < directionalLights.length; i++) {
      if (dirs == null || i >= dirs.size) {
        if (lightsSet && directionalLights[i].color.r == 0f && directionalLights[i].color.g == 0f && directionalLights[i].color.b == 0f)         continue;
        directionalLights[i].color.set(0,0,0,1);
      }
 else       if (lightsSet && directionalLights[i].equals(dirs.get(i)))       continue;
 else       directionalLights[i].set(dirs.get(i));
      int idx=dirLightsLoc + i * dirLightsSize;
      program.setUniformf(idx + dirLightsColorOffset,directionalLights[i].color.r,directionalLights[i].color.g,directionalLights[i].color.b);
      program.setUniformf(idx + dirLightsDirectionOffset,directionalLights[i].direction);
    }
  }
  if (pointLightsLoc >= 0) {
    for (int i=0; i < pointLights.length; i++) {
      if (points == null || i >= points.size) {
        if (lightsSet && pointLights[i].intensity == 0f)         continue;
        pointLights[i].intensity=0f;
      }
 else       if (lightsSet && pointLights[i].equals(points.get(i)))       continue;
 else       pointLights[i].set(points.get(i));
      int idx=pointLightsLoc + i * pointLightsSize;
      program.setUniformf(idx + pointLightsColorOffset,pointLights[i].color.r,pointLights[i].color.g,pointLights[i].color.b);
      program.setUniformf(idx + pointLightsPositionOffset,pointLights[i].position);
      if (pointLightsIntensityOffset >= 0)       program.setUniformf(idx + pointLightsIntensityOffset,pointLights[i].intensity);
    }
  }
  if (lights.fog != null) {
    set(u_fogColor,lights.fog);
  }
  lightsSet=true;
}
