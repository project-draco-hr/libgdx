{
  this.graphics=graphics;
  this.managed=managed;
  this.isStatic=isStatic;
  this.useFixedPoint=useFixedPoint;
  this.maxVertices=maxVertices;
  this.maxIndices=maxIndices;
  this.attributes=new VertexAttributes(attributes);
  if (graphics instanceof JoglGraphics)   usesDirectBuffers=true;
 else {
    if (graphics.isGL11Available() || graphics.isGL20Available())     usesDirectBuffers=false;
 else     usesDirectBuffers=true;
  }
  if (usesDirectBuffers == false) {
    vertices=useFixedPoint ? IntBuffer.wrap(new int[maxVertices * this.attributes.vertexSize / 4]) : FloatBuffer.wrap(new float[maxVertices * this.attributes.vertexSize / 4]);
    if (useFixedPoint) {
      verticesFixed=(IntBuffer)vertices;
      verticesFloat=null;
    }
 else {
      verticesFloat=(FloatBuffer)vertices;
      verticesFixed=null;
    }
    indices=ShortBuffer.wrap(new short[maxIndices]);
  }
 else {
    ByteBuffer buffer=ByteBuffer.allocateDirect(maxVertices * this.attributes.vertexSize);
    buffer.order(ByteOrder.nativeOrder());
    vertices=buffer;
    verticesFixed=buffer.asIntBuffer();
    verticesFloat=buffer.asFloatBuffer();
    buffer=ByteBuffer.allocateDirect(maxIndices * 2);
    buffer.order(ByteOrder.nativeOrder());
    indices=buffer.asShortBuffer();
  }
  createBuffers();
  meshes.add(this);
}
