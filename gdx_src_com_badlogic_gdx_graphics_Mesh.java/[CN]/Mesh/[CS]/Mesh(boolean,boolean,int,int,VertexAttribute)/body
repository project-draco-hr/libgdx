{
  this.managed=true;
  this.isStatic=isStatic;
  this.useFixedPoint=useFixedPoint;
  this.maxVertices=maxVertices;
  this.maxIndices=maxIndices;
  this.attributes=new VertexAttributes(attributes);
  if (Gdx.app.getType() != Application.ApplicationType.Android) {
    useVBO=Gdx.graphics.isGL11Available() == true || Gdx.graphics.isGL20Available() == true;
    isDirect=true;
  }
 else {
    useVBO=Gdx.graphics.isGL11Available() == true || Gdx.graphics.isGL20Available() == true;
    if (useVBO) {
      isDirect=true;
    }
 else     isDirect=true;
  }
  if (isDirect) {
    ByteBuffer buffer=ByteBuffer.allocateDirect(maxVertices * this.attributes.vertexSize);
    buffer.order(ByteOrder.nativeOrder());
    vertices=buffer;
    verticesFixed=buffer.asIntBuffer();
    verticesFloat=buffer.asFloatBuffer();
    buffer=ByteBuffer.allocateDirect(maxIndices * 2);
    buffer.order(ByteOrder.nativeOrder());
    indices=buffer.asShortBuffer();
  }
 else {
    ByteBuffer buffer=ByteBuffer.allocate(maxVertices * this.attributes.vertexSize);
    buffer.order(ByteOrder.nativeOrder());
    vertices=buffer;
    verticesFixed=buffer.asIntBuffer();
    verticesFloat=buffer.asFloatBuffer();
    buffer=ByteBuffer.allocateDirect(maxIndices * 2);
    buffer.order(ByteOrder.nativeOrder());
    indices=buffer.asShortBuffer();
  }
  bufferCreatedFirstTime=false;
  if (managed)   meshes.add(this);
}
