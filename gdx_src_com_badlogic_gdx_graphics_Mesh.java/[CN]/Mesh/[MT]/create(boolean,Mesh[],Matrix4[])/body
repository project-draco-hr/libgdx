{
  if (transformations != null && transformations.length < meshes.length)   throw new IllegalArgumentException("Not enough transformations specified");
  final VertexAttributes attributes=meshes[0].getVertexAttributes();
  int vertCount=meshes[0].getNumVertices();
  int idxCount=meshes[0].getNumIndices();
  for (int i=1; i < meshes.length; i++) {
    if (!meshes[i].getVertexAttributes().equals(attributes))     throw new IllegalArgumentException("Inconsistent VertexAttributes");
    vertCount+=meshes[i].getNumVertices();
    idxCount+=meshes[i].getNumIndices();
  }
  final VertexAttribute posAttr=meshes[0].getVertexAttribute(Usage.Position);
  final int offset=posAttr.offset / 4;
  final int numComponents=posAttr.numComponents;
  final int vertexSize=attributes.vertexSize / 4;
  final float vertices[]=new float[vertCount * vertexSize];
  final short indices[]=new short[idxCount];
  meshes[0].getVertices(vertices);
  meshes[0].getIndices(indices);
  int vcount=meshes[0].getNumVertices();
  if (transformations != null)   transform(transformations[0],vertices,vertexSize,offset,numComponents,0,vcount);
  int voffset=vcount;
  int ioffset=meshes[0].getNumIndices();
  for (int i=1; i < meshes.length; i++) {
    final Mesh mesh=meshes[i];
    vcount=mesh.getNumVertices();
    final int isize=mesh.getNumIndices();
    mesh.getVertices(0,vcount * vertexSize,vertices,voffset * vertexSize);
    if (transformations != null)     transform(transformations[i],vertices,vertexSize,offset,numComponents,voffset,vcount);
    mesh.getIndices(indices,ioffset);
    for (int j=0; j < isize; j++)     indices[ioffset + j]=(short)(indices[ioffset + j] + voffset);
    ioffset+=isize;
    voffset+=vcount;
  }
  final Mesh result=new Mesh(isStatic,vertices.length / vertexSize,indices.length,attributes);
  result.setVertices(vertices);
  result.setIndices(indices);
  return result;
}
