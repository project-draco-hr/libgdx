{
  GL11 gl=graphics.getGL11();
  gl.glBindBuffer(GL11.GL_ARRAY_BUFFER,vertexBufferObjectHandle);
  int numAttributes=attributes.size();
  int type=useFixedPoint ? GL11.GL_FIXED : GL11.GL_FLOAT;
  int textureUnit=0;
  for (int i=0; i < numAttributes; i++) {
    VertexAttribute attribute=attributes.get(i);
    if (attribute.usage == Usage.Position) {
      gl.glEnableClientState(GL11.GL_VERTEX_ARRAY);
      gl.glVertexPointer(attribute.numComponents,type,attributes.vertexSize,attribute.offset);
      continue;
    }
    if (attribute.usage == Usage.Color) {
      gl.glEnableClientState(GL11.GL_COLOR_ARRAY);
      gl.glColorPointer(attribute.numComponents,type,attributes.vertexSize,attribute.offset);
      continue;
    }
    if (attribute.usage == Usage.Normal) {
      gl.glEnableClientState(GL11.GL_NORMAL_ARRAY);
      gl.glNormalPointer(type,attributes.vertexSize,attribute.offset);
      continue;
    }
    if (attribute.usage == Usage.TextureCoordinates) {
      gl.glClientActiveTexture(GL11.GL_TEXTURE0 + textureUnit);
      gl.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
      gl.glTexCoordPointer(attribute.numComponents,type,attributes.vertexSize,attribute.offset);
      textureUnit++;
      continue;
    }
  }
  if (maxIndices > 0) {
    gl.glBindBuffer(GL11.GL_ELEMENT_ARRAY_BUFFER,indexBufferObjectHandle);
    gl.glDrawElements(primitiveType,count,GL10.GL_UNSIGNED_SHORT,offset * 2);
  }
 else {
    gl.glDrawArrays(primitiveType,offset,count);
  }
  textureUnit--;
  for (int i=0; i < numAttributes; i++) {
    VertexAttribute attribute=attributes.get(i);
    if (attribute.usage == Usage.Color)     gl.glDisableClientState(GL11.GL_COLOR_ARRAY);
    if (attribute.usage == Usage.Normal)     gl.glDisableClientState(GL11.GL_NORMAL_ARRAY);
    if (attribute.usage == Usage.TextureCoordinates) {
      gl.glClientActiveTexture(GL11.GL_TEXTURE0 + textureUnit);
      gl.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
      textureUnit--;
    }
  }
}
