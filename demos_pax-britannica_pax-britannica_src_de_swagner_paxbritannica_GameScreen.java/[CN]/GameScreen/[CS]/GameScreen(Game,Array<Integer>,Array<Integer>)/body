{
  super(game);
  Gdx.input.setCatchBackKey(true);
  Gdx.input.setInputProcessor(this);
  cam=new OrthographicCamera(width,height);
  cam.position.x=400;
  cam.position.y=240;
  cam.update();
  numPlayers=playerList.size;
  if (numPlayers == 1) {
    touchAreaP1=new BoundingBox(new Vector3(-((this.width - 800) / 2),-((this.height - 480) / 2),0),new Vector3(-((this.width - 800) / 2) + (this.width),-((this.height - 480) / 2) + this.height,0));
  }
 else   if (numPlayers == 2) {
    touchAreaP1=new BoundingBox(new Vector3(-((this.width - 800) / 2),-((this.height - 480) / 2),0),new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2) + this.height,0));
    touchAreaP2=new BoundingBox(new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2),0),new Vector3(-((this.width - 800) / 2) + this.width,-((this.height - 480) / 2) + this.height,0));
  }
 else   if (numPlayers == 3) {
    touchAreaP1=new BoundingBox(new Vector3(-((this.width - 800) / 2),-((this.height - 480) / 2),0),new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2) + (this.height / 2),0));
    touchAreaP2=new BoundingBox(new Vector3(-((this.width - 800) / 2),-((this.height - 480) / 2) + (this.height / 2),0),new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2) + this.height,0));
    touchAreaP3=new BoundingBox(new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2),0),new Vector3(-((this.width - 800) / 2) + this.width,-((this.height - 480) / 2) + this.height,0));
  }
 else   if (numPlayers == 4) {
    touchAreaP1=new BoundingBox(new Vector3(-((this.width - 800) / 2),-((this.height - 480) / 2),0),new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2) + (this.height / 2),0));
    touchAreaP2=new BoundingBox(new Vector3(-((this.width - 800) / 2),-((this.height - 480) / 2) + (this.height / 2),0),new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2) + this.height,0));
    touchAreaP3=new BoundingBox(new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2),0),new Vector3(-((this.width - 800) / 2) + this.width,-((this.height - 480) / 2) + (this.height / 2),0));
    touchAreaP4=new BoundingBox(new Vector3(-((this.width - 800) / 2) + (this.width / 2),-((this.height - 480) / 2) + (this.height / 2),0),new Vector3(-((this.width - 800) / 2) + this.width,-((this.height - 480) / 2) + this.height,0));
  }
  if (playerList.size + cpuList.size != 3) {
    POSITIONS.add(new Vector2(150,180));
    POSITIONS.add(new Vector2(450,180));
    POSITIONS.add(new Vector2(300,335));
    POSITIONS.add(new Vector2(300,25));
  }
 else {
    POSITIONS.add(new Vector2(170,92));
    POSITIONS.add(new Vector2(432,100));
    POSITIONS.add(new Vector2(300,335));
  }
  blackFade=Resources.getInstance().blackFade;
  fadeBatch=new SpriteBatch();
  fadeBatch.getProjectionMatrix().setToOrtho2D(0,0,2,2);
  stouchAreaP1=Resources.getInstance().touchArea1;
  stouchAreaP2=Resources.getInstance().touchArea2;
  stouchAreaP3=Resources.getInstance().touchArea3;
  stouchAreaP4=Resources.getInstance().touchArea4;
  if (playerList.size > 0 && playerList.get(0) == 1) {
    p1=Resources.getInstance().factoryP1Small;
  }
 else   if (playerList.size > 0 && playerList.get(0) == 2) {
    p1=Resources.getInstance().factoryP2Small;
  }
 else   if (playerList.size > 0 && playerList.get(0) == 3) {
    p1=Resources.getInstance().factoryP3Small;
  }
 else   if (playerList.size > 0 && playerList.get(0) == 4) {
    p1=Resources.getInstance().factoryP4Small;
  }
  if (playerList.size > 1 && playerList.get(1) == 1) {
    p2=Resources.getInstance().factoryP1Small;
  }
 else   if (playerList.size > 1 && playerList.get(1) == 2) {
    p2=Resources.getInstance().factoryP2Small;
  }
 else   if (playerList.size > 1 && playerList.get(1) == 3) {
    p2=Resources.getInstance().factoryP3Small;
  }
 else   if (playerList.size > 1 && playerList.get(1) == 4) {
    p2=Resources.getInstance().factoryP4Small;
  }
  if (playerList.size > 2 && playerList.get(2) == 1) {
    p3=Resources.getInstance().factoryP1Small;
  }
 else   if (playerList.size > 2 && playerList.get(2) == 2) {
    p3=Resources.getInstance().factoryP2Small;
  }
 else   if (playerList.size > 2 && playerList.get(2) == 3) {
    p3=Resources.getInstance().factoryP3Small;
  }
 else   if (playerList.size > 2 && playerList.get(2) == 4) {
    p3=Resources.getInstance().factoryP4Small;
  }
  if (playerList.size > 3 && playerList.get(3) == 1) {
    p4=Resources.getInstance().factoryP1Small;
  }
 else   if (playerList.size > 3 && playerList.get(3) == 2) {
    p4=Resources.getInstance().factoryP2Small;
  }
 else   if (playerList.size > 3 && playerList.get(3) == 3) {
    p4=Resources.getInstance().factoryP3Small;
  }
 else   if (playerList.size > 3 && playerList.get(3) == 4) {
    p4=Resources.getInstance().factoryP4Small;
  }
  if (playerList.size > 0)   p1.setScale(.2f);
  if (playerList.size > 1)   p2.setScale(.2f);
  if (playerList.size > 2)   p3.setScale(.2f);
  if (playerList.size > 3)   p4.setScale(.2f);
  if (playerList.size > 0)   p1.rotate(-90);
  if (playerList.size > 1)   p2.rotate(90);
  if (playerList.size > 2)   p3.rotate(-90);
  if (playerList.size > 3)   p4.rotate(90);
  stouchAreaP1.setRotation(-90);
  stouchAreaP2.setRotation(90);
  stouchAreaP1.setRotation(-90);
  stouchAreaP2.setRotation(90);
  gameBatch=new SpriteBatch();
  gameBatch.getProjectionMatrix().set(cam.combined);
  int currentPos=0;
  for (int i=0; i < playerList.size; ++i) {
    Vector2 temp1=new Vector2(POSITIONS.get(currentPos).x,POSITIONS.get(currentPos).y);
    Vector2 temp2=new Vector2(POSITIONS.get(currentPos).x,POSITIONS.get(currentPos).y);
    Vector2 facing=new Vector2(-temp1.sub(CENTER).y,temp2.sub(CENTER).x).nor();
    playerProduction=new PlayerProduction(playerList.get(i),POSITIONS.get(currentPos),facing);
    GameInstance.getInstance().factorys.add(playerProduction);
    ++currentPos;
  }
  for (int i=0; i < cpuList.size; ++i) {
    Vector2 temp1=new Vector2(POSITIONS.get(currentPos).x,POSITIONS.get(currentPos).y);
    Vector2 temp2=new Vector2(POSITIONS.get(currentPos).x,POSITIONS.get(currentPos).y);
    Vector2 facing=new Vector2(-temp1.sub(CENTER).y,temp2.sub(CENTER).x).nor();
    if (GameInstance.getInstance().difficultyConfig == 0) {
      enemyProduction=new EasyEnemyProduction(cpuList.get(i),POSITIONS.get(currentPos),facing);
    }
 else     if (GameInstance.getInstance().difficultyConfig == 1) {
      enemyProduction=new MediumEnemyProduction(cpuList.get(i),POSITIONS.get(currentPos),facing);
    }
 else {
      enemyProduction=new HardEnemyProduction(cpuList.get(i),POSITIONS.get(currentPos),facing);
    }
    GameInstance.getInstance().factorys.add(enemyProduction);
    ++currentPos;
  }
  Gdx.gl.glDisable(GL20.GL_CULL_FACE);
  Gdx.gl.glDisable(GL20.GL_DEPTH_TEST);
}
