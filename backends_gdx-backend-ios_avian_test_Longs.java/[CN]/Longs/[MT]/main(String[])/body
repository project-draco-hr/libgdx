{
  expect(volatileLong == getConstant());
{
    Rectangle r=new Rectangle();
    Rectangle.class.getMethod("setX",long.class).invoke(r,42L);
    expect(r.x == 42L);
  }
{
    long a=0x1FFFFFFFFL;
    long b=-1;
    expect(a != b);
  }
  expect(Math.abs(-123L) == 123L);
  expect(readLongFrom(new java.io.InputStream(){
    int step;
    public int read(){
      return ++step;
    }
  }
) == 0x0102030405060708L);
  expect(((long)negativeOne()) == -1);
{
    long foo=25214903884L;
    int radix=10;
    expect(foo > 0);
    foo/=radix;
    expect(foo > 0);
  }
  expect(roundUp(156,2) == 156);
  expect(((int)roundUp(156,2)) == 156);
  expect(Long.parseLong("25214903884") == 25214903884L);
  expect(Long.parseLong("-9223372036854775808") == -9223372036854775808L);
  expect(String.valueOf(25214903884L).equals("25214903884"));
  expect(String.valueOf(-9223372036854775808L).equals("-9223372036854775808"));
{
    long a=-5;
    long b=2;
    expect(a >> b == -5L >> 2);
    expect(a >>> b == -5L >>> 2);
    expect(a << b == -5L << 2);
    expect(a + b == -5L + 2L);
    expect(a - b == -5L - 2L);
    expect(a * b == -5L * 2L);
    expect(a / b == -5L / 2L);
    expect(a % b == -5L % 2L);
    expect((a & b) == (-5L & 2L));
    expect((a | b) == (-5L | 2L));
    expect((a ^ b) == (-5L ^ 2L));
    expect(-a == 5L);
    expect(~a == ~-5L);
    a=5;
    b=2;
    expect(a >> b == 5L >> 2);
    expect(a >>> b == 5L >>> 2);
    expect(a << b == 5L << 2);
    expect(a + b == 5L + 2L);
    expect(a - b == 5L - 2L);
    expect(a * b == 5L * 2L);
    expect(a / b == 5L / 2L);
    expect(a % b == 5L % 2L);
    expect((a & b) == (5L & 2L));
    expect((a | b) == (5L | 2L));
    expect((a ^ b) == (5L ^ 2L));
    expect(-a == -5L);
    expect(~a == ~5L);
  }
{
    long a=-25214903884L;
    long b=2;
    expect(a >> b == -25214903884L >> 2);
    expect(a >>> b == -25214903884L >>> 2);
    expect(a << b == -25214903884L << 2);
    expect(a + b == -25214903884L + 2L);
    expect(a - b == -25214903884L - 2L);
    expect(a * b == -25214903884L * 2L);
    expect(a / b == -25214903884L / 2L);
    expect(a % b == -25214903884L % 2L);
    expect((a & b) == (-25214903884L & 2L));
    expect((a | b) == (-25214903884L | 2L));
    expect((a ^ b) == (-25214903884L ^ 2L));
    expect(-a == 25214903884L);
    expect(~a == ~-25214903884L);
    a=25214903884L;
    b=2;
    expect(a >> b == 25214903884L >> 2);
    expect(a >>> b == 25214903884L >>> 2);
    expect(a << b == 25214903884L << 2);
    expect(a + b == 25214903884L + 2L);
    expect(a - b == 25214903884L - 2L);
    expect(a * b == 25214903884L * 2L);
    expect(a / b == 25214903884L / 2L);
    expect(a % b == 25214903884L % 2L);
    expect((a & b) == (25214903884L & 2L));
    expect((a | b) == (25214903884L | 2L));
    expect((a ^ b) == (25214903884L ^ 2L));
    expect(-a == -25214903884L);
    expect(~a == ~25214903884L);
  }
{
    long b=2;
    expect((-25214903884L) >> b == -25214903884L >> 2);
    expect((-25214903884L) >>> b == -25214903884L >>> 2);
    expect((-25214903884L) << b == -25214903884L << 2);
    expect((-25214903884L) + b == -25214903884L + 2L);
    expect((-25214903884L) - b == -25214903884L - 2L);
    expect((-25214903884L) * b == -25214903884L * 2L);
    expect((-25214903884L) / b == -25214903884L / 2L);
    expect((-25214903884L) % b == -25214903884L % 2L);
    expect(((-25214903884L) & b) == (-25214903884L & 2L));
    expect(((-25214903884L) | b) == (-25214903884L | 2L));
    expect(((-25214903884L) ^ b) == (-25214903884L ^ 2L));
    b=2;
    expect(25214903884L >> b == 25214903884L >> 2);
    expect(25214903884L >>> b == 25214903884L >>> 2);
    expect(25214903884L << b == 25214903884L << 2);
    expect(25214903884L + b == 25214903884L + 2L);
    expect(25214903884L - b == 25214903884L - 2L);
    expect(25214903884L * b == 25214903884L * 2L);
    expect(25214903884L / b == 25214903884L / 2L);
    expect(25214903884L % b == 25214903884L % 2L);
    expect((25214903884L & b) == (25214903884L & 2L));
    expect((25214903884L | b) == (25214903884L | 2L));
    expect((25214903884L ^ b) == (25214903884L ^ 2L));
  }
{
    long a=2L;
    expect(a + (-25214903884L) == 2L + (-25214903884L));
    expect(a - (-25214903884L) == 2L - (-25214903884L));
    expect(a * (-25214903884L) == 2L * (-25214903884L));
    expect(a / (-25214903884L) == 2L / (-25214903884L));
    expect(a % (-25214903884L) == 2L % (-25214903884L));
    expect((a & (-25214903884L)) == (2L & (-25214903884L)));
    expect((a | (-25214903884L)) == (2L | (-25214903884L)));
    expect((a ^ (-25214903884L)) == (2L ^ (-25214903884L)));
    a=2L;
    expect(a + 25214903884L == 2L + 25214903884L);
    expect(a - 25214903884L == 2L - 25214903884L);
    expect(a * 25214903884L == 2L * 25214903884L);
    expect(a / 25214903884L == 2L / 25214903884L);
    expect(a % 25214903884L == 2L % 25214903884L);
    expect((a & 25214903884L) == (2L & 25214903884L));
    expect((a | 25214903884L) == (2L | 25214903884L));
    expect((a ^ 25214903884L) == (2L ^ 25214903884L));
  }
{
    long x=231;
    expect((x >> 32) == 0);
    expect((x >>> 32) == 0);
    expect((x << 32) == 992137445376L);
    int shift=32;
    expect((x >> shift) == 0);
    expect((x >>> shift) == 0);
    expect((x << shift) == 992137445376L);
    long y=-231;
    expect((y >> 32) == 0xffffffffffffffffL);
    expect((y >>> 32) == 0xffffffffL);
  }
  expect(Long.valueOf(231L) == 231L);
{
    byte[] array=new byte[8];
    putLong(231,array,0);
    expect((array[0] & 0xff) == 0);
    expect((array[1] & 0xff) == 0);
    expect((array[2] & 0xff) == 0);
    expect((array[3] & 0xff) == 0);
    expect((array[4] & 0xff) == 0);
    expect((array[5] & 0xff) == 0);
    expect((array[6] & 0xff) == 0);
    expect((array[7] & 0xff) == 231);
    expect(getLong(array,0) == 231);
  }
  java.nio.ByteBuffer buffer=java.nio.ByteBuffer.allocate(8);
  buffer.putLong(231);
  buffer.flip();
  expect(buffer.getLong() == 231);
  expect(unsignedShiftRight32(231) == 0);
{
    int[] x=new int[]{1701899151};
    int[] z=new int[x.length * 2];
    final long LONG_MASK=0xffffffffL;
    int lastProductLowWord=0;
    for (int j=0, i=0; j < x.length; j++) {
      long piece=(x[j] & LONG_MASK);
      long product=piece * piece;
      z[i++]=(lastProductLowWord << 31) | (int)(product >>> 33);
      z[i++]=(int)(product >>> 1);
      lastProductLowWord=(int)product;
    }
    expect(z[0] == 337192406);
    expect(z[1] == -437261072);
  }
}
