{
  if (!config.libsDir.exists()) {
    if (!config.libsDir.mkdirs())     throw new RuntimeException("Couldn't create directory for shared library files in '" + config.libsDir + "'");
  }
  if (!config.jniDir.exists()) {
    if (!config.jniDir.mkdirs())     throw new RuntimeException("Couldn't create native code directory '" + config.jniDir + "'");
  }
  ArrayList<String> buildFiles=new ArrayList<String>();
  ArrayList<String> libsDirs=new ArrayList<String>();
  ArrayList<String> sharedLibFiles=new ArrayList<String>();
  for (  BuildTarget target : targets) {
    String buildFile=generateBuildTargetTemplate(config,target);
    FileDescriptor libsDir=new FileDescriptor(getLibsDirectory(config,target));
    if (!libsDir.exists()) {
      if (!libsDir.mkdirs())       throw new RuntimeException("Couldn't create libs directory '" + libsDir + "'");
    }
    String buildFileName="build-" + target.os.toString().toLowerCase() + (target.is64Bit ? "64" : "32")+ ".xml";
    if (target.buildFileName != null)     buildFileName=target.buildFileName;
    config.jniDir.child(buildFileName).writeString(buildFile,false);
    System.out.println("Wrote target '" + target.os + (target.is64Bit ? "64" : "")+ "' build script '"+ config.jniDir.child(buildFileName)+ "'");
    if (!target.excludeFromMasterBuildFile) {
      buildFiles.add(buildFileName);
      sharedLibFiles.add(getSharedLibFilename(target.os,target.is64Bit,config.sharedLibName));
      libsDirs.add("../" + libsDir.path().replace('\\','/'));
    }
  }
  String template=new FileDescriptor("com/badlogic/gdx/jnigen/resources/scripts/build-template.xml",FileType.Classpath).readString();
  StringBuffer clean=new StringBuffer();
  StringBuffer compile=new StringBuffer();
  StringBuffer pack=new StringBuffer();
  for (int i=0; i < buildFiles.size(); i++) {
    clean.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\" target=\"clean\"/>\n");
    compile.append("\t\t<ant antfile=\"" + buildFiles.get(i) + "\"/>\n");
    pack.append("\t\t\t<fileset dir=\"" + libsDirs.get(i) + "\" includes=\""+ sharedLibFiles.get(i)+ "\"/>");
  }
  template=template.replace("%projectName%",config.sharedLibName + "-natives");
  template=template.replace("<clean/>",clean.toString());
  template=template.replace("<compile/>",compile.toString());
  template=template.replace("%packFile%","../" + config.libsDir.path().replace('\\','/') + "/"+ config.sharedLibName+ "-natives.jar");
  template=template.replace("<pack/>",pack);
  config.jniDir.child("build.xml").writeString(template,false);
  System.out.println("Wrote master build script '" + config.jniDir.child("build.xml") + "'");
}
