{
  return new List<T>(){
    public String toString(){
      return Collections.toString(this);
    }
    public int size(){
      return array.length;
    }
    public boolean add(    T element){
      throw new UnsupportedOperationException();
    }
    public boolean addAll(    Collection<? extends T> collection){
      throw new UnsupportedOperationException();
    }
    public void add(    int index,    T element){
      throw new UnsupportedOperationException();
    }
    public boolean contains(    Object element){
      for (int i=0; i < array.length; ++i) {
        if (equal(element,array[i])) {
          return true;
        }
      }
      return false;
    }
    public int indexOf(    Object element){
      for (int i=0; i < array.length; ++i) {
        if (equal(element,array[i])) {
          return i;
        }
      }
      return -1;
    }
    public int lastIndexOf(    Object element){
      for (int i=array.length - 1; i >= 0; --i) {
        if (equal(element,array[i])) {
          return i;
        }
      }
      return -1;
    }
    public T get(    int index){
      return array[index];
    }
    public T set(    int index,    T value){
      throw new UnsupportedOperationException();
    }
    public Object[] toArray(){
      return toArray(new Object[size()]);
    }
    public <S>S[] toArray(    S[] a){
      return (S[])array;
    }
    public boolean isEmpty(){
      return size() == 0;
    }
    public T remove(    int index){
      throw new UnsupportedOperationException();
    }
    public boolean remove(    Object element){
      throw new UnsupportedOperationException();
    }
    public void clear(){
      throw new UnsupportedOperationException();
    }
    public Iterator<T> iterator(){
      return listIterator();
    }
    public ListIterator<T> listIterator(    int index){
      return new Collections.ArrayListIterator(this,index);
    }
    public ListIterator<T> listIterator(){
      return listIterator(0);
    }
  }
;
}
