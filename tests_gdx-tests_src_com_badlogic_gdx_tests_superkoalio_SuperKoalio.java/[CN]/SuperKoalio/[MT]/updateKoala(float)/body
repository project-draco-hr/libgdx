{
  if (deltaTime == 0)   return;
  koala.stateTime+=deltaTime;
  if ((Gdx.input.isKeyPressed(Keys.SPACE) || isTouched(0.75f,1)) && koala.grounded) {
    koala.velocity.y+=Koala.JUMP_VELOCITY;
    koala.state=Koala.State.Jumping;
    koala.grounded=false;
  }
  if (Gdx.input.isKeyPressed(Keys.LEFT) || Gdx.input.isKeyPressed(Keys.A) || isTouched(0,0.25f)) {
    koala.velocity.x=-Koala.MAX_VELOCITY;
    if (koala.grounded)     koala.state=Koala.State.Walking;
    koala.facesRight=false;
  }
  if (Gdx.input.isKeyPressed(Keys.RIGHT) || Gdx.input.isKeyPressed(Keys.D) || isTouched(0.25f,0.5f)) {
    koala.velocity.x=Koala.MAX_VELOCITY;
    if (koala.grounded)     koala.state=Koala.State.Walking;
    koala.facesRight=true;
  }
  koala.velocity.add(0,GRAVITY);
  if (Math.abs(koala.velocity.x) > Koala.MAX_VELOCITY) {
    koala.velocity.x=Math.signum(koala.velocity.x) * Koala.MAX_VELOCITY;
  }
  if (Math.abs(koala.velocity.x) < 1) {
    koala.velocity.x=0;
    if (koala.grounded)     koala.state=Koala.State.Standing;
  }
  koala.velocity.mul(deltaTime);
  Rectangle koalaRect=rectPool.obtain();
  koalaRect.set(koala.position.x,koala.position.y,Koala.WIDTH,Koala.HEIGHT);
  int startX, startY, endX, endY;
  if (koala.velocity.x > 0) {
    startX=endX=(int)(koala.position.x + Koala.WIDTH + koala.velocity.x);
  }
 else {
    startX=endX=(int)(koala.position.x + koala.velocity.x);
  }
  startY=(int)(koala.position.y);
  endY=(int)(koala.position.y + Koala.HEIGHT);
  getTiles(startX,startY,endX,endY,tiles);
  koalaRect.x+=koala.velocity.x;
  for (  Rectangle tile : tiles) {
    if (koalaRect.overlaps(tile)) {
      koala.velocity.x=0;
      break;
    }
  }
  koalaRect.x=koala.position.x;
  if (koala.velocity.y > 0) {
    startY=endY=(int)(koala.position.y + Koala.HEIGHT + koala.velocity.y);
  }
 else {
    startY=endY=(int)(koala.position.y + koala.velocity.y);
  }
  startX=(int)(koala.position.x);
  endX=(int)(koala.position.x + Koala.WIDTH);
  getTiles(startX,startY,endX,endY,tiles);
  koalaRect.y+=koala.velocity.y;
  for (  Rectangle tile : tiles) {
    if (koalaRect.overlaps(tile)) {
      if (koala.velocity.y > 0) {
        koala.position.y=tile.y - Koala.HEIGHT;
        TiledMapTileLayer layer=(TiledMapTileLayer)map.getLayers().get(1);
        layer.setCell((int)tile.x,(int)tile.y,null);
      }
 else {
        koala.position.y=tile.y + tile.height;
        koala.grounded=true;
      }
      koala.velocity.y=0;
      break;
    }
  }
  rectPool.free(koalaRect);
  koala.position.add(koala.velocity);
  koala.velocity.mul(1 / deltaTime);
  koala.velocity.x*=Koala.DAMPING;
}
