{
  addListener(inputListener=new ClickListener(){
    public void clicked(    InputEvent event,    float x,    float y){
      int count=getTapCount() % 4;
      if (count == 0)       clearSelection();
      if (count == 2) {
        int[] array=wordUnderCursor(x);
        setSelection(array[0],array[1]);
      }
      if (count == 3)       selectAll();
    }
    public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      if (!super.touchDown(event,x,y,pointer,button))       return false;
      if (pointer == 0 && button != 0)       return false;
      if (disabled)       return true;
      setCursorPosition(x);
      selectionStart=cursor;
      Stage stage=getStage();
      if (stage != null)       stage.setKeyboardFocus(TextField.this);
      keyboard.show(true);
      hasSelection=true;
      return true;
    }
    public void touchDragged(    InputEvent event,    float x,    float y,    int pointer){
      super.touchDragged(event,x,y,pointer);
      setCursorPosition(x);
    }
    private void setCursorPosition(    float x){
      lastBlink=0;
      cursorOn=false;
      cursor=letterUnderCursor(x);
    }
    public boolean keyDown(    InputEvent event,    int keycode){
      if (disabled)       return false;
      lastBlink=0;
      cursorOn=false;
      Stage stage=getStage();
      if (stage != null && stage.getKeyboardFocus() == TextField.this) {
        boolean repeat=false;
        boolean ctrl=false;
        if (isMac)         ctrl=Gdx.input.isKeyPressed(Keys.SYM);
 else         ctrl=Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) || Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT);
        boolean jump=ctrl && !passwordMode;
        if (ctrl) {
          if (keycode == Keys.V) {
            paste();
            return true;
          }
          if (keycode == Keys.C || keycode == Keys.INSERT) {
            copy();
            return true;
          }
          if (keycode == Keys.X || keycode == Keys.DEL) {
            cut();
            return true;
          }
          if (keycode == Keys.A) {
            selectAll();
            return true;
          }
        }
        if (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT)) {
          if (keycode == Keys.INSERT)           paste();
          if (keycode == Keys.FORWARD_DEL) {
            if (hasSelection) {
              copy();
              delete();
            }
          }
          selection: {
            int temp=cursor;
            keys: {
              if (keycode == Keys.LEFT) {
                while (--cursor > 0 && jump) {
                  if (check(text.charAt(cursor)))                   continue;
                  break;
                }
                repeat=true;
                break keys;
              }
              if (keycode == Keys.RIGHT) {
                while (++cursor < text.length() && jump) {
                  if (check(text.charAt(cursor - 1)))                   continue;
                  break;
                }
                repeat=true;
                break keys;
              }
              if (keycode == Keys.HOME) {
                cursor=0;
                break keys;
              }
              if (keycode == Keys.END) {
                cursor=text.length();
                break keys;
              }
              break selection;
            }
            if (!hasSelection) {
              selectionStart=temp;
              hasSelection=true;
            }
          }
        }
 else {
          if (keycode == Keys.LEFT) {
            while (cursor-- > 1 && jump) {
              if (check(text.charAt(cursor - 1)))               continue;
              break;
            }
            clearSelection();
            repeat=true;
          }
          if (keycode == Keys.RIGHT) {
            while (++cursor < text.length() && jump) {
              if (check(text.charAt(cursor - 1)))               continue;
              break;
            }
            clearSelection();
            repeat=true;
          }
          if (keycode == Keys.HOME) {
            cursor=0;
            clearSelection();
          }
          if (keycode == Keys.END) {
            cursor=text.length();
            clearSelection();
          }
        }
        cursor=MathUtils.clamp(cursor,0,text.length());
        if (repeat && (!keyRepeatTask.isScheduled() || keyRepeatTask.keycode != keycode)) {
          keyRepeatTask.keycode=keycode;
          keyRepeatTask.cancel();
          Timer.schedule(keyRepeatTask,keyRepeatInitialTime,keyRepeatTime);
        }
        return true;
      }
      return false;
    }
    private boolean check(    char c){
      return (c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z') || (c >= '0' && c <= '9');
    }
    public boolean keyUp(    InputEvent event,    int keycode){
      if (disabled)       return false;
      keyRepeatTask.cancel();
      return true;
    }
    public boolean keyTyped(    InputEvent event,    char character){
      if (disabled)       return false;
      Stage stage=getStage();
      if (stage != null && stage.getKeyboardFocus() == TextField.this) {
        if ((character == TAB || character == ENTER_ANDROID) && focusTraversal) {
          next(Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT));
        }
 else         input: {
          boolean delete=character == DELETE;
          boolean backspace=character == BACKSPACE;
          boolean add=style.font.containsCharacter(character);
          boolean remove=backspace || delete;
          if (!add && !remove)           break input;
          if (hasSelection) {
            cursor=delete(false);
          }
 else {
            if (backspace && cursor > 0) {
              text=text.substring(0,cursor - 1) + text.substring(cursor--);
              renderOffset=0;
            }
            if (delete && cursor < text.length()) {
              text=text.substring(0,cursor) + text.substring(cursor + 1);
            }
          }
          if (add && !remove) {
            if (character != ENTER_DESKTOP && character != ENTER_ANDROID) {
              if (filter != null && !filter.acceptChar(TextField.this,character))               return true;
            }
            if (inLimit(text.length()))             return true;
            text=insert(cursor++,String.valueOf(character),text);
          }
          updateDisplayText();
        }
        if (listener != null)         listener.keyTyped(TextField.this,character);
        return true;
      }
      return false;
    }
  }
);
}
