{
  addListener(inputListener=new InputListener(){
    public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      if (pointer == 0 && button != 0)       return false;
      Stage stage=getStage();
      if (stage != null)       stage.setKeyboardFocus(TextField.this);
      keyboard.show(true);
      clearSelection();
      setCursorPosition(x);
      selectionStart=cursor;
      return true;
    }
    public void touchDragged(    InputEvent event,    float x,    float y,    int pointer){
      lastBlink=0;
      cursorOn=false;
      setCursorPosition(x);
      hasSelection=true;
    }
    private void setCursorPosition(    float x){
      lastBlink=0;
      cursorOn=false;
      x-=renderOffset;
      for (int i=0; i < glyphPositions.size; i++) {
        if (glyphPositions.items[i] > x) {
          cursor=Math.max(0,i - 1);
          return;
        }
      }
      cursor=Math.max(0,glyphPositions.size - 1);
    }
    public boolean keyDown(    InputEvent event,    int keycode){
      final BitmapFont font=style.font;
      lastBlink=0;
      cursorOn=false;
      Stage stage=getStage();
      if (stage != null && stage.getKeyboardFocus() == TextField.this) {
        boolean repeat=false;
        if (Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) || Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT)) {
          if (keycode == Keys.V)           paste();
          if (keycode == Keys.C || keycode == Keys.INSERT)           copy();
          if (keycode == Keys.X || keycode == Keys.DEL)           cut();
        }
 else         if (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT)) {
          if (keycode == Keys.INSERT)           paste();
          if (keycode == Keys.FORWARD_DEL) {
            if (hasSelection) {
              copy();
              delete();
            }
          }
          if (keycode == Keys.LEFT) {
            if (!hasSelection) {
              selectionStart=cursor;
              hasSelection=true;
            }
            cursor--;
            repeat=true;
          }
          if (keycode == Keys.RIGHT) {
            if (!hasSelection) {
              selectionStart=cursor;
              hasSelection=true;
            }
            cursor++;
            repeat=true;
          }
          if (keycode == Keys.HOME) {
            if (!hasSelection) {
              selectionStart=cursor;
              hasSelection=true;
            }
            cursor=0;
          }
          if (keycode == Keys.END) {
            if (!hasSelection) {
              selectionStart=cursor;
              hasSelection=true;
            }
            cursor=text.length();
          }
          cursor=Math.max(0,cursor);
          cursor=Math.min(text.length(),cursor);
        }
 else {
          if (keycode == Keys.LEFT) {
            cursor--;
            clearSelection();
            repeat=true;
          }
          if (keycode == Keys.RIGHT) {
            cursor++;
            clearSelection();
            repeat=true;
          }
          if (keycode == Keys.HOME) {
            cursor=0;
            clearSelection();
          }
          if (keycode == Keys.END) {
            cursor=text.length();
            clearSelection();
          }
          cursor=Math.max(0,cursor);
          cursor=Math.min(text.length(),cursor);
        }
        if (repeat && (!keyRepeatTask.isScheduled() || keyRepeatTask.keycode != keycode)) {
          keyRepeatTask.keycode=keycode;
          keyRepeatTask.cancel();
          Timer.schedule(keyRepeatTask,keyRepeatInitialTime,keyRepeatTime);
        }
        return true;
      }
      return false;
    }
    public boolean keyUp(    InputEvent event,    int keycode){
      keyRepeatTask.cancel();
      return true;
    }
    public boolean keyTyped(    InputEvent event,    char character){
      final BitmapFont font=style.font;
      Stage stage=getStage();
      if (stage != null && stage.getKeyboardFocus() == TextField.this) {
        if (character == BACKSPACE && (cursor > 0 || hasSelection)) {
          if (!hasSelection) {
            text=text.substring(0,cursor - 1) + text.substring(cursor);
            updateDisplayText();
            cursor--;
          }
 else {
            delete();
          }
        }
        if (character == DELETE) {
          if (cursor < text.length() || hasSelection) {
            if (!hasSelection) {
              text=text.substring(0,cursor) + text.substring(cursor + 1);
              updateDisplayText();
            }
 else {
              delete();
            }
          }
          return true;
        }
        if (character != ENTER_DESKTOP && character != ENTER_ANDROID) {
          if (filter != null && !filter.acceptChar(TextField.this,character))           return true;
        }
        if (character == TAB || character == ENTER_ANDROID)         next(Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT));
        if (font.containsCharacter(character)) {
          if (!hasSelection) {
            text=text.substring(0,cursor) + character + text.substring(cursor,text.length());
            updateDisplayText();
            cursor++;
          }
 else {
            int minIndex=Math.min(cursor,selectionStart);
            int maxIndex=Math.max(cursor,selectionStart);
            text=(minIndex > 0 ? text.substring(0,minIndex) : "") + (maxIndex < text.length() ? text.substring(maxIndex,text.length()) : "");
            cursor=minIndex;
            text=text.substring(0,cursor) + character + text.substring(cursor,text.length());
            updateDisplayText();
            cursor++;
            clearSelection();
          }
        }
        if (listener != null)         listener.keyTyped(TextField.this,character);
        return true;
      }
 else       return false;
    }
  }
);
}
