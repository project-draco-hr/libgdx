{
  float visibleWidth=getWidth();
  if (style.background != null)   visibleWidth-=style.background.getLeftWidth() + style.background.getRightWidth();
  int glyphCount=glyphPositions.size;
  float[] glyphPositions=this.glyphPositions.items;
  float distance=glyphPositions[Math.max(0,cursor - 1)] + renderOffset;
  if (distance <= 0)   renderOffset-=distance;
 else {
    int index=Math.min(glyphCount - 1,cursor + 1);
    float minX=glyphPositions[index] - visibleWidth;
    if (-renderOffset < minX)     renderOffset=-minX;
  }
  float maxOffset=0;
  float width=glyphPositions[glyphCount - 1];
  for (int i=glyphCount - 2; i >= 0; i--) {
    float x=glyphPositions[i];
    if (width - x > visibleWidth)     break;
    maxOffset=x;
  }
  if (-renderOffset > maxOffset)   renderOffset=-maxOffset;
  visibleTextStart=0;
  float startX=0;
  for (int i=0; i < glyphCount; i++) {
    if (glyphPositions[i] >= -renderOffset) {
      visibleTextStart=Math.max(0,i);
      startX=glyphPositions[i];
      break;
    }
  }
  int length=displayText.length();
  visibleTextEnd=Math.min(length,cursor + 1);
  for (; visibleTextEnd <= length; visibleTextEnd++)   if (glyphPositions[visibleTextEnd] > startX + visibleWidth)   break;
  visibleTextEnd=Math.max(0,visibleTextEnd - 1);
  if ((textHAlign & Align.left) == 0) {
    textOffset=visibleWidth - (glyphPositions[visibleTextEnd] - startX);
    if ((textHAlign & Align.center) != 0)     textOffset=Math.round(textOffset * 0.5f);
  }
 else   textOffset=startX + renderOffset;
  if (hasSelection) {
    int minIndex=Math.min(cursor,selectionStart);
    int maxIndex=Math.max(cursor,selectionStart);
    float minX=Math.max(glyphPositions[minIndex] - glyphPositions[visibleTextStart],-textOffset);
    float maxX=Math.min(glyphPositions[maxIndex] - glyphPositions[visibleTextStart],visibleWidth - textOffset);
    selectionX=minX;
    selectionWidth=maxX - minX - style.font.getData().cursorX;
  }
}
