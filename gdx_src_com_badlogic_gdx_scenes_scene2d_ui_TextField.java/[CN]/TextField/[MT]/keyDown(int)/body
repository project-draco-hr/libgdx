{
  final BitmapFont font=style.font;
  if (stage != null && stage.getKeyboardFocus() == this) {
    if (Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) || Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT)) {
      if (keycode == Keys.V)       paste();
      if (keycode == Keys.C || keycode == Keys.INSERT)       copy();
    }
 else     if (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT)) {
      if (keycode == Keys.INSERT)       paste();
      if (keycode == Keys.FORWARD_DEL) {
        if (hasSelection) {
          copy();
          delete();
        }
      }
      if (keycode == Keys.LEFT) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor--;
      }
      if (keycode == Keys.RIGHT) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor++;
      }
      if (keycode == Keys.HOME) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor=0;
      }
      if (keycode == Keys.END) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor=text.length();
      }
      cursor=Math.max(0,cursor);
      cursor=Math.min(text.length(),cursor);
    }
 else {
      if (keycode == Keys.LEFT) {
        cursor--;
        clearSelection();
      }
      if (keycode == Keys.RIGHT) {
        cursor++;
        clearSelection();
      }
      if (keycode == Keys.HOME) {
        cursor=0;
        clearSelection();
      }
      if (keycode == Keys.END) {
        cursor=text.length();
        clearSelection();
      }
      cursor=Math.max(0,cursor);
      cursor=Math.min(text.length(),cursor);
    }
    return true;
  }
  return false;
}
