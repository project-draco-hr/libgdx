{
  final BitmapFont font=style.font;
  if (parent.keyboardFocusedActor == this) {
    if (Gdx.input.isKeyPressed(Keys.CONTROL_LEFT) || Gdx.input.isKeyPressed(Keys.CONTROL_RIGHT)) {
      if (keycode == Keys.V) {
        String content=clipboard.getContents();
        if (content != null) {
          StringBuilder builder=new StringBuilder();
          for (int i=0; i < content.length(); i++) {
            char c=content.charAt(i);
            if (font.containsCharacter(c)) {
              builder.append(c);
            }
          }
          content=builder.toString();
          text=text.substring(0,cursor) + content + text.substring(cursor,text.length());
          cursor+=content.length();
          font.computeGlyphAdvancesAndPositions(text,glyphAdvances,glyphPositions);
        }
      }
      if (keycode == Keys.C) {
        if (hasSelection) {
          int minIndex=Math.min(cursor,selectionStart);
          int maxIndex=Math.max(cursor,selectionStart);
          clipboard.setContents(text.substring(minIndex,maxIndex));
        }
      }
    }
 else     if (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT)) {
      if (keycode == Keys.LEFT) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor--;
      }
      if (keycode == Keys.RIGHT) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor++;
      }
      if (keycode == Keys.HOME) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor=0;
      }
      if (keycode == Keys.END) {
        if (!hasSelection) {
          selectionStart=cursor;
          hasSelection=true;
        }
        cursor=text.length();
      }
      cursor=Math.max(0,cursor);
      cursor=Math.min(text.length(),cursor);
    }
 else {
      if (keycode == Keys.LEFT) {
        cursor--;
        hasSelection=false;
      }
      if (keycode == Keys.RIGHT) {
        cursor++;
        ;
        hasSelection=false;
      }
      if (keycode == Keys.HOME) {
        cursor=0;
        hasSelection=false;
      }
      if (keycode == Keys.END) {
        cursor=text.length();
        hasSelection=false;
      }
      cursor=Math.max(0,cursor);
      cursor=Math.min(text.length(),cursor);
    }
    return true;
  }
  return false;
}
