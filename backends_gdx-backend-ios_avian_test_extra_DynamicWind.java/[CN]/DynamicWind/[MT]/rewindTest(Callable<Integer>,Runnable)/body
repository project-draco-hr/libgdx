{
  System.out.println("rewindTest enter");
  int value;
  try {
    value=dynamicWind(new Runnable(){
      public void run(){
        System.out.println("rewindTest before");
        expect(before == continuationCount);
        expect(task == continuationCount);
        expect(after == continuationCount);
        ++before;
      }
    }
,new Callable<Integer>(){
      public Integer call() throws Exception {
        System.out.println("rewindTest thunk");
        expect(before == 1);
        expect(task == 0);
        expect(after == 0);
        task=1;
        return callWithCurrentContinuation(new CallbackReceiver<Integer>(){
          public Integer receive(          final Callback<Integer> continuation) throws Exception {
            continuationReference=continuation;
            return unwind.call();
          }
        }
);
      }
    }
,new Runnable(){
      public void run(){
        System.out.println("rewindTest after");
        expect(before == continuationCount + 1);
        expect(task == 1);
        expect(after == continuationCount);
        ++after;
      }
    }
);
  }
 catch (  MyException e) {
    value=e.value;
  }
  System.out.println("rewindTest expect");
  expect(value == continuationCount);
  if (value == 0) {
    System.out.println("rewindTest expect 0");
    expect(before == 1);
    expect(task == 1);
    expect(after == 1);
    continuationCount=1;
    rewind.run();
    throw new AssertionError();
  }
 else {
    System.out.println("rewindTest expect 1");
    expect(value == 1);
    expect(before == 2);
    expect(task == 1);
    expect(after == 2);
  }
  System.out.println("rewindTest exit");
}
