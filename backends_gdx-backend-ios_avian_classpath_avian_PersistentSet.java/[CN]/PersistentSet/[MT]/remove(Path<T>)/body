{
  if (size == 1) {
    if (p.node != root) {
      throw new IllegalArgumentException();
    }
    return new PersistentSet(NullNode,comparator,0);
  }
  Node<T> new_=p.node;
  Node<T> newRoot=p.root.root;
  Cell<Node<T>> ancestors=p.ancestors;
  Node<T> dead;
  if (new_.left == NullNode || new_.right == NullNode) {
    dead=new_;
  }
 else {
    Cell<Node<T>> path=successor(new_,ancestors);
    dead=path.value;
    ancestors=path.next;
  }
  Node<T> child;
  if (dead.left != NullNode) {
    child=new Node(dead.left);
  }
 else   if (dead.right != NullNode) {
    child=new Node(dead.right);
  }
 else {
    child=NullNode;
  }
  if (ancestors == null) {
    child.red=false;
    return new PersistentSet(child,comparator,1);
  }
 else   if (dead == ancestors.value.left) {
    ancestors.value.left=child;
  }
 else {
    ancestors.value.right=child;
  }
  if (dead != new_) {
    new_.value=dead.value;
  }
  if (!dead.red) {
    while (ancestors != null && !child.red) {
      if (child == ancestors.value.left) {
        Node<T> sibling=ancestors.value.right=new Node(ancestors.value.right);
        if (sibling.red) {
          sibling.red=false;
          ancestors.value.red=true;
          Node<T> n=leftRotate(ancestors.value);
          if (ancestors.next == null) {
            newRoot=n;
          }
 else           if (ancestors.next.value.right == ancestors.value) {
            ancestors.next.value.right=n;
          }
 else {
            ancestors.next.value.left=n;
          }
          ancestors.next=new Cell(n,ancestors.next);
          sibling=ancestors.value.right;
        }
        if (!(sibling.left.red || sibling.right.red)) {
          sibling.red=true;
          child=ancestors.value;
          ancestors=ancestors.next;
        }
 else {
          if (!sibling.right.red) {
            sibling.left=new Node(sibling.left);
            sibling.left.red=false;
            sibling.red=true;
            sibling=ancestors.value.right=rightRotate(sibling);
          }
          sibling.red=ancestors.value.red;
          ancestors.value.red=false;
          sibling.right=new Node(sibling.right);
          sibling.right.red=false;
          Node<T> n=leftRotate(ancestors.value);
          if (ancestors.next == null) {
            newRoot=n;
          }
 else           if (ancestors.next.value.right == ancestors.value) {
            ancestors.next.value.right=n;
          }
 else {
            ancestors.next.value.left=n;
          }
          child=newRoot;
          ancestors=null;
        }
      }
 else {
        Node<T> sibling=ancestors.value.left=new Node(ancestors.value.left);
        if (sibling.red) {
          sibling.red=false;
          ancestors.value.red=true;
          Node<T> n=rightRotate(ancestors.value);
          if (ancestors.next == null) {
            newRoot=n;
          }
 else           if (ancestors.next.value.left == ancestors.value) {
            ancestors.next.value.left=n;
          }
 else {
            ancestors.next.value.right=n;
          }
          ancestors.next=new Cell(n,ancestors.next);
          sibling=ancestors.value.left;
        }
        if (!(sibling.right.red || sibling.left.red)) {
          sibling.red=true;
          child=ancestors.value;
          ancestors=ancestors.next;
        }
 else {
          if (!sibling.left.red) {
            sibling.right=new Node(sibling.right);
            sibling.right.red=false;
            sibling.red=true;
            sibling=ancestors.value.left=leftRotate(sibling);
          }
          sibling.red=ancestors.value.red;
          ancestors.value.red=false;
          sibling.left=new Node(sibling.left);
          sibling.left.red=false;
          Node<T> n=rightRotate(ancestors.value);
          if (ancestors.next == null) {
            newRoot=n;
          }
 else           if (ancestors.next.value.left == ancestors.value) {
            ancestors.next.value.left=n;
          }
 else {
            ancestors.next.value.right=n;
          }
          child=newRoot;
          ancestors=null;
        }
      }
    }
    child.red=false;
  }
  return new PersistentSet(newRoot,comparator,size - 1);
}
