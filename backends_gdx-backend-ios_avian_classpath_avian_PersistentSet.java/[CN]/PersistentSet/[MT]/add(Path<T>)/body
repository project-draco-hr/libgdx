{
  if (!p.fresh)   throw new IllegalArgumentException();
  Node<T> new_=p.node;
  Node<T> newRoot=p.root.root;
  Cell<Node<T>> ancestors=p.ancestors;
  new_.red=true;
  while (ancestors != null && ancestors.value.red) {
    if (ancestors.value == ancestors.next.value.left) {
      if (ancestors.next.value.right.red) {
        ancestors.value.red=false;
        ancestors.next.value.right=new Node(ancestors.next.value.right);
        ancestors.next.value.right.red=false;
        ancestors.next.value.red=true;
        new_=ancestors.next.value;
        ancestors=ancestors.next.next;
      }
 else {
        if (new_ == ancestors.value.right) {
          new_=ancestors.value;
          ancestors=ancestors.next;
          Node<T> n=leftRotate(new_);
          if (ancestors.value.right == new_) {
            ancestors.value.right=n;
          }
 else {
            ancestors.value.left=n;
          }
          ancestors=new Cell(n,ancestors);
        }
        ancestors.value.red=false;
        ancestors.next.value.red=true;
        Node<T> n=rightRotate(ancestors.next.value);
        if (ancestors.next.next == null) {
          newRoot=n;
        }
 else         if (ancestors.next.next.value.right == ancestors.next.value) {
          ancestors.next.next.value.right=n;
        }
 else {
          ancestors.next.next.value.left=n;
        }
      }
    }
 else {
      if (ancestors.next.value.left.red) {
        ancestors.value.red=false;
        ancestors.next.value.left=new Node(ancestors.next.value.left);
        ancestors.next.value.left.red=false;
        ancestors.next.value.red=true;
        new_=ancestors.next.value;
        ancestors=ancestors.next.next;
      }
 else {
        if (new_ == ancestors.value.left) {
          new_=ancestors.value;
          ancestors=ancestors.next;
          Node<T> n=rightRotate(new_);
          if (ancestors.value.right == new_) {
            ancestors.value.right=n;
          }
 else {
            ancestors.value.left=n;
          }
          ancestors=new Cell(n,ancestors);
        }
        ancestors.value.red=false;
        ancestors.next.value.red=true;
        Node<T> n=leftRotate(ancestors.next.value);
        if (ancestors.next.next == null) {
          newRoot=n;
        }
 else         if (ancestors.next.next.value.right == ancestors.next.value) {
          ancestors.next.next.value.right=n;
        }
 else {
          ancestors.next.next.value.left=n;
        }
      }
    }
  }
  newRoot.red=false;
  return new PersistentSet(newRoot,comparator,size + 1);
}
