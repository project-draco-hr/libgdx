{
  try {
    pngDecoder.decodeHeader(file.read());
    texWidth=pngDecoder.getWidth();
    texHeight=pngDecoder.getHeight();
    int stride=texWidth * 4;
    ensureBufferSize(stride * texHeight);
    Format pngFormat=pngDecoder.decideTextureFormat(PNGDecoder.Format.RGBA);
    int glFormat, glInternalFormat;
switch (pngFormat) {
case ALPHA:
      glFormat=GL10.GL_ALPHA;
    glInternalFormat=GL10.GL_ALPHA;
  break;
case LUMINANCE:
glFormat=GL10.GL_LUMINANCE;
glInternalFormat=GL10.GL_LUMINANCE;
break;
case LUMINANCE_ALPHA:
glFormat=GL10.GL_LUMINANCE_ALPHA;
glInternalFormat=GL10.GL_LUMINANCE_ALPHA;
break;
case RGB:
glFormat=GL10.GL_RGB;
glInternalFormat=GL10.GL_RGB;
break;
case RGBA:
glFormat=GL10.GL_RGBA;
glInternalFormat=GL10.GL_RGBA;
break;
default :
throw new UnsupportedOperationException("PNG format not handled: " + pngFormat);
}
pngDecoder.decode(buffer,stride,pngFormat);
buffer.flip();
GL20 gl=Gdx.graphics.getGL20();
IntBuffer buffer=BufferUtils.newIntBuffer(1);
gl.glGenTextures(1,buffer);
textureID=buffer.get(0);
gl.glBindTexture(GL10.GL_TEXTURE_2D,textureID);
gl.glTexImage2D(GL10.GL_TEXTURE_2D,0,glInternalFormat,texWidth,texHeight,0,glFormat,GL10.GL_UNSIGNED_BYTE,buffer);
}
 catch (IOException ex) {
throw new GdxRuntimeException("Error loading image file: " + file,ex);
}
}
