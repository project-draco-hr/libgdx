{
  BufferedReader reader=new BufferedReader(new InputStreamReader(in));
  List<String> tokens=new ArrayList<String>();
  MD5Animation animation=new MD5Animation();
  try {
    int currFrame=0;
    String line;
    JointInfo[] jointInfos=null;
    BaseFrameJoint[] baseFrame=null;
    float[] animFrameData=null;
    while ((line=reader.readLine()) != null) {
      tokenize(line,tokens);
      if (tokens.size() == 0)       continue;
      if (tokens.get(0).equals("MD5Version")) {
        if (!tokens.get(1).equals("10"))         throw new IllegalArgumentException("Not a valid MD5 animation file, version is " + tokens.get(1) + ", expected 10");
      }
      if (tokens.get(0).equals("numFrames")) {
        int numFrames=Integer.parseInt(tokens.get(1));
        animation.frames=new MD5Joint[numFrames][];
        animation.bounds=new BoundingBox[numFrames];
      }
      if (tokens.get(0).equals("numJoints")) {
        int numJoints=Integer.parseInt(tokens.get(1));
        for (int i=0; i < animation.frames.length; i++) {
          animation.frames[i]=new MD5Joint[numJoints];
          for (int j=0; j < numJoints; j++)           animation.frames[i][j]=new MD5Joint();
        }
        jointInfos=new JointInfo[numJoints];
        baseFrame=new BaseFrameJoint[numJoints];
      }
      if (tokens.get(0).equals("frameRate")) {
        int frameRate=Integer.parseInt(tokens.get(1));
        animation.frameRate=frameRate;
        animation.secondsPerFrame=1.0f / frameRate;
      }
      if (tokens.get(0).equals("numAnimatedComponents")) {
        int numAnimatedComponents=Integer.parseInt(tokens.get(1));
        animFrameData=new float[numAnimatedComponents];
      }
      if (tokens.get(0).equals("hierarchy")) {
        for (int i=0; i < jointInfos.length; i++) {
          line=reader.readLine();
          tokenize(line,tokens);
          if (tokens.size() == 0 || tokens.get(0).equals("//")) {
            i--;
            continue;
          }
          JointInfo jointInfo=new JointInfo();
          jointInfo.name=tokens.get(0);
          jointInfo.parent=Integer.parseInt(tokens.get(1));
          jointInfo.flags=Integer.parseInt(tokens.get(2));
          jointInfo.startIndex=Integer.parseInt(tokens.get(3));
          jointInfos[i]=jointInfo;
        }
      }
      if (tokens.get(0).equals("bounds")) {
        for (int i=0; i < animation.bounds.length; i++) {
          line=reader.readLine();
          tokenize(line,tokens);
          if (tokens.size() == 0) {
            i--;
            continue;
          }
          BoundingBox bounds=new BoundingBox();
          bounds.min.x=Float.parseFloat(tokens.get(1));
          bounds.min.y=Float.parseFloat(tokens.get(2));
          bounds.min.z=Float.parseFloat(tokens.get(3));
          bounds.max.x=Float.parseFloat(tokens.get(6));
          bounds.max.y=Float.parseFloat(tokens.get(7));
          bounds.max.z=Float.parseFloat(tokens.get(8));
          animation.bounds[i]=bounds;
        }
      }
      if (tokens.get(0).equals("baseframe")) {
        for (int i=0; i < baseFrame.length; i++) {
          line=reader.readLine();
          tokenize(line,tokens);
          if (tokens.size() == 0) {
            i--;
            continue;
          }
          BaseFrameJoint joint=new BaseFrameJoint();
          joint.pos.x=Float.parseFloat(tokens.get(1));
          joint.pos.y=Float.parseFloat(tokens.get(2));
          joint.pos.z=Float.parseFloat(tokens.get(3));
          joint.orient.x=Float.parseFloat(tokens.get(6));
          joint.orient.y=Float.parseFloat(tokens.get(7));
          joint.orient.z=Float.parseFloat(tokens.get(8));
          joint.orient.computeW();
          baseFrame[i]=joint;
        }
      }
      if (tokens.get(0).equals("frame")) {
        int frameIndex=Integer.parseInt(tokens.get(1));
        int i=0;
        line=reader.readLine();
        tokenize(line,tokens);
        while (tokens.get(0).equals("}") == false) {
          for (int j=0; j < tokens.size(); j++)           animFrameData[i++]=Float.parseFloat(tokens.get(j));
          line=reader.readLine();
          tokenize(line,tokens);
        }
        buildFrameSkeleton(jointInfos,baseFrame,animFrameData,animation,frameIndex);
      }
    }
    return animation;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return null;
  }
}
