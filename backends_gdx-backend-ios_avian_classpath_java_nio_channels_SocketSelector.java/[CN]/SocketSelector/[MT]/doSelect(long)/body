{
  selectedKeys.clear();
  if (clearWoken())   interval=-1;
  int max=0;
  for (Iterator<SelectionKey> it=keys.iterator(); it.hasNext(); ) {
    SelectionKey key=it.next();
    SelectableChannel c=key.channel();
    int socket=c.socketFD();
    if (c.isOpen()) {
      key.readyOps(0);
      max=natSelectUpdateInterestSet(socket,key.interestOps(),state,max);
    }
 else {
      natSelectClearAll(socket,state);
      it.remove();
    }
  }
  int r=natDoSocketSelect(state,max,interval);
  if (r > 0) {
    for (    SelectionKey key : keys) {
      SelectableChannel c=key.channel();
      int socket=c.socketFD();
      int ready=natUpdateReadySet(socket,key.interestOps(),state);
      key.readyOps(ready);
      if (ready != 0) {
        c.handleReadyOps(ready);
        selectedKeys.add(key);
      }
    }
  }
  clearWoken();
  return selectedKeys.size();
}
