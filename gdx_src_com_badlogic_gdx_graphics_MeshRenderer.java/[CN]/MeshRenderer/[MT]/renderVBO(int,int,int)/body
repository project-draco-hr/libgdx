{
  GL11 gl11=(GL11)gl;
  if (isManaged && gl11.glIsBuffer(vboVertexHandle) == false) {
    createVBO();
    fillVBO();
  }
  gl11.glBindBuffer(GL11.GL_ARRAY_BUFFER,vboVertexHandle);
  gl11.glEnableClientState(GL11.GL_VERTEX_ARRAY);
  gl11.glVertexPointer(mesh.getCoordsSize(),type,mesh.getVertexSize(),0);
  if (mesh.hasColors()) {
    gl11.glEnableClientState(GL11.GL_COLOR_ARRAY);
    gl11.glColorPointer(mesh.getColorsSize(),type,mesh.getVertexSize(),mesh.getColorsOffset());
  }
  if (mesh.hasNormals()) {
    gl11.glEnableClientState(GL11.GL_NORMAL_ARRAY);
    gl11.glNormalPointer(type,mesh.getVertexSize(),mesh.getNormalsOffset());
  }
  if (mesh.hasTexCoords()) {
    for (int i=0; i < mesh.getNumTexCoords(); i++) {
      gl11.glClientActiveTexture(GL11.GL_TEXTURE0 + i);
      gl11.glEnableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
      gl11.glTexCoordPointer(mesh.getTexCoordsSize(),type,mesh.getVertexSize(),mesh.getTexCoordsOffset() + i * mesh.getTexCoordsSize());
    }
  }
  if (mesh.hasIndices()) {
    gl11.glBindBuffer(GL11.GL_ELEMENT_ARRAY_BUFFER,vboIndexHandle);
    gl11.glDrawElements(primitiveType,count,GL10.GL_UNSIGNED_SHORT,offset);
  }
 else {
    gl11.glDrawArrays(primitiveType,offset,count);
  }
  if (mesh.hasColors())   gl11.glDisableClientState(GL11.GL_COLOR_ARRAY);
  if (mesh.hasNormals())   gl11.glDisableClientState(GL11.GL_NORMAL_ARRAY);
  if (mesh.hasTexCoords()) {
    for (int i=0; i < mesh.getNumTexCoords(); i++) {
      gl11.glClientActiveTexture(GL11.GL_TEXTURE0 + i);
      gl11.glDisableClientState(GL11.GL_TEXTURE_COORD_ARRAY);
    }
    gl11.glClientActiveTexture(GL11.GL_TEXTURE0);
  }
  gl11.glBindBuffer(GL11.GL_ELEMENT_ARRAY_BUFFER,0);
  gl11.glBindBuffer(GL11.GL_ARRAY_BUFFER,0);
}
