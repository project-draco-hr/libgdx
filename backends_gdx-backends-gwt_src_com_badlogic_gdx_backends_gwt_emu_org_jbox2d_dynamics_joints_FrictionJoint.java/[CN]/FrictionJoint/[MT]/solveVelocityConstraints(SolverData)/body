{
  Vec2 vA=data.velocities[m_indexA].v;
  float wA=data.velocities[m_indexA].w;
  Vec2 vB=data.velocities[m_indexB].v;
  float wB=data.velocities[m_indexB].w;
  float mA=m_invMassA, mB=m_invMassB;
  float iA=m_invIA, iB=m_invIB;
  float h=data.step.dt;
{
    float Cdot=wB - wA;
    float impulse=-m_angularMass * Cdot;
    float oldImpulse=m_angularImpulse;
    float maxImpulse=h * m_maxTorque;
    m_angularImpulse=MathUtils.clamp(m_angularImpulse + impulse,-maxImpulse,maxImpulse);
    impulse=m_angularImpulse - oldImpulse;
    wA-=iA * impulse;
    wB+=iB * impulse;
  }
{
    final Vec2 Cdot=pool.popVec2();
    final Vec2 temp=pool.popVec2();
    Vec2.crossToOutUnsafe(wA,m_rA,temp);
    Vec2.crossToOutUnsafe(wB,m_rB,Cdot);
    Cdot.addLocal(vB).subLocal(vA).subLocal(temp);
    final Vec2 impulse=pool.popVec2();
    Mat22.mulToOutUnsafe(m_linearMass,Cdot,impulse);
    impulse.negateLocal();
    final Vec2 oldImpulse=pool.popVec2();
    oldImpulse.set(m_linearImpulse);
    m_linearImpulse.addLocal(impulse);
    float maxImpulse=h * m_maxForce;
    if (m_linearImpulse.lengthSquared() > maxImpulse * maxImpulse) {
      m_linearImpulse.normalize();
      m_linearImpulse.mulLocal(maxImpulse);
    }
    impulse.set(m_linearImpulse).subLocal(oldImpulse);
    temp.set(impulse).mulLocal(mA);
    vA.subLocal(temp);
    wA-=iA * Vec2.cross(m_rA,impulse);
    temp.set(impulse).mulLocal(mB);
    vB.addLocal(temp);
    wB+=iB * Vec2.cross(m_rB,impulse);
  }
  if (data.velocities[m_indexA].w != wA) {
    assert(data.velocities[m_indexA].w != wA);
  }
  data.velocities[m_indexA].w=wA;
  data.velocities[m_indexB].w=wB;
  pool.pushVec2(4);
}
