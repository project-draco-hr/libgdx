{
  if (glCanvas == null)   return;
  int viewWidth=Gdx.graphics.getWidth();
  int viewHeight=Gdx.graphics.getHeight();
  if (viewWidth != glCanvas.getWidth() || viewHeight != glCanvas.getHeight()) {
    viewWidth=Math.max(1,glCanvas.getWidth());
    viewHeight=Math.max(1,glCanvas.getHeight());
    app.setSize(viewWidth,viewHeight);
  }
  if (newUnicodeFont != null) {
    if (unicodeFont != null)     unicodeFont.destroy();
    unicodeFont=newUnicodeFont;
    newUnicodeFont=null;
  }
  if (unicodeFont.loadGlyphs(25)) {
    glyphPageComboModel.removeAllElements();
    int pageCount=unicodeFont.getGlyphPages().size();
    int glyphCount=0;
    for (int i=0; i < pageCount; i++) {
      glyphPageComboModel.addElement("Page " + (i + 1));
      glyphCount+=((GlyphPage)unicodeFont.getGlyphPages().get(i)).getGlyphs().size();
    }
    glyphPagesTotalLabel.setText(String.valueOf(pageCount));
    glyphsTotalLabel.setText(String.valueOf(glyphCount));
  }
  if (saveBmFontFile != null) {
    try {
      BMFontUtil bmFont=new BMFontUtil(unicodeFont);
      bmFont.save(saveBmFontFile);
    }
 catch (    Throwable ex) {
      System.out.println("Error saving BMFont files: " + saveBmFontFile.getAbsolutePath());
      ex.printStackTrace();
    }
 finally {
      saveBmFontFile=null;
    }
  }
  if (unicodeFont == null)   return;
  try {
    sampleText=sampleTextPane.getText();
  }
 catch (  Exception ex) {
  }
  if (sampleTextRadio.isSelected()) {
    GL11.glColor4f(renderingBackgroundColor.r,renderingBackgroundColor.g,renderingBackgroundColor.b,renderingBackgroundColor.a);
    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
    int offset=unicodeFont.getYOffset(sampleText);
    if (offset > 0)     offset=0;
    unicodeFont.drawString(0,-offset,sampleText,Color.WHITE,0,sampleText.length());
  }
 else {
    GL11.glColor4f(1,1,1,1);
    GL11.glClear(GL11.GL_COLOR_BUFFER_BIT);
    unicodeFont.addGlyphs(sampleText);
    int index=glyphPageCombo.getSelectedIndex();
    List pages=unicodeFont.getGlyphPages();
    if (index >= 0 && index < pages.size()) {
      Texture texture=((GlyphPage)pages.get(glyphPageCombo.getSelectedIndex())).getTexture();
      GL11.glBegin(GL11.GL_QUADS);
      GL11.glTexCoord2f(0,0);
      GL11.glVertex3f(0,0,0);
      GL11.glTexCoord2f(0,1);
      GL11.glVertex3f(0,texture.getHeight(),0);
      GL11.glTexCoord2f(1,1);
      GL11.glVertex3f(texture.getWidth(),texture.getHeight(),0);
      GL11.glTexCoord2f(1,0);
      GL11.glVertex3f(texture.getWidth(),0,0);
      GL11.glEnd();
    }
  }
}
