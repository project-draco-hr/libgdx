{
  StringBuilder builder=new StringBuilder();
  builder.append("name ");
  builder.append(name);
  builder.append(";\n");
  builder.append("type ");
  builder.append(type);
  builder.append(";\n");
  for (  String require : requires) {
    builder.append("requires ");
    builder.append(require);
    builder.append(";\n");
  }
  for (  ShaderDefine define : defines) {
    builder.append("define ");
    builder.append(define.getName());
    builder.append("=");
    builder.append(define.getValue());
    builder.append(";\n");
  }
  builder.append("inputs {\n");
  for (  ShaderInput input : inputs) {
    builder.append("   ");
    if (input.getQualifier() != ShaderInputQualifier.Local) {
      builder.append(input.getQualifier().toString().toLowerCase());
      builder.append(" ");
    }
    builder.append(input.getType());
    builder.append(" ");
    builder.append(input.getName());
    builder.append(";\n");
  }
  builder.append("}\n");
  builder.append("outputs {\n");
  for (  ShaderOutput output : outputs) {
    builder.append("   ");
    if (output.isVarying()) {
      builder.append("varying ");
    }
    builder.append(output.getType());
    builder.append(" ");
    builder.append(output.getName());
    builder.append(";\n");
  }
  builder.append("}\n");
  builder.append("code {\n");
  String[] lines=code.split("\n");
  for (  String line : lines) {
    builder.append("   " + line);
  }
  builder.append("\n}\n");
  return builder.toString();
}
