{
  assert(isLocked() == false);
  if (isLocked()) {
    return null;
  }
  Joint j=Joint.create(this,def);
  j.m_prev=null;
  j.m_next=m_jointList;
  if (m_jointList != null) {
    m_jointList.m_prev=j;
  }
  m_jointList=j;
  ++m_jointCount;
  j.m_edgeA.joint=j;
  j.m_edgeA.other=j.m_bodyB;
  j.m_edgeA.prev=null;
  j.m_edgeA.next=j.m_bodyA.m_jointList;
  if (j.m_bodyA.m_jointList != null) {
    j.m_bodyA.m_jointList.prev=j.m_edgeA;
  }
  j.m_bodyA.m_jointList=j.m_edgeA;
  j.m_edgeB.joint=j;
  j.m_edgeB.other=j.m_bodyA;
  j.m_edgeB.prev=null;
  j.m_edgeB.next=j.m_bodyB.m_jointList;
  if (j.m_bodyB.m_jointList != null) {
    j.m_bodyB.m_jointList.prev=j.m_edgeB;
  }
  j.m_bodyB.m_jointList=j.m_edgeB;
  Body bodyA=def.bodyA;
  Body bodyB=def.bodyB;
  if (def.collideConnected == false) {
    ContactEdge edge=bodyB.getContactList();
    while (edge != null) {
      if (edge.other == bodyA) {
        edge.contact.flagForFiltering();
      }
      edge=edge.next;
    }
  }
  return j;
}
