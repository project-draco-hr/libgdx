{
  long cnt=0;
  ModelMaterial material=new ModelMaterial();
  while ((din.available() > 0) && (cnt < length)) {
    final byte type=din.readByte();
    final long size=readSize(type);
    cnt+=1 + getSize(type) + size;
    if ((type & TYPE_MASK) == G3DB_TAG_ID)     material.id=readString(size);
 else     if ((type & TYPE_MASK) == G3DB_TAG_TYPE) {
      material.type=din.readByte() == MATERIAL_PHONG ? MaterialType.Phong : MaterialType.Lambert;
      if (size > 1)       din.skipBytes((int)size - 1);
    }
 else     if ((type & TYPE_MASK) == G3DB_TAG_DIFFUSE)     material.diffuse=readColor(size);
 else     if ((type & TYPE_MASK) == G3DB_TAG_AMBIENT)     material.ambient=readColor(size);
 else     if ((type & TYPE_MASK) == G3DB_TAG_EMISSIVE)     material.ambient=readColor(size);
 else     if ((type & TYPE_MASK) == G3DB_TAG_OPACITY)     din.skipBytes((int)size);
 else     if ((type & TYPE_MASK) == G3DB_TAG_SPECULAR)     material.specular=readColor(size);
 else     if ((type & TYPE_MASK) == G3DB_TAG_SHININESS)     material.shininess=readFloat(size);
 else     if ((type & TYPE_MASK) == G3DB_TAG_TEXTURE) {
      if (material.textures == null)       material.textures=new Array<ModelTexture>();
      material.textures.add(readTexture(size));
    }
 else {
      din.skipBytes((int)size);
      Gdx.app.log("G3dbModelLoader","Unknown material tag: " + type + "["+ size+ "], skipping");
    }
  }
  return material;
}
