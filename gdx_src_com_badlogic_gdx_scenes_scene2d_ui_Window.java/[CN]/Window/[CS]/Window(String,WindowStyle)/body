{
  if (title == null)   throw new IllegalArgumentException("title cannot be null.");
  this.title=title;
  setTouchable(Touchable.enabled);
  setClip(true);
  setStyle(style);
  setWidth(150);
  setHeight(150);
  setTitle(title);
  buttonTable=new Table();
  addActor(buttonTable);
  addCaptureListener(new InputListener(){
    public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      toFront();
      return false;
    }
  }
);
  addListener(new InputListener(){
    int edge;
    float startX, startY, lastX, lastY;
    public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      if (button == 0) {
        int border=resizeBorder;
        float width=getWidth(), height=getHeight();
        edge=0;
        if (isResizable) {
          if (x < border)           edge|=Align.left;
          if (x > width - border)           edge|=Align.right;
          if (y < border)           edge|=Align.bottom;
          if (y > height - border)           edge|=Align.top;
          if (edge != 0)           border+=25;
          if (x < border)           edge|=Align.left;
          if (x > width - border)           edge|=Align.right;
          if (y < border)           edge|=Align.bottom;
          if (y > height - border)           edge|=Align.top;
        }
        if (isMovable && edge == 0 && y >= height - getPadTop())         edge=MOVE;
        dragging=edge != 0;
        startX=x;
        startY=y;
        lastX=x;
        lastY=y;
      }
      return edge != 0 || isModal;
    }
    public void touchUp(    InputEvent event,    float x,    float y,    int pointer,    int button){
      dragging=false;
    }
    public void touchDragged(    InputEvent event,    float x,    float y,    int pointer){
      if (!dragging)       return;
      float width=getWidth(), height=getHeight();
      float windowX=getX(), windowY=getY();
      float minWidth=getMinWidth(), maxWidth=getMaxWidth();
      float minHeight=getMinHeight(), maxHeight=getMaxHeight();
      Stage stage=getStage();
      boolean clampPosition=keepWithinStage && getParent() == stage.getRoot();
      if ((edge & MOVE) != 0) {
        float amountX=x - startX, amountY=y - startY;
        windowX+=amountX;
        windowY+=amountY;
      }
      if ((edge & Align.left) != 0) {
        float amountX=x - startX;
        if (width - amountX < minWidth)         amountX=-(minWidth - width);
        if (clampPosition && windowX + amountX < 0)         amountX=-windowX;
        width-=amountX;
        windowX+=amountX;
      }
      if ((edge & Align.bottom) != 0) {
        float amountY=y - startY;
        if (height - amountY < minHeight)         amountY=-(minHeight - height);
        if (clampPosition && windowY + amountY < 0)         amountY=-windowY;
        height-=amountY;
        windowY+=amountY;
      }
      if ((edge & Align.right) != 0) {
        float amountX=x - lastX;
        if (width + amountX < minWidth)         amountX=minWidth - width;
        if (clampPosition && windowX + width + amountX > stage.getWidth())         amountX=stage.getWidth() - windowX - width;
        width+=amountX;
      }
      if ((edge & Align.top) != 0) {
        float amountY=y - lastY;
        if (height + amountY < minHeight)         amountY=minHeight - height;
        if (clampPosition && windowY + height + amountY > stage.getHeight())         amountY=stage.getHeight() - windowY - height;
        height+=amountY;
      }
      lastX=x;
      lastY=y;
      setBounds(Math.round(windowX),Math.round(windowY),Math.round(width),Math.round(height));
    }
    public boolean mouseMoved(    InputEvent event,    float x,    float y){
      return isModal;
    }
    public boolean scrolled(    InputEvent event,    float x,    float y,    int amount){
      return isModal;
    }
    public boolean keyDown(    InputEvent event,    int keycode){
      return isModal;
    }
    public boolean keyUp(    InputEvent event,    int keycode){
      return isModal;
    }
    public boolean keyTyped(    InputEvent event,    char character){
      return isModal;
    }
  }
);
}
