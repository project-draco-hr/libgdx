{
  if (title == null)   throw new IllegalArgumentException("title cannot be null.");
  this.title=title;
  setTouchable(Touchable.enabled);
  setClip(true);
  setStyle(style);
  setWidth(150);
  setHeight(150);
  setTitle(title);
  addCaptureListener(new InputListener(){
    public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      toFront();
      return false;
    }
  }
);
  addListener(new InputListener(){
    public boolean touchDown(    InputEvent event,    float x,    float y,    int pointer,    int button){
      if (button == 0) {
        dragging=isMovable && getHeight() - y <= getPadTop() && y < getHeight() && x > 0 && x < getWidth();
        dragOffset.set(x,y);
      }
      return dragging || isModal;
    }
    public void touchDragged(    InputEvent event,    float x,    float y,    int pointer){
      if (!dragging)       return;
      translate(x - dragOffset.x,y - dragOffset.y);
      if (keepWithinParent) {
        float parentWidth, parentHeight;
        Group parent=getParent();
        Stage stage=getStage();
        if (parent == stage.getRoot()) {
          parentWidth=stage.getWidth();
          parentHeight=stage.getHeight();
        }
 else {
          parentWidth=parent.getWidth();
          parentHeight=parent.getHeight();
        }
        if (getX() < 0)         setX(0);
        if (getRight() > parentWidth)         setX(parentWidth - getWidth());
        if (getY() < 0)         setY(0);
        if (getTop() > parentHeight)         setY(parentHeight - getHeight());
      }
    }
    public boolean mouseMoved(    InputEvent event,    float x,    float y){
      return isModal;
    }
    public boolean scrolled(    InputEvent event,    float x,    float y,    int amount){
      return isModal;
    }
    public boolean keyDown(    InputEvent event,    int keycode){
      return isModal;
    }
    public boolean keyUp(    InputEvent event,    int keycode){
      return isModal;
    }
    public boolean keyTyped(    InputEvent event,    char character){
      return isModal;
    }
  }
);
}
