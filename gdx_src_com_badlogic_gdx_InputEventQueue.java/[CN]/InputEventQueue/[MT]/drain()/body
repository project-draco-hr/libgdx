{
  IntArray q=processingQueue;
synchronized (this) {
    if (processor == null) {
      queue.clear();
      return;
    }
    q.addAll(queue);
    queue.clear();
  }
  InputProcessor localProcessor=processor;
  for (int i=0, n=q.size; i < n; ) {
    currentEventTime=(long)q.get(i++) << 32 | q.get(i++) & 0xFFFFFFFFL;
switch (q.get(i++)) {
case KEY_DOWN:
      localProcessor.keyDown(q.get(i++));
    break;
case KEY_UP:
  localProcessor.keyUp(q.get(i++));
break;
case KEY_TYPED:
localProcessor.keyTyped((char)q.get(i++));
break;
case TOUCH_DOWN:
localProcessor.touchDown(q.get(i++),q.get(i++),q.get(i++),q.get(i++));
break;
case TOUCH_UP:
localProcessor.touchUp(q.get(i++),q.get(i++),q.get(i++),q.get(i++));
break;
case TOUCH_DRAGGED:
localProcessor.touchDragged(q.get(i++),q.get(i++),q.get(i++));
break;
case MOUSE_MOVED:
localProcessor.mouseMoved(q.get(i++),q.get(i++));
break;
case SCROLLED:
localProcessor.scrolled(q.get(i++));
break;
}
}
q.clear();
}
