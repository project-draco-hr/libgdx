{
  LittleEndianInputStream in=new LittleEndianInputStream(new BufferedInputStream(inputStream));
  try {
    int numVertices=in.readInt();
    int numFaces=in.readInt();
    int numTextures=in.readInt();
    int numLightmaps=in.readInt();
    OctVert[] verts=new OctVert[numVertices];
    OctFace[] faces=new OctFace[numFaces];
    for (int i=0; i < numVertices; i++) {
      OctVert v=new OctVert();
      v.tu=in.readFloat();
      v.tv=in.readFloat();
      v.lu=in.readFloat();
      v.lv=in.readFloat();
      v.x=in.readFloat();
      v.y=in.readFloat();
      v.z=in.readFloat();
      verts[i]=v;
    }
    int numTriangles=0;
    for (int i=0; i < numFaces; i++) {
      OctFace f=new OctFace();
      f.start=in.readInt();
      f.num=in.readInt();
      f.id=in.readInt();
      f.lid=in.readInt();
      f.nx=in.readFloat();
      f.ny=in.readFloat();
      f.nz=in.readFloat();
      f.d=in.readFloat();
      faces[i]=f;
      numTriangles+=f.num - 2;
    }
    for (int i=0; i < numTextures * (64 + 4); i++)     in.read();
    for (int i=0; i < numLightmaps * (49152 + 4); i++)     in.read();
    start.set(in.readFloat(),in.readFloat(),in.readFloat());
    float[] triangles=new float[numTriangles * 3 * (3 + 3 + 2)];
    int idx=0;
    for (int i=0; i < numFaces; i++) {
      OctFace f=faces[i];
      OctVert v1=verts[f.start];
      for (int j=0; j < f.num - 2; j++) {
        OctVert v2=verts[f.start + j + 1];
        OctVert v3=verts[f.start + j + 2];
        triangles[idx++]=v1.x;
        triangles[idx++]=v1.y;
        triangles[idx++]=v1.z;
        triangles[idx++]=f.nx;
        triangles[idx++]=f.ny;
        triangles[idx++]=f.nz;
        triangles[idx++]=v1.tu;
        triangles[idx++]=v1.tv;
        triangles[idx++]=v2.x;
        triangles[idx++]=v2.y;
        triangles[idx++]=v2.z;
        triangles[idx++]=f.nx;
        triangles[idx++]=f.ny;
        triangles[idx++]=f.nz;
        triangles[idx++]=v2.tu;
        triangles[idx++]=v2.tv;
        triangles[idx++]=v3.x;
        triangles[idx++]=v3.y;
        triangles[idx++]=v3.z;
        triangles[idx++]=f.nx;
        triangles[idx++]=f.ny;
        triangles[idx++]=f.nz;
        triangles[idx++]=v3.tu;
        triangles[idx++]=v3.tv;
      }
    }
    Mesh m=new Mesh(graphics,managed,true,!useFloats,numTriangles * 3,0,new VertexAttribute(Usage.Position,3,"a_position"),new VertexAttribute(Usage.Normal,3,"a_position"),new VertexAttribute(Usage.TextureCoordinates,2,"a_texCoords"));
    if (useFloats)     m.setVertices(triangles);
 else     m.setVertices(convertToFixedPoint(triangles));
    return m;
  }
 catch (  Exception ex) {
    ex.printStackTrace();
    return null;
  }
}
