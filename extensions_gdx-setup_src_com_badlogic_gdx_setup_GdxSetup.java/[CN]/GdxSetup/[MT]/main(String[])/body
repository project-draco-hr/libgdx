{
  Map<String,String> params=parseArgs(args);
  List<String> excludedModules=null;
  if (params.containsKey("excludeModules"))   excludedModules=parseExcludedModules(params.get("excludeModules"));
  if (!params.containsKey("dir") || !params.containsKey("name") || !params.containsKey("package")|| !params.containsKey("mainClass")|| (!params.containsKey("sdkLocation") && System.getenv("ANDROID_HOME") == null && (excludedModules == null || !excludedModules.contains("android")))) {
    new GdxSetupUI();
    printHelp();
  }
 else {
    String sdkLocation="";
    if (excludedModules == null || !excludedModules.contains("android")) {
      if (System.getenv("ANDROID_HOME") != null && !params.containsKey("sdkLocation")) {
        sdkLocation=System.getenv("ANDROID_HOME");
      }
 else {
        sdkLocation=params.get("sdkLocation");
      }
    }
    DependencyBank bank=new DependencyBank();
    ProjectBuilder builder=new ProjectBuilder(bank);
    List<ProjectType> projects=new ArrayList<ProjectType>();
    projects.add(ProjectType.CORE);
    if (excludedModules == null) {
      projects.add(ProjectType.DESKTOP);
      projects.add(ProjectType.ANDROID);
      projects.add(ProjectType.IOS);
      projects.add(ProjectType.HTML);
    }
 else {
      if (!excludedModules.contains("desktop"))       projects.add(ProjectType.DESKTOP);
      if (!excludedModules.contains("android"))       projects.add(ProjectType.ANDROID);
      if (!excludedModules.contains("ios"))       projects.add(ProjectType.IOS);
      if (!excludedModules.contains("html"))       projects.add(ProjectType.HTML);
    }
    List<Dependency> dependencies=new ArrayList<Dependency>();
    if (params.containsKey("extensions")) {
      dependencies.addAll(parseDependencies(params.get("extensions"),bank));
    }
 else {
      dependencies.add(bank.getDependency(ProjectDependency.GDX));
    }
    builder.buildProject(projects,dependencies);
    builder.build();
    new GdxSetup().build(builder,params.get("dir"),params.get("name"),params.get("package"),params.get("mainClass"),sdkLocation,new CharCallback(){
      @Override public void character(      char c){
        System.out.print(c);
      }
    }
,null);
  }
}
