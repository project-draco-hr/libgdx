{
  if (start == end)   return -1;
switch (str.charAt(start)) {
case '#':
    int colorInt=0;
  for (int i=start + 1; i < end; i++) {
    char ch=str.charAt(i);
    if (ch == ']') {
      if (i < start + 2 || i > start + 9)       break;
      if (i - start <= 7) {
        for (int ii=0, nn=9 - (i - start); ii < nn; ii++)         colorInt=colorInt << 4;
        colorInt|=0xff;
      }
      Color color=colorPool.obtain();
      colorStack.add(color);
      Color.rgba8888ToColor(color,colorInt);
      return i - start;
    }
    if (ch >= '0' && ch <= '9')     colorInt=colorInt * 16 + (ch - '0');
 else     if (ch >= 'a' && ch <= 'f')     colorInt=colorInt * 16 + (ch - ('a' - 10));
 else     if (ch >= 'A' && ch <= 'F')     colorInt=colorInt * 16 + (ch - ('A' - 10));
 else     break;
  }
return -1;
case '[':
return -1;
case ']':
if (colorStack.size > 1) colorPool.free(colorStack.pop());
return 0;
}
int colorStart=start;
for (int i=start + 1; i < end; i++) {
char ch=str.charAt(i);
if (ch != ']') continue;
Color namedColor=Colors.get(str.subSequence(colorStart,i).toString());
if (namedColor == null) return -1;
Color color=colorPool.obtain();
colorStack.add(color);
color.set(namedColor);
return i - start;
}
return -1;
}
