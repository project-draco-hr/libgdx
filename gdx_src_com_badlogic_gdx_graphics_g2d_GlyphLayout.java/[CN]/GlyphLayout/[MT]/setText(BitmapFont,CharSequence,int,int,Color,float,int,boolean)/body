{
  if (targetWidth == 0)   wrap=false;
  BitmapFontData fontData=font.data;
  boolean markupEnabled=fontData.markupEnabled;
  Pool<GlyphRun> glyphRunPool=Pools.get(GlyphRun.class);
  glyphRunPool.freeAll(runs);
  runs.clear();
  float x=0, y=0, width=0;
  int lines=0;
  Color nextColor=color;
  colorStack.add(color);
  int runStart=start;
  while (true) {
    int runEnd=-1;
    boolean newline=false;
    if (start == end) {
      if (runStart == end)       break;
      runEnd=end;
    }
 else {
switch (str.charAt(start++)) {
case '\n':
        runEnd=start - 1;
      newline=true;
    break;
case '[':
  if (markupEnabled) {
    int length=parseColorMarkup(str,start,end);
    if (length >= 0) {
      runEnd=start - 1;
      start+=length + 1;
      nextColor=colorStack.peek();
    }
  }
break;
}
}
if (runEnd != -1) {
GlyphRun run=glyphRunPool.obtain();
runs.add(run);
run.color.set(color);
run.x=x;
run.y=y;
fontData.getGlyphs(run,str,runStart,runEnd);
for (int i=0, n=run.xAdvances.size; i < n; i++) {
float xAdvance=run.xAdvances.get(i);
x+=xAdvance;
if (wrap && x > targetWidth && i > 0) {
GlyphRun next=glyphRunPool.obtain();
runs.add(next);
wrap(fontData,run,next,Math.max(1,fontData.getWrapIndex(run.glyphs,i)),i);
width=Math.max(width,run.width);
x=0;
y+=font.data.down;
lines++;
next.x=0;
next.y=y;
i=-1;
n=next.xAdvances.size;
run=next;
}
 else run.width+=xAdvance;
}
if (newline) {
width=Math.max(width,x);
x=0;
y+=font.data.down;
lines++;
}
runStart=start;
color=nextColor;
}
}
width=Math.max(width,x);
Pools.freeAll(colorStack,true);
colorStack.clear();
if ((halign & Align.left) == 0) {
boolean center=(halign & Align.center) != 0;
float lineWidth=0, lineY=Integer.MIN_VALUE;
int lineStart=0, n=runs.size;
for (int i=0; i < n; i++) {
GlyphRun run=runs.get(i);
if (run.y != lineY) {
lineY=run.y;
float shift=targetWidth - lineWidth;
if (center) shift/=2;
while (lineStart < i) runs.get(lineStart++).x+=shift;
lineWidth=0;
}
lineWidth+=run.width;
}
float shift=targetWidth - lineWidth;
if (center) shift/=2;
while (lineStart < n) runs.get(lineStart++).x+=shift;
}
this.width=width;
this.height=font.data.capHeight + lines * font.data.lineHeight;
}
