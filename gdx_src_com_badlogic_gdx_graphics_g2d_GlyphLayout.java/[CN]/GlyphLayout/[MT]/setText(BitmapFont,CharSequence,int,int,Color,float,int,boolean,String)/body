{
  if (truncate != null)   wrap=true;
 else   if (targetWidth <= font.data.spaceWidth)   wrap=false;
  BitmapFontData fontData=font.data;
  boolean markupEnabled=fontData.markupEnabled;
  Pool<GlyphRun> glyphRunPool=Pools.get(GlyphRun.class);
  Array<GlyphRun> runs=this.runs;
  glyphRunPool.freeAll(runs);
  runs.clear();
  float x=0, y=0, width=0;
  int lines=0;
  Array<Color> colorStack=GlyphLayout.colorStack;
  Color nextColor=color;
  colorStack.add(color);
  Pool<Color> colorPool=Pools.get(Color.class);
  int runStart=start;
  outer:   while (true) {
    int runEnd=-1;
    boolean newline=false;
    if (start == end) {
      if (runStart == end)       break;
      runEnd=end;
    }
 else {
switch (str.charAt(start++)) {
case '\n':
        runEnd=start - 1;
      newline=true;
    break;
case '[':
  if (markupEnabled) {
    int length=parseColorMarkup(str,start,end,colorPool);
    if (length >= 0) {
      runEnd=start - 1;
      start+=length + 1;
      nextColor=colorStack.peek();
    }
  }
break;
}
}
if (runEnd != -1) {
if (runEnd != runStart) {
GlyphRun run=glyphRunPool.obtain();
runs.add(run);
run.color.set(color);
run.x=x;
run.y=y;
fontData.getGlyphs(run,str,runStart,runEnd);
float[] xAdvances=run.xAdvances.items;
for (int i=0, n=run.xAdvances.size; i < n; i++) {
float xAdvance=xAdvances[i];
x+=xAdvance;
if (wrap && x > targetWidth && i > 1 && x - xAdvance + (run.glyphs.get(i - 1).xoffset + run.glyphs.get(i - 1).width) * fontData.scaleX - 0.00001f > targetWidth) {
  if (truncate != null) {
    truncate(fontData,run,targetWidth,truncate,i,glyphRunPool);
    x=run.x + run.width;
    break outer;
  }
  int wrapIndex=fontData.getWrapIndex(run.glyphs,i - 1);
  if ((run.x == 0 && wrapIndex == 0) || wrapIndex >= run.glyphs.size) {
    wrapIndex=i - 1;
  }
  GlyphRun next=wrap(fontData,run,glyphRunPool,wrapIndex,i);
  runs.add(next);
  width=Math.max(width,run.x + run.width);
  x=0;
  y+=fontData.down;
  lines++;
  next.x=0;
  next.y=y;
  i=-1;
  n=next.xAdvances.size;
  xAdvances=next.xAdvances.items;
  run=next;
}
 else run.width+=xAdvance;
}
if (newline) {
width=Math.max(width,x);
x=0;
y+=fontData.down;
lines++;
}
}
runStart=start;
color=nextColor;
}
}
width=Math.max(width,x);
for (int i=1, n=colorStack.size; i < n; i++) colorPool.free(colorStack.get(i));
colorStack.clear();
if ((halign & Align.left) == 0) {
boolean center=(halign & Align.center) != 0;
float lineWidth=0, lineY=Integer.MIN_VALUE;
int lineStart=0, n=runs.size;
for (int i=0; i < n; i++) {
GlyphRun run=runs.get(i);
if (run.y != lineY) {
lineY=run.y;
float shift=targetWidth - lineWidth;
if (center) shift/=2;
while (lineStart < i) runs.get(lineStart++).x+=shift;
lineWidth=0;
}
lineWidth+=run.width;
}
float shift=targetWidth - lineWidth;
if (center) shift/=2;
while (lineStart < n) runs.get(lineStart++).x+=shift;
}
this.width=width;
this.height=fontData.capHeight + lines * fontData.lineHeight;
}
