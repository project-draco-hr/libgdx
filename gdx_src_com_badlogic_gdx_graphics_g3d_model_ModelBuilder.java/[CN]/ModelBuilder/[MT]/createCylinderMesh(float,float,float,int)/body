{
  final int stride=6;
  final float hw=width * 0.5f;
  final float hh=height * 0.5f;
  final float hd=depth * 0.5f;
  final float step=MathUtils.PI2 / divisions;
  for (int i=0; i < divisions; i++) {
    final float angle=step * i;
    vectorArray.add(vectorPool.obtain().set(MathUtils.cos(angle) * hw,0f,MathUtils.sin(angle) * hd));
  }
  final float[] vertices=new float[divisions * 4 * stride];
  final short[] indices=new short[divisions * 6];
  int voffset=0;
  int ioffset=0;
  for (int i=0; i < divisions; i++) {
    final Vector3 v1=vectorArray.get(i);
    final Vector3 v2=vectorArray.get((i + 1) % divisions);
    final Vector3 n=tempV1.set(v1).lerp(v2,0.5f).nor();
    vertices[voffset++]=v1.x;
    vertices[voffset++]=-hh;
    vertices[voffset++]=v1.z;
    vertices[voffset++]=n.x;
    vertices[voffset++]=n.y;
    vertices[voffset++]=n.z;
    vertices[voffset++]=v2.x;
    vertices[voffset++]=-hh;
    vertices[voffset++]=v2.z;
    vertices[voffset++]=n.x;
    vertices[voffset++]=n.y;
    vertices[voffset++]=n.z;
    vertices[voffset++]=v1.x;
    vertices[voffset++]=hh;
    vertices[voffset++]=v1.z;
    vertices[voffset++]=n.x;
    vertices[voffset++]=n.y;
    vertices[voffset++]=n.z;
    vertices[voffset++]=v2.x;
    vertices[voffset++]=hh;
    vertices[voffset++]=v2.z;
    vertices[voffset++]=n.x;
    vertices[voffset++]=n.y;
    vertices[voffset++]=n.z;
    indices[ioffset++]=(short)(i * 4);
    indices[ioffset++]=(short)(i * 4 + 1);
    indices[ioffset++]=(short)(i * 4 + 2);
    indices[ioffset++]=(short)(i * 4 + 1);
    indices[ioffset++]=(short)(i * 4 + 2);
    indices[ioffset++]=(short)(i * 4 + 3);
  }
  vectorPool.freeAll(vectorArray);
  vectorArray.clear();
  final Mesh result=new Mesh(true,vertices.length,indices.length,new VertexAttribute(Usage.Position,3,"a_position"),new VertexAttribute(Usage.Normal,3,"a_normal"));
  result.setVertices(vertices);
  result.setIndices(indices);
  return result;
}
