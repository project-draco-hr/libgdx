{
  OuyaEncryptionHelper helper=new OuyaEncryptionHelper();
  List<Receipt> receipts=null;
  try {
    JSONObject response=new JSONObject(receiptResponse);
    if (response.has("key") && response.has("iv")) {
      receipts=helper.decryptReceiptResponse(response,ouyaPublicKey);
    }
 else     receipts=helper.parseJSONReceiptResponse(receiptResponse);
  }
 catch (  ParseException e) {
    observer.handleRestoreError(e);
    throw new RuntimeException(e);
  }
catch (  JSONException e) {
    observer.handleRestoreError(e);
    throw new RuntimeException(e);
  }
catch (  GeneralSecurityException e) {
    observer.handleRestoreError(e);
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    observer.handleRestoreError(e);
    throw new RuntimeException(e);
  }
catch (  java.text.ParseException e) {
    observer.handleRestoreError(e);
    e.printStackTrace();
  }
  Collections.sort(receipts,new Comparator<Receipt>(){
    @Override public int compare(    Receipt lhs,    Receipt rhs){
      return rhs.getPurchaseDate().compareTo(lhs.getPurchaseDate());
    }
  }
);
  mReceiptList=receipts;
  List<Transaction> transactions=new ArrayList<Transaction>(mReceiptList.size());
  for (int i=0; i < mReceiptList.size(); i++) {
    transactions.add(convertToTransaction(mReceiptList.get(i)));
  }
  observer.handleRestore(transactions.toArray(new Transaction[transactions.size()]));
}
