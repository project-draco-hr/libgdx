{
  Vec2 cA=data.positions[m_indexA].c;
  float aA=data.positions[m_indexA].a;
  Vec2 cB=data.positions[m_indexB].c;
  float aB=data.positions[m_indexB].a;
  Vec2 cC=data.positions[m_indexC].c;
  float aC=data.positions[m_indexC].a;
  Vec2 cD=data.positions[m_indexD].c;
  float aD=data.positions[m_indexD].a;
  Rot qA=pool.popRot(), qB=pool.popRot(), qC=pool.popRot(), qD=pool.popRot();
  qA.set(aA);
  qB.set(aB);
  qC.set(aC);
  qD.set(aD);
  float linearError=0.0f;
  float coordinateA, coordinateB;
  Vec2 temp=pool.popVec2();
  Vec2 JvAC=pool.popVec2();
  Vec2 JvBD=pool.popVec2();
  float JwA, JwB, JwC, JwD;
  float mass=0.0f;
  if (m_typeA == JointType.REVOLUTE) {
    JvAC.setZero();
    JwA=1.0f;
    JwC=1.0f;
    mass+=m_iA + m_iC;
    coordinateA=aA - aC - m_referenceAngleA;
  }
 else {
    Vec2 rC=pool.popVec2();
    Vec2 rA=pool.popVec2();
    Vec2 pC=pool.popVec2();
    Vec2 pA=pool.popVec2();
    Rot.mulToOutUnsafe(qC,m_localAxisC,JvAC);
    Rot.mulToOutUnsafe(qC,temp.set(m_localAnchorC).subLocal(m_lcC),rC);
    Rot.mulToOutUnsafe(qA,temp.set(m_localAnchorA).subLocal(m_lcA),rA);
    JwC=Vec2.cross(rC,JvAC);
    JwA=Vec2.cross(rA,JvAC);
    mass+=m_mC + m_mA + m_iC * JwC * JwC + m_iA * JwA * JwA;
    pC.set(m_localAnchorC).subLocal(m_lcC);
    Rot.mulTransUnsafe(qC,temp.set(rA).addLocal(cA).subLocal(cC),pA);
    coordinateA=Vec2.dot(pA.subLocal(pC),m_localAxisC);
    pool.pushVec2(4);
  }
  if (m_typeB == JointType.REVOLUTE) {
    JvBD.setZero();
    JwB=m_ratio;
    JwD=m_ratio;
    mass+=m_ratio * m_ratio * (m_iB + m_iD);
    coordinateB=aB - aD - m_referenceAngleB;
  }
 else {
    Vec2 u=pool.popVec2();
    Vec2 rD=pool.popVec2();
    Vec2 rB=pool.popVec2();
    Vec2 pD=pool.popVec2();
    Vec2 pB=pool.popVec2();
    Rot.mulToOutUnsafe(qD,m_localAxisD,u);
    Rot.mulToOutUnsafe(qD,temp.set(m_localAnchorD).subLocal(m_lcD),rD);
    Rot.mulToOutUnsafe(qB,temp.set(m_localAnchorB).subLocal(m_lcB),rB);
    JvBD.set(u).mulLocal(m_ratio);
    JwD=Vec2.cross(rD,u);
    JwB=Vec2.cross(rB,u);
    mass+=m_ratio * m_ratio * (m_mD + m_mB) + m_iD * JwD * JwD + m_iB * JwB * JwB;
    pD.set(m_localAnchorD).subLocal(m_lcD);
    Rot.mulTransUnsafe(qD,temp.set(rB).addLocal(cB).subLocal(cD),pB);
    coordinateB=Vec2.dot(pB.subLocal(pD),m_localAxisD);
    pool.pushVec2(5);
  }
  float C=(coordinateA + m_ratio * coordinateB) - m_constant;
  float impulse=0.0f;
  if (mass > 0.0f) {
    impulse=-C / mass;
  }
  pool.pushVec2(3);
  pool.pushRot(4);
  cA.x+=(m_mA * impulse) * JvAC.x;
  cA.y+=(m_mA * impulse) * JvAC.y;
  aA+=m_iA * impulse * JwA;
  cB.x+=(m_mB * impulse) * JvBD.x;
  cB.y+=(m_mB * impulse) * JvBD.y;
  aB+=m_iB * impulse * JwB;
  cC.x-=(m_mC * impulse) * JvAC.x;
  cC.y-=(m_mC * impulse) * JvAC.y;
  aC-=m_iC * impulse * JwC;
  cD.x-=(m_mD * impulse) * JvBD.x;
  cD.y-=(m_mD * impulse) * JvBD.y;
  aD-=m_iD * impulse * JwD;
  data.positions[m_indexA].a=aA;
  data.positions[m_indexB].a=aB;
  data.positions[m_indexC].a=aC;
  data.positions[m_indexD].a=aD;
  return linearError < Settings.linearSlop;
}
