{
  float tempx, tempy;
  final Vec2 v1=m_vertex1;
  final Vec2 v2=m_vertex2;
  final Rot xfq=xf.q;
  final Vec2 xfp=xf.p;
  tempx=input.p1.x - xfp.x;
  tempy=input.p1.y - xfp.y;
  final float p1x=xfq.c * tempx + xfq.s * tempy;
  final float p1y=-xfq.s * tempx + xfq.c * tempy;
  tempx=input.p2.x - xfp.x;
  tempy=input.p2.y - xfp.y;
  final float p2x=xfq.c * tempx + xfq.s * tempy;
  final float p2y=-xfq.s * tempx + xfq.c * tempy;
  final float dx=p2x - p1x;
  final float dy=p2y - p1y;
  normal.x=v2.y - v1.y;
  normal.y=v1.x - v2.x;
  normal.normalize();
  final float normalx=normal.x;
  final float normaly=normal.y;
  tempx=v1.x - p1x;
  tempy=v1.y - p1y;
  float numerator=normalx * tempx + normaly * tempy;
  float denominator=normalx * dx + normaly * dy;
  if (denominator == 0.0f) {
    return false;
  }
  float t=numerator / denominator;
  if (t < 0.0f || 1.0f < t) {
    return false;
  }
  final float qx=p1x + t * dx;
  final float qy=p1y + t * dy;
  final float rx=v2.x - v1.x;
  final float ry=v2.y - v1.y;
  final float rr=rx * rx + ry * ry;
  if (rr == 0.0f) {
    return false;
  }
  tempx=qx - v1.x;
  tempy=qy - v1.y;
  float s=(tempx * rx + tempy * ry) / rr;
  if (s < 0.0f || 1.0f < s) {
    return false;
  }
  output.fraction=t;
  if (numerator > 0.0f) {
    output.normal.x=-xfq.c * normal.x + xfq.s * normal.y;
    output.normal.y=-xfq.s * normal.x - xfq.c * normal.y;
  }
 else {
    output.normal.x=xfq.c * normal.x - xfq.s * normal.y;
    output.normal.y=xfq.s * normal.x + xfq.c * normal.y;
  }
  return true;
}
