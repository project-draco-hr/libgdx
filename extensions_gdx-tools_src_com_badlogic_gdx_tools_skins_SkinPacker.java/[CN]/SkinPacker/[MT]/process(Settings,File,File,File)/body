{
  Texture.setEnforcePotImages(false);
  final File packedDir=new File("temp-packed");
  new FileHandle(packedDir).deleteDirectory();
  imageFile.delete();
  final ObjectMap<String,Splits> nameToSplits=new ObjectMap();
  final TexturePacker texturePacker=new TexturePacker(settings);
  FileProcessor regionProcessor=new FileProcessor(){
    protected void processFile(    InputFile inputFile) throws Exception {
      texturePacker.addImage(ImageIO.read(inputFile.inputFile),inputFile.outputFile.getName());
    }
  }
;
  regionProcessor.setRecursive(false);
  regionProcessor.setInputFilter(new FilenameFilter(){
    public boolean accept(    File dir,    String name){
      return name.endsWith(".png") && !name.endsWith(".9.png");
    }
  }
);
  regionProcessor.setOutputSuffix("");
  regionProcessor.process(inputDir,inputDir);
  FileProcessor ninePatchProcessor=new FileProcessor(){
    protected void processFile(    InputFile inputFile) throws Exception {
      BufferedImage image=ImageIO.read(inputFile.inputFile);
      String name=inputFile.outputFile.getName();
      name=name.substring(0,name.length() - 2);
      image=split(image,name);
      texturePacker.addImage(image,name);
    }
    private BufferedImage split(    BufferedImage image,    String name){
      nameToSplits.put(name,getSplits(image,name));
      BufferedImage newImage=new BufferedImage(image.getWidth() - 2,image.getHeight() - 2,BufferedImage.TYPE_4BYTE_ABGR);
      newImage.getGraphics().drawImage(image,0,0,newImage.getWidth(),newImage.getHeight(),1,1,image.getWidth() - 1,image.getHeight() - 1,null);
      return newImage;
    }
  }
;
  ninePatchProcessor.setRecursive(false);
  ninePatchProcessor.addInputSuffix(".9.png");
  ninePatchProcessor.setOutputSuffix("");
  ninePatchProcessor.process(inputDir,inputDir);
  final File packFile=new File(packedDir,"pack");
  texturePacker.process(packedDir,packFile,"skin");
  if (!packFile.exists())   throw new RuntimeException("No images were packed from input directory: " + inputDir.getAbsolutePath());
  JoglApplicationConfiguration config=new JoglApplicationConfiguration();
  config.width=1;
  config.height=1;
  config.title="SkinPacker";
  final CountDownLatch latch=new CountDownLatch(2);
  new JoglApplication(new ApplicationListener(){
    public void create(){
      try {
        Skin skin=new Skin();
        TextureAtlasData atlas=new TextureAtlasData(new FileHandle(packFile),new FileHandle(packedDir),true);
        if (atlas.getPages().size > 1)         throw new GdxRuntimeException("Skin images could not be packed on to a single image!");
        Texture texture=new Texture(1,1,Format.Alpha);
        for (        Region region : atlas.getRegions()) {
          Splits splits=nameToSplits.get(region.name);
          TextureRegion textureRegion=new TextureRegion(texture,region.left,region.top,region.width,region.height);
          if (splits == null) {
            skin.addResource(region.name,textureRegion);
          }
 else {
            if (splits.singleRegion)             skin.addResource(region.name,new NinePatch(textureRegion));
 else {
              skin.addResource(region.name,new NinePatch(textureRegion,splits.startX,region.width - splits.endX,splits.startY,region.height - splits.endY));
            }
          }
        }
        FileHandle newSkinFile=new FileHandle(new File(inputDir,"temp-skin"));
        skin.save(newSkinFile);
        atlas.getPages().get(0).textureFile.moveTo(new FileHandle(imageFile));
        new FileHandle(packedDir).deleteDirectory();
        Json json=new Json();
        if (skinFile != null) {
          FileHandle oldSkinFile=new FileHandle(skinFile);
          OrderedMap oldSkin=json.fromJson(OrderedMap.class,oldSkinFile);
          OrderedMap newSkin=json.fromJson(OrderedMap.class,newSkinFile);
          OrderedMap oldResources=(OrderedMap)oldSkin.get("resources");
          OrderedMap newResources=(OrderedMap)newSkin.get("resources");
          OrderedMap newPatches=(OrderedMap)newResources.get(NinePatch.class.getName());
          newPatches.orderedKeys().sort();
          oldResources.put(NinePatch.class.getName(),newPatches);
          OrderedMap newRegions=(OrderedMap)newResources.get(TextureRegion.class.getName());
          newRegions.orderedKeys().sort();
          oldResources.put(TextureRegion.class.getName(),newRegions);
          Writer writer=oldSkinFile.writer(false);
          try {
            writer.write(json.prettyPrint(oldSkin,130));
            writer.close();
          }
 catch (          IOException ex) {
            throw new RuntimeException(ex);
          }
        }
 else {
          newSkinFile.moveTo(new FileHandle(inputDir).child("skin.json"));
        }
        newSkinFile.delete();
      }
  finally {
        Gdx.app.exit();
        latch.countDown();
      }
    }
    public void resume(){
    }
    public void resize(    int width,    int height){
    }
    public void render(){
    }
    public void pause(){
    }
    public void dispose(){
    }
  }
,config);
  latch.countDown();
  latch.await();
}
