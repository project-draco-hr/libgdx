{
  lightManager=new LightManager(LIGHTS_NUM,LightQuality.FRAGMENT);
  for (int i=0; i < LIGHTS_NUM; i++) {
    PointLight l=new PointLight();
    l.position.set(MathUtils.random(6) - 3,1 + MathUtils.random(6),MathUtils.random(6) - 3);
    l.color.r=MathUtils.random();
    l.color.b=MathUtils.random();
    l.color.g=MathUtils.random();
    l.intensity=LIGHT_INTESITY;
    lightManager.addLigth(l);
  }
  lightManager.dirLight=new DirectionalLight();
  lightManager.dirLight.color.set(0.1f,0.1f,0.1f,1);
  lightManager.dirLight.direction.set(-.4f,-1,0.03f).nor();
  lightManager.ambientLight.set(.01f,0.01f,0.03f,0f);
  cam=new PerspectiveCamera(45,Gdx.graphics.getWidth(),Gdx.graphics.getHeight());
  cam.near=0.1f;
  cam.far=64f;
  cam.position.set(2,2.75f,1f);
  cam.update();
  camController=new PerspectiveCamController(cam);
  Gdx.input.setInputProcessor(camController);
  texture=new Texture(Gdx.files.internal("data/models/robot.jpg"),Format.RGB565,true);
  texture.setFilter(TextureFilter.MipMapLinearNearest,TextureFilter.Linear);
  String fileName="data/models/ninja.mesh.xml";
  if (!fileName.endsWith(".g3d") && Gdx.app.getType() == ApplicationType.Desktop) {
    model=ModelLoaderRegistry.loadSkeletonModel(Gdx.files.internal(fileName));
    if (model == null) {
      model=new OgreXmlLoader().load(Gdx.files.internal(fileName),Gdx.files.internal(fileName.replace("mesh.xml","skeleton.xml")));
    }
    G3dExporter.export(model,Gdx.files.absolute(fileName + ".g3d"));
    model=G3dLoader.loadSkeletonModel(Gdx.files.absolute(fileName + ".g3d"));
  }
 else {
    model=ModelLoaderRegistry.loadSkeletonModel(Gdx.files.internal(fileName));
  }
  if (useGpuSkinning) {
    model=SkeletonModelGpuSkinned.CreateFromSkeletonModel(model);
  }
  protoRenderer=new PrototypeRendererGL20(lightManager);
  protoRenderer.cam=cam;
  MaterialAttribute c1=new ColorAttribute(new Color(0.75f,0.75f,0.75f,0.3f),ColorAttribute.diffuse);
  MaterialAttribute c2=new ColorAttribute(new Color(0.35f,0.35f,0.35f,0.35f),ColorAttribute.specular);
  MaterialAttribute c3=new ColorAttribute(new Color(0.2f,1f,0.15f,1.0f),ColorAttribute.rim);
  MaterialAttribute c4=new ColorAttribute(new Color(0.0f,0.0f,0.0f,0.35f),ColorAttribute.fog);
  MaterialAttribute b=new BlendingAttribute(BlendingAttribute.translucent);
  BoundingBox box=new BoundingBox();
  for (int i=0; i < gridSize; i++) {
    for (int j=0; j < gridSize; j++) {
      AnimatedModelNode instance=new AnimatedModelNode();
      SkeletonAnimation[] animations=model.getAnimations();
      SkeletonAnimation sa=animations[(i + j * gridSize) % animations.length];
      instance.animation=sa.name;
      instance.time=MathUtils.random(sa.totalDuration);
      instance.looping=true;
      model.getBoundingBox(box);
      instance.matrix.trn(-1.75f,0f,-5.5f);
      instance.matrix.scale(0.01f,0.01f,0.01f);
      box.mul(instance.matrix);
      instance.radius=(box.getDimensions().len() / 2);
      animInstance[i][j]=instance;
    }
  }
  MaterialAttribute t1=new TextureAttribute(texture,0,TextureAttribute.diffuseTexture);
  GpuSkinningAttribute gpuAttribute=new GpuSkinningAttribute(model.skeleton);
  Material material=new Material("s",t1,gpuAttribute);
  model.setMaterial(material);
}
