{
  FileHandle inputDirHandle=new FileHandle(inputDir.getAbsolutePath());
  File[] files=inputDir.listFiles(new TmxFilter());
  ObjectMap<String,TiledMapTileSet> tilesetsToPack=new ObjectMap<String,TiledMapTileSet>();
  for (  File file : files) {
    map=mapLoader.load(file.getAbsolutePath());
    if (this.settings.stripUnusedTiles) {
      int mapWidth=map.getProperties().get("width",Integer.class);
      int mapHeight=map.getProperties().get("height",Integer.class);
      int numlayers=map.getLayers().getCount();
      int bucketSize=mapWidth * mapHeight * numlayers;
      Iterator<MapLayer> it=map.getLayers().iterator();
      while (it.hasNext()) {
        MapLayer layer=it.next();
        if (layer instanceof TiledMapTileLayer) {
          TiledMapTileLayer tlayer=(TiledMapTileLayer)layer;
          for (int y=0; y < mapHeight; ++y) {
            for (int x=0; x < mapWidth; ++x) {
              if (tlayer.getCell(x,y) != null) {
                TiledMapTile tile=tlayer.getCell(x,y).getTile();
                if (tile instanceof AnimatedTiledMapTile) {
                  AnimatedTiledMapTile aTile=(AnimatedTiledMapTile)tile;
                  for (                  StaticTiledMapTile t : aTile.getFrameTiles()) {
                    addTile(t,bucketSize,tilesetsToPack);
                  }
                }
                addTile(tile,bucketSize,tilesetsToPack);
              }
            }
          }
        }
      }
    }
 else {
      for (      TiledMapTileSet tileset : map.getTileSets()) {
        String tilesetName=tileset.getName();
        if (!tilesetsToPack.containsKey(tilesetName)) {
          tilesetsToPack.put(tilesetName,tileset);
        }
      }
    }
    FileHandle tmxFile=new FileHandle(file.getAbsolutePath());
    writeUpdatedTMX(map,outputDir,tmxFile);
  }
  packTilesets(tilesetsToPack,inputDirHandle,outputDir,settings);
}
