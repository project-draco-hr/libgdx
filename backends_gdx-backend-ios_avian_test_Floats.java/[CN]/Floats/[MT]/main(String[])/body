{
  expect(new Double(42.0) == 42.0);
{
    Rectangle r=new Rectangle();
    Rectangle.class.getMethod("setX",double.class).invoke(r,42.0);
    expect(r.x == 42.0);
  }
{
    double input[]=new double[8];
    double left[]=new double[8];
    double right[]=new double[8];
    input[0]=732.0;
    input[1]=952.0;
    input[2]=761.0;
    input[3]=942.0;
    input[4]=786.0;
    input[5]=944.0;
    input[6]=813.0;
    input[7]=939.0;
    subdivide(input,0,left,0,right,0);
    expect(left[0] == 732.0);
    expect(left[1] == 952.0);
    expect(left[2] == 746.5);
    expect(left[3] == 947.0);
    expect(left[4] == 760.0);
    expect(left[5] == 945.0);
    expect(left[6] == 773.25);
    expect(left[7] == 943.625);
    expect(right[0] == 773.25);
    expect(right[1] == 943.625);
    expect(right[2] == 786.5);
    expect(right[3] == 942.25);
    expect(right[4] == 799.5);
    expect(right[5] == 941.5);
    expect(right[6] == 813.0);
    expect(right[7] == 939.0);
  }
  expect(multiply(0.5d,0.5d) == 0.25d);
  expect(multiply(0.5f,0.5f) == 0.25f);
  expect(multiply(0.5d,0.1d) == 0.05d);
  expect(multiply(0.5f,0.1f) == 0.05f);
  expect(multiply(0.5d,0.5d) < 0.5d);
  expect(multiply(0.5f,0.5f) < 0.5f);
  expect(multiply(0.5d,0.1d) < 0.5d);
  expect(multiply(0.5f,0.1f) < 0.5f);
  expect(multiply(0.5d,0.5d) > 0.1d);
  expect(multiply(0.5f,0.5f) > 0.1f);
  expect(multiply(0.5d,0.1d) > 0.01d);
  expect(multiply(0.5f,0.1f) > 0.01f);
  expect(divide(0.5d,0.5d) == 1.0d);
  expect(divide(0.5d,0.1d) == 5.0d);
  expect(subtract(0.5d,0.5d) == 0.0d);
  expect(subtract(0.5d,0.1d) == 0.4d);
{
    double d=1d;
    expect(((int)d) == 1);
  }
{
    double d=12345d;
    expect(((int)d) == 12345);
  }
  expect(doubleToInt(new Floats()) == 100);
{
    Floats f=new Floats();
    f.field=32.0d;
    expect(loadAndMultiply(2.0d,f) == 64.0d);
  }
{
    Floats f=new Floats();
    f.field=32.0d;
    expect(multiply(2.0d,f.field) == 64.0d);
  }
{
    Floats f=new Floats();
    multiplyAndStore(32.0d,0.5d,f);
    expect(f.field == 16.0d);
  }
{
    float f=1f;
    expect(((int)f) == 1);
  }
{
    float f=1f;
    expect(((long)f) == 1);
  }
  expect(Math.round(0.4f) == 0);
  expect(Math.round(0.5f) == 1);
  expect(Math.round(1.0f) == 1);
  expect(Math.round(1.9f) == 2);
  expect(Math.round(0.4d) == 0);
  expect(Math.round(0.5d) == 1);
  expect(Math.round(1.0d) == 1);
  expect(Math.round(1.9d) == 2);
{
    float b=1.0f;
    int blue=(int)(b * 255 + 0.5);
    expect(blue == 255);
  }
{
    long z=6553311036568663L;
    double d=(double)z;
    expect(d == 6553311036568663.0);
  }
{
    long z=12345L;
    float f=(float)z;
    expect(f == 12345.0);
  }
{
    int z=12345;
    float f=(float)z;
    expect(f == 12345.0);
  }
{
    int z=12345;
    double d=(double)z;
    expect(d == 12345.0);
  }
{
    int orig=0x7f800001;
    float NaN=Float.intBitsToFloat(orig);
    int result=Float.floatToIntBits(NaN);
    int expected=0x7fc00000;
    expect(result == expected);
  }
{
    int orig=0x7f801001;
    float NaN=Float.intBitsToFloat(orig);
    int result=Float.floatToIntBits(NaN);
    int expected=0x7fc00000;
    expect(result == expected);
  }
{
    int orig=0x00800001;
    float number=Float.intBitsToFloat(orig);
    int result=Float.floatToIntBits(number);
    expect(result == orig);
  }
{
    int orig=0x80800003;
    float number=Float.intBitsToFloat(orig);
    int result=Float.floatToIntBits(number);
    expect(result == orig);
  }
}
