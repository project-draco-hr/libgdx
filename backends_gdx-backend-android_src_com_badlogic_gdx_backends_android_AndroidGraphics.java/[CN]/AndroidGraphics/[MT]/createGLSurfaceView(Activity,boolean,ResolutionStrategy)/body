{
  EGLConfigChooser configChooser=getEglConfigChooser();
  if (useGL2 && checkGL20()) {
    GLSurfaceView20 view=new GLSurfaceView20(activity,resolutionStrategy);
    if (configChooser != null)     view.setEGLConfigChooser(configChooser);
 else     view.setEGLConfigChooser(config.r,config.g,config.b,config.a,config.depth,config.stencil);
    view.setRenderer(this);
    return view;
  }
 else {
    config.useGL20=false;
    configChooser=getEglConfigChooser();
    int sdkVersion=Integer.parseInt(android.os.Build.VERSION.SDK);
    if (sdkVersion >= 11) {
      GLSurfaceView view=new GLSurfaceView(activity){
        @Override protected void onMeasure(        int widthMeasureSpec,        int heightMeasureSpec){
          ResolutionStrategy.MeasuredDimension measures=resolutionStrategy.calcMeasures(widthMeasureSpec,heightMeasureSpec);
          setMeasuredDimension(measures.width,measures.height);
        }
        @Override public InputConnection onCreateInputConnection(        EditorInfo outAttrs){
          BaseInputConnection connection=new BaseInputConnection(this,false){
            @Override public boolean deleteSurroundingText(            int beforeLength,            int afterLength){
              int sdkVersion=Integer.parseInt(android.os.Build.VERSION.SDK);
              if (sdkVersion >= 16) {
                if (beforeLength == 1 && afterLength == 0) {
                  sendDownUpKeyEventForBackwardCompatibility(KeyEvent.KEYCODE_DEL);
                  return true;
                }
              }
              return super.deleteSurroundingText(beforeLength,afterLength);
            }
            private void sendDownUpKeyEventForBackwardCompatibility(            final int code){
              final long eventTime=SystemClock.uptimeMillis();
              super.sendKeyEvent(new KeyEvent(eventTime,eventTime,KeyEvent.ACTION_DOWN,code,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE));
              super.sendKeyEvent(new KeyEvent(SystemClock.uptimeMillis(),eventTime,KeyEvent.ACTION_UP,code,0,0,KeyCharacterMap.VIRTUAL_KEYBOARD,0,KeyEvent.FLAG_SOFT_KEYBOARD | KeyEvent.FLAG_KEEP_TOUCH_MODE));
            }
          }
;
          return connection;
        }
      }
;
      if (configChooser != null)       view.setEGLConfigChooser(configChooser);
 else       view.setEGLConfigChooser(config.r,config.g,config.b,config.a,config.depth,config.stencil);
      view.setRenderer(this);
      return view;
    }
 else {
      if (config.useGLSurfaceViewAPI18) {
        GLSurfaceViewAPI18 view=new GLSurfaceViewAPI18(activity,resolutionStrategy);
        if (configChooser != null)         view.setEGLConfigChooser(configChooser);
 else         view.setEGLConfigChooser(config.r,config.g,config.b,config.a,config.depth,config.stencil);
        view.setRenderer(this);
        return view;
      }
 else {
        GLSurfaceViewCupcake view=new GLSurfaceViewCupcake(activity,resolutionStrategy);
        if (configChooser != null)         view.setEGLConfigChooser(configChooser);
 else         view.setEGLConfigChooser(config.r,config.g,config.b,config.a,config.depth,config.stencil);
        view.setRenderer(this);
        return view;
      }
    }
  }
}
