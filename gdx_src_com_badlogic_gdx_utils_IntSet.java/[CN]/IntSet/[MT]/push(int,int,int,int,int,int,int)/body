{
  int[] keyTable=this.keyTable;
  int mask=this.mask;
  int evictedKey;
  int i=0, pushIterations=this.pushIterations;
  do {
switch (MathUtils.random(2)) {
case 0:
      evictedKey=key1;
    keyTable[index1]=insertKey;
  break;
case 1:
evictedKey=key2;
keyTable[index2]=insertKey;
break;
default :
evictedKey=key3;
keyTable[index3]=insertKey;
break;
}
index1=evictedKey & mask;
key1=keyTable[index1];
if (key1 == EMPTY) {
keyTable[index1]=evictedKey;
if (size++ >= threshold) resize(capacity << 1);
return;
}
index2=hash2(evictedKey);
key2=keyTable[index2];
if (key2 == EMPTY) {
keyTable[index2]=evictedKey;
if (size++ >= threshold) resize(capacity << 1);
return;
}
index3=hash3(evictedKey);
key3=keyTable[index3];
if (key3 == EMPTY) {
keyTable[index3]=evictedKey;
if (size++ >= threshold) resize(capacity << 1);
return;
}
if (++i == pushIterations) break;
insertKey=evictedKey;
}
 while (true);
addStash(evictedKey);
}
