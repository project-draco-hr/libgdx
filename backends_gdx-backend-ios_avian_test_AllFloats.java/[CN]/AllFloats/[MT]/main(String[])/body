{
  expect(multiplyByFive(36f) == 5f * 36f);
  expect(multiplyByFive(36d) == 5d * 36d);
  expect(multiply(5f,4f) == 5f * 4f);
  expect(multiply(5d,4d) == 5d * 4d);
  expect(multiply(5f,4d) == 5f * 4d);
  expect(divide(5f,2f) == 5f / 2f);
  expect(divide(5d,2d) == 5d / 2d);
  expect(divide(5f,2d) == 5f / 2d);
  expect(remainder(5f,2f) == 5f % 2f);
  expect(remainder(5d,2d) == 5d % 2d);
  expect(remainder(5f,2d) == 5f % 2d);
  expect(add(5f,4f) == 5f + 4f);
  expect(add(5d,4d) == 5f + 4d);
  expect(add(5f,4d) == 5f + 4d);
  expect(subtract(5f,4f) == 5f - 4f);
  expect(subtract(5d,4d) == 5f - 4d);
  expect(subtract(5f,4d) == 5f - 4d);
  expect(complex(4f,3f) == (4f - 3f) / (4f * 3f) + 2f);
  expect(complex(4d,3d) == (4d - 3d) / (4d * 3d) + 2d);
  expect(complex(4f,3d) == (4f - 3d) / (4f * 3d) + 2f);
  expect(complexNoIntrinsic(4f,3f) == (4f - 3f) / (4f * 3f) + 2f);
  expect(f2i(4f) == 4);
  expect(f2l(4f) == 4);
  expect(i2f(4) == 4f);
  expect(i2d(4) == 4d);
  expect(d2i(4d) == 4);
  expect(d2l(4d) == 4);
  expect(l2f(4) == 4f);
  expect(l2d(4) == 4d);
  expect(negate(4f) == -4f);
  expect(negate(4d) == -4d);
  expect(abs(-4) == 4);
  expect(abs(12) == 12);
  expect(abs(-4f) == 4f);
  expect(abs(12f) == 12f);
  int unused=last();
}
