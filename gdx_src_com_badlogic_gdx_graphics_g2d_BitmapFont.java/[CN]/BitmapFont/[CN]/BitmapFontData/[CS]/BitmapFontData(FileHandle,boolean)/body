{
  this.flipped=flip;
  BufferedReader reader=new BufferedReader(new InputStreamReader(fontFile.read()),512);
  try {
    reader.readLine();
    String line=reader.readLine();
    if (line == null)     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    String[] common=line.split(" ",4);
    if (common.length < 4)     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    if (!common[1].startsWith("lineHeight="))     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    lineHeight=Integer.parseInt(common[1].substring(11));
    if (!common[2].startsWith("base="))     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    int baseLine=Integer.parseInt(common[2].substring(5));
    line=reader.readLine();
    if (line == null)     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    String[] pageLine=line.split(" ",4);
    if (!pageLine[2].startsWith("file="))     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    String imgFilename=null;
    if (pageLine[2].endsWith("\"")) {
      imgFilename=pageLine[2].substring(6,pageLine[2].length() - 1);
    }
 else {
      imgFilename=pageLine[2].substring(5,pageLine[2].length());
    }
    imgFile=fontFile.parent().child(imgFilename).path();
    descent=0;
    while (true) {
      line=reader.readLine();
      if (line == null)       break;
      if (line.startsWith("kernings "))       break;
      if (!line.startsWith("char "))       continue;
      Glyph glyph=new Glyph();
      StringTokenizer tokens=new StringTokenizer(line," =");
      tokens.nextToken();
      tokens.nextToken();
      int ch=Integer.parseInt(tokens.nextToken());
      if (ch <= Character.MAX_VALUE) {
        Glyph[] page=glyphs[ch / PAGE_SIZE];
        if (page == null)         glyphs[ch / PAGE_SIZE]=page=new Glyph[PAGE_SIZE];
        page[ch & PAGE_SIZE - 1]=glyph;
      }
 else       continue;
      tokens.nextToken();
      glyph.srcX=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.srcY=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.width=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.height=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.xoffset=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      if (flip)       glyph.yoffset=Integer.parseInt(tokens.nextToken());
 else       glyph.yoffset=-(glyph.height + Integer.parseInt(tokens.nextToken()));
      tokens.nextToken();
      glyph.xadvance=Integer.parseInt(tokens.nextToken());
      descent=Math.min(baseLine + glyph.yoffset,descent);
    }
    while (true) {
      line=reader.readLine();
      if (line == null)       break;
      if (!line.startsWith("kerning "))       break;
      StringTokenizer tokens=new StringTokenizer(line," =");
      tokens.nextToken();
      tokens.nextToken();
      int first=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      int second=Integer.parseInt(tokens.nextToken());
      if (first < 0 || first > Character.MAX_VALUE || second < 0 || second > Character.MAX_VALUE)       continue;
      Glyph glyph=getGlyph((char)first);
      tokens.nextToken();
      int amount=Integer.parseInt(tokens.nextToken());
      glyph.setKerning(second,amount);
    }
    Glyph g=getGlyph(' ');
    if (g == null) {
      g=new Glyph();
      g.xadvance=getGlyph('l').xadvance;
      Glyph[] page=glyphs[' ' / PAGE_SIZE];
      if (page == null)       glyphs[' ' / PAGE_SIZE]=page=new Glyph[PAGE_SIZE];
      page[' ' & PAGE_SIZE - 1]=g;
    }
    spaceWidth=g != null ? g.xadvance + g.width : 1;
    for (int i=0; i < xChars.length; i++) {
      g=getGlyph(xChars[i]);
      if (g == null)       continue;
      xHeight=g.height;
      break;
    }
    for (int i=0; i < capChars.length; i++) {
      g=getGlyph(capChars[i]);
      if (g == null)       continue;
      capHeight=g.height;
      break;
    }
    ascent=baseLine - capHeight;
    down=-lineHeight;
    if (flip) {
      ascent=-ascent;
      down=-down;
    }
  }
 catch (  Exception ex) {
    throw new GdxRuntimeException("Error loading font file: " + fontFile,ex);
  }
 finally {
    try {
      reader.close();
    }
 catch (    IOException ignored) {
    }
  }
}
