{
  this.fontFile=fontFile;
  this.flipped=flip;
  BufferedReader reader=new BufferedReader(new InputStreamReader(fontFile.read()),512);
  try {
    reader.readLine();
    String line=reader.readLine();
    if (line == null)     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    String[] common=line.split(" ",7);
    if (common.length < 3)     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    if (!common[1].startsWith("lineHeight="))     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    lineHeight=Integer.parseInt(common[1].substring(11));
    if (!common[2].startsWith("base="))     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    float baseLine=Integer.parseInt(common[2].substring(5));
    int imgPageCount=1;
    if (common.length >= 6 && common[5] != null && common[5].startsWith("pages=")) {
      try {
        imgPageCount=Math.max(1,Integer.parseInt(common[5].substring(6)));
      }
 catch (      NumberFormatException e) {
      }
    }
    imagePaths=new String[imgPageCount];
    for (int p=0; p < imgPageCount; p++) {
      line=reader.readLine();
      if (line == null)       throw new GdxRuntimeException("Expected more 'page' definitions in font file " + fontFile);
      String[] pageLine=line.split(" ",4);
      if (!pageLine[2].startsWith("file="))       throw new GdxRuntimeException("Invalid font file: " + fontFile);
      if (pageLine[1].startsWith("id=")) {
        try {
          int pageID=Integer.parseInt(pageLine[1].substring(3));
          if (pageID != p)           throw new GdxRuntimeException("Invalid font file: " + fontFile + " -- page ids must be indices starting at 0");
        }
 catch (        NumberFormatException e) {
          throw new GdxRuntimeException("NumberFormatException on 'page id' element of " + fontFile);
        }
      }
      String imgFilename=null;
      if (pageLine[2].endsWith("\"")) {
        imgFilename=pageLine[2].substring(6,pageLine[2].length() - 1);
      }
 else {
        imgFilename=pageLine[2].substring(5,pageLine[2].length());
      }
      String path=fontFile.parent().child(imgFilename).path().replaceAll("\\\\","/");
      if (this.imagePath == null)       this.imagePath=path;
      imagePaths[p]=path;
    }
    descent=0;
    while (true) {
      line=reader.readLine();
      if (line == null)       break;
      if (line.startsWith("kernings "))       break;
      if (!line.startsWith("char "))       continue;
      Glyph glyph=new Glyph();
      StringTokenizer tokens=new StringTokenizer(line," =");
      tokens.nextToken();
      tokens.nextToken();
      int ch=Integer.parseInt(tokens.nextToken());
      if (ch <= Character.MAX_VALUE)       setGlyph(ch,glyph);
 else       continue;
      glyph.id=ch;
      tokens.nextToken();
      glyph.srcX=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.srcY=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.width=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.height=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.xoffset=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      if (flip)       glyph.yoffset=Integer.parseInt(tokens.nextToken());
 else       glyph.yoffset=-(glyph.height + Integer.parseInt(tokens.nextToken()));
      tokens.nextToken();
      glyph.xadvance=Integer.parseInt(tokens.nextToken());
      if (tokens.hasMoreTokens())       tokens.nextToken();
      if (tokens.hasMoreTokens()) {
        try {
          glyph.page=Integer.parseInt(tokens.nextToken());
        }
 catch (        NumberFormatException e) {
        }
      }
      if (glyph.width > 0 && glyph.height > 0)       descent=Math.min(baseLine + glyph.yoffset,descent);
    }
    while (true) {
      line=reader.readLine();
      if (line == null)       break;
      if (!line.startsWith("kerning "))       break;
      StringTokenizer tokens=new StringTokenizer(line," =");
      tokens.nextToken();
      tokens.nextToken();
      int first=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      int second=Integer.parseInt(tokens.nextToken());
      if (first < 0 || first > Character.MAX_VALUE || second < 0 || second > Character.MAX_VALUE)       continue;
      Glyph glyph=getGlyph((char)first);
      tokens.nextToken();
      int amount=Integer.parseInt(tokens.nextToken());
      glyph.setKerning(second,amount);
    }
    Glyph spaceGlyph=getGlyph(' ');
    if (spaceGlyph == null) {
      spaceGlyph=new Glyph();
      spaceGlyph.id=(int)' ';
      Glyph xadvanceGlyph=getGlyph('l');
      if (xadvanceGlyph == null)       xadvanceGlyph=getFirstGlyph();
      spaceGlyph.xadvance=xadvanceGlyph.xadvance;
      setGlyph(' ',spaceGlyph);
    }
    spaceWidth=spaceGlyph != null ? spaceGlyph.xadvance + spaceGlyph.width : 1;
    Glyph xGlyph=null;
    for (int i=0; i < xChars.length; i++) {
      xGlyph=getGlyph(xChars[i]);
      if (xGlyph != null)       break;
    }
    if (xGlyph == null)     xGlyph=getFirstGlyph();
    xHeight=xGlyph.height;
    Glyph capGlyph=null;
    for (int i=0; i < capChars.length; i++) {
      capGlyph=getGlyph(capChars[i]);
      if (capGlyph != null)       break;
    }
    if (capGlyph == null) {
      for (      Glyph[] page : this.glyphs) {
        if (page == null)         continue;
        for (        Glyph glyph : page) {
          if (glyph == null || glyph.height == 0 || glyph.width == 0)           continue;
          capHeight=Math.max(capHeight,glyph.height);
        }
      }
    }
 else     capHeight=capGlyph.height;
    ascent=baseLine - capHeight;
    down=-lineHeight;
    if (flip) {
      ascent=-ascent;
      down=-down;
    }
  }
 catch (  Exception ex) {
    throw new GdxRuntimeException("Error loading font file: " + fontFile,ex);
  }
 finally {
    StreamUtils.closeQuietly(reader);
  }
}
