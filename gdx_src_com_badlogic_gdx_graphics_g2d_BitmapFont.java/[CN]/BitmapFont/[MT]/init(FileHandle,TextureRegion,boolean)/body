{
  BufferedReader reader=new BufferedReader(new InputStreamReader(fontFile.read()),512);
  try {
    reader.readLine();
    String line=reader.readLine();
    if (line == null)     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    String[] common=line.split(" ",4);
    if (common.length < 4)     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    if (!common[1].startsWith("lineHeight="))     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    lineHeight=Integer.parseInt(common[1].substring(11));
    if (!common[2].startsWith("base="))     throw new GdxRuntimeException("Invalid font file: " + fontFile);
    int baseLine=Integer.parseInt(common[2].substring(5));
    if (region != null)     reader.readLine();
 else {
      line=reader.readLine();
      if (line == null)       throw new GdxRuntimeException("Invalid font file: " + fontFile);
      String[] page=line.split(" ",4);
      if (!page[2].startsWith("file="))       throw new GdxRuntimeException("Invalid font file: " + fontFile);
      String imgFilename=page[2].substring(6,page[2].length() - 1);
      FileHandle imageFile=fontFile.parent().child(imgFilename);
      region=new TextureRegion(Gdx.graphics.newTexture(imageFile,TextureFilter.Linear,TextureFilter.Linear,TextureWrap.ClampToEdge,TextureWrap.ClampToEdge));
    }
    this.region=region;
    float invTexWidth=1.0f / region.getTexture().getWidth();
    float invTexHeight=1.0f / region.getTexture().getHeight();
    float u=region.u;
    float v=region.v;
    while (true) {
      line=reader.readLine();
      if (line == null)       break;
      if (line.startsWith("kernings "))       break;
      if (!line.startsWith("char "))       continue;
      Glyph glyph=new Glyph();
      StringTokenizer tokens=new StringTokenizer(line," =");
      tokens.nextToken();
      tokens.nextToken();
      int ch=Integer.parseInt(tokens.nextToken());
      if (ch <= Character.MAX_VALUE) {
        Glyph[] page=glyphs[ch / PAGE_SIZE];
        if (page == null)         glyphs[ch / PAGE_SIZE]=page=new Glyph[PAGE_SIZE];
        page[ch & PAGE_SIZE - 1]=glyph;
      }
 else       continue;
      tokens.nextToken();
      int srcX=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      int srcY=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.width=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.height=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      glyph.xoffset=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      if (flip)       glyph.yoffset=Integer.parseInt(tokens.nextToken());
 else       glyph.yoffset=-(glyph.height + Integer.parseInt(tokens.nextToken()));
      tokens.nextToken();
      glyph.xadvance=Integer.parseInt(tokens.nextToken());
      glyph.u=u + srcX * invTexWidth;
      glyph.u2=u + (srcX + glyph.width) * invTexWidth;
      if (flip) {
        glyph.v=v + srcY * invTexHeight;
        glyph.v2=v + (srcY + glyph.height) * invTexHeight;
      }
 else {
        glyph.v2=v + srcY * invTexHeight;
        glyph.v=v + (srcY + glyph.height) * invTexHeight;
      }
    }
    while (true) {
      line=reader.readLine();
      if (line == null)       break;
      if (!line.startsWith("kerning "))       break;
      StringTokenizer tokens=new StringTokenizer(line," =");
      tokens.nextToken();
      tokens.nextToken();
      int first=Integer.parseInt(tokens.nextToken());
      tokens.nextToken();
      int second=Integer.parseInt(tokens.nextToken());
      if (first < 0 || first > Character.MAX_VALUE || second < 0 || second > Character.MAX_VALUE)       continue;
      Glyph glyph=getGlyph((char)first);
      tokens.nextToken();
      int amount=Integer.parseInt(tokens.nextToken());
      glyph.setKerning(second,amount);
    }
    Glyph g=getGlyph(' ');
    spaceWidth=g != null ? g.xadvance + g.width : 1;
    g=getGlyph('x');
    xHeight=g != null ? g.height : 1;
    g=getGlyph('M');
    capHeight=g != null ? g.height : 1;
    ascent=baseLine - capHeight;
    down=-lineHeight;
    if (flip) {
      ascent=-ascent;
      down=-down;
    }
  }
 catch (  Exception ex) {
    throw new GdxRuntimeException("Error loading font file: " + fontFile,ex);
  }
 finally {
    try {
      reader.close();
    }
 catch (    IOException ignored) {
    }
  }
}
