{
  for (int i=0; i < 8; i++) {
    Vector3 v=vertices[i];
    tmpVertices[i].set(v.x,v.y,v.z,1).mul(projectionMatrix);
  }
  if (policy.evaluate(tmpVertices))   return true;
  for (int i=0; i < WINDING.length; ) {
    quad[0].set(tmpVertices[WINDING[i++]]);
    quad[1].set(tmpVertices[WINDING[i++]]);
    quad[2].set(tmpVertices[WINDING[i++]]);
    quad[3].set(tmpVertices[WINDING[i++]]);
    int numVertices=clipQuad(quad,clippedQuad);
    for (int j=0; j < numVertices; j++) {
      Quaternion q=clippedQuad[j];
      q.z=1 / q.w;
      vertices[j].set(q.x * q.z,q.y * q.z,q.z);
    }
    for (int j=2; j < numVertices; j++) {
      if (drawTriangle(vertices[0],vertices[j - 1],vertices[j],policy))       return true;
    }
  }
  return false;
}
