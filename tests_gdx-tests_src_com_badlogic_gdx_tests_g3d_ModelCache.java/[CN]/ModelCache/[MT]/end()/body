{
  if (!building)   throw new GdxRuntimeException("Call begin() prior to calling end()");
  building=false;
  if (items.size == 0)   return;
  sorter.sort(null,items);
  int itemCount=items.size;
  int initCount=renderables.size;
  final Renderable first=items.get(0);
  VertexAttributes vertexAttributes=first.mesh.getVertexAttributes();
  Material material=first.material;
  int primitiveType=first.primitiveType;
  int offset=renderables.size;
  meshBuilder.begin(vertexAttributes);
  MeshPart part=meshBuilder.part("",primitiveType,meshPartPool.obtain());
  renderables.add(obtainRenderable(material,primitiveType));
  for (int i=0, n=items.size; i < n; ++i) {
    final Renderable renderable=items.get(i);
    final VertexAttributes va=renderable.mesh.getVertexAttributes();
    final Material mat=renderable.material;
    final int pt=renderable.primitiveType;
    final boolean sameMesh=va.equals(vertexAttributes) && renderable.meshPartSize + meshBuilder.getNumVertices() < Short.MAX_VALUE;
    final boolean samePart=sameMesh && pt == primitiveType && mat.same(material,true);
    if (!samePart) {
      if (!sameMesh) {
        final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));
        while (offset < renderables.size)         renderables.get(offset++).mesh=mesh;
        meshBuilder.begin(vertexAttributes=va);
      }
      final MeshPart newPart=meshBuilder.part("",pt,meshPartPool.obtain());
      final Renderable previous=renderables.get(renderables.size - 1);
      previous.meshPartOffset=part.indexOffset;
      previous.meshPartSize=part.numVertices;
      part=newPart;
      renderables.add(obtainRenderable(material=mat,primitiveType=pt));
    }
    meshBuilder.setVertexTransform(renderable.worldTransform);
    meshBuilder.addMesh(renderable.mesh,renderable.meshPartOffset,renderable.meshPartSize);
  }
  final Mesh mesh=meshBuilder.end(meshPool.obtain(vertexAttributes,meshBuilder.getNumVertices(),meshBuilder.getNumIndices()));
  while (offset < renderables.size)   renderables.get(offset++).mesh=mesh;
  final Renderable previous=renderables.get(renderables.size - 1);
  previous.meshPartOffset=part.indexOffset;
  previous.meshPartSize=part.numVertices;
}
