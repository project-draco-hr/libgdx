{
  float crossMassSum=0.0f;
  float dotMassSum=0.0f;
  final Vec2 d[]=pool.getVec2Array(bodies.length);
  for (int i=0; i < bodies.length; ++i) {
    final int prev=(i == 0) ? bodies.length - 1 : i - 1;
    final int next=(i == bodies.length - 1) ? 0 : i + 1;
    d[i].set(bodies[next].getWorldCenter());
    d[i].subLocal(bodies[prev].getWorldCenter());
    dotMassSum+=(d[i].lengthSquared()) / bodies[i].getMass();
    crossMassSum+=Vec2.cross(bodies[i].getLinearVelocity(),d[i]);
  }
  float lambda=-2.0f * crossMassSum / dotMassSum;
  m_impulse+=lambda;
  for (int i=0; i < bodies.length; ++i) {
    bodies[i].m_linearVelocity.x+=bodies[i].m_invMass * d[i].y * .5f* lambda;
    bodies[i].m_linearVelocity.y+=bodies[i].m_invMass * -d[i].x * .5f* lambda;
  }
}
