{
  boolean wrote=false;
  while (true) {
    if (endOfBitStream) {
      if (!getPageAndPacket()) {
        break;
      }
      endOfBitStream=false;
    }
    if (!inited) {
      inited=true;
      return;
    }
    float[][][] _pcm=new float[1][][];
    int[] _index=new int[oggInfo.channels];
    while (!endOfBitStream) {
      while (!endOfBitStream) {
        int result=syncState.pageout(page);
        if (result == 0) {
          break;
        }
        if (result == -1) {
          Gdx.app.log("gdx-audio","Error reading OGG: Corrupt or missing data in bitstream.");
        }
 else {
          streamState.pagein(page);
          while (true) {
            result=streamState.packetout(packet);
            if (result == 0)             break;
            if (result == -1) {
            }
 else {
              int samples;
              if (vorbisBlock.synthesis(packet) == 0) {
                dspState.synthesis_blockin(vorbisBlock);
              }
              while ((samples=dspState.synthesis_pcmout(_pcm,_index)) > 0) {
                float[][] pcm=_pcm[0];
                int bout=(samples < convsize ? samples : convsize);
                for (int i=0; i < oggInfo.channels; i++) {
                  int ptr=i * 2;
                  int mono=_index[i];
                  for (int j=0; j < bout; j++) {
                    int val=(int)(pcm[i][mono + j] * 32767.);
                    if (val > 32767) {
                      val=32767;
                    }
                    if (val < -32768) {
                      val=-32768;
                    }
                    if (val < 0)                     val=val | 0x8000;
                    if (bigEndian) {
                      convbuffer[ptr]=(byte)(val >>> 8);
                      convbuffer[ptr + 1]=(byte)(val);
                    }
 else {
                      convbuffer[ptr]=(byte)(val);
                      convbuffer[ptr + 1]=(byte)(val >>> 8);
                    }
                    ptr+=2 * (oggInfo.channels);
                  }
                }
                int bytesToWrite=2 * oggInfo.channels * bout;
                if (bytesToWrite >= pcmBuffer.remaining()) {
                  throw new GdxRuntimeException("Ogg block too big to be buffered: " + bytesToWrite);
                }
 else {
                  pcmBuffer.put(convbuffer,0,bytesToWrite);
                }
                wrote=true;
                dspState.synthesis_read(bout);
              }
            }
          }
          if (page.eos() != 0) {
            endOfBitStream=true;
          }
          if ((!endOfBitStream) && (wrote)) {
            return;
          }
        }
      }
      if (!endOfBitStream) {
        bytes=0;
        int index=syncState.buffer(4096);
        if (index >= 0) {
          buffer=syncState.data;
          try {
            bytes=input.read(buffer,index,4096);
          }
 catch (          Exception e) {
            throw new GdxRuntimeException("Error during Vorbis decoding.",e);
          }
        }
 else {
          bytes=0;
        }
        syncState.wrote(bytes);
        if (bytes == 0) {
          endOfBitStream=true;
        }
      }
    }
    streamState.clear();
    vorbisBlock.clear();
    dspState.clear();
    oggInfo.clear();
  }
  syncState.clear();
  endOfStream=true;
}
