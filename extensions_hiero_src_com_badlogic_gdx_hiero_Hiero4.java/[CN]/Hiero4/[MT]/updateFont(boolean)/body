{
  if (fontData == null || renderer.batch == null)   return;
  String text=sampleTextPane.getText();
  if (!force) {
    boolean newCharFound=false;
    remainingSampleChars.clear();
    remainingSampleChars.addAll(sampleChars);
    for (int i=text.length() - 1; i >= 0; i--) {
      Character ch=text.charAt(i);
      if (sampleChars.add(ch))       newCharFound=true;
      remainingSampleChars.remove(ch);
    }
    if (!newCharFound && remainingSampleChars.isEmpty())     return;
  }
  sampleChars.clear();
  for (int i=text.length() - 1; i >= 0; i--)   sampleChars.add(text.charAt(i));
  int fontSize=((Integer)fontSizeSpinner.getValue()).intValue();
  int style=Font.PLAIN;
  if (boldCheckBox.isSelected()) {
    style=Font.BOLD;
    if (italicCheckBox.isSelected())     style|=Font.ITALIC;
  }
 else   if (italicCheckBox.isSelected())   style=Font.ITALIC;
  fontData=fontData.deriveFont(fontSize,style);
  int sampleFontSize=sampleTextPane.getFont().getSize();
  if (sampleFontSize < 14)   sampleFontSize=14;
  sampleTextPane.setFont(fontData.getJavaFont().deriveFont((float)sampleFontSize));
  Padding padding=new Padding((Integer)padTopSpinner.getValue(),(Integer)padLeftSpinner.getValue(),(Integer)padBottomSpinner.getValue(),(Integer)padRightSpinner.getValue(),(Integer)padAdvanceXSpinner.getValue());
  final int width=(Integer)glyphPageWidthCombo.getSelectedItem();
  final int height=(Integer)glyphPageHeightCombo.getSelectedItem();
  GeneratorMethod method;
  if (vectorRadio.isSelected())   method=GeneratorMethod.AWT_VECTOR;
 else   if (drawStringRadio.isSelected())   method=GeneratorMethod.AWT_DRAWSTRING;
 else   method=GeneratorMethod.FREETYPE2;
  fontGenerator=new FontGenerator(fontData,method);
  CharSet charset=new CharSet();
  charset.setManualCharacters(text);
  try {
    fontGenerator.generate(width,height,charset,padding,new Effect.Renderer[0],true);
    final ByteBuffer buffer=ByteBuffer.allocateDirect(1024 * 1024 * 4);
    buffer.order(ByteOrder.LITTLE_ENDIAN);
    fontGenerator.getTextureData(buffer.asIntBuffer());
    TextureRegion glyphRegion=new TextureRegion(Gdx.graphics.newTexture(new TextureData(){
      public void load(){
        GL11.glTexImage2D(GL11.GL_TEXTURE_2D,0,GL11.GL_RGBA8,width,height,0,GL11.GL_RGBA,GL11.GL_UNSIGNED_BYTE,buffer);
      }
      public int getWidth(){
        return width;
      }
      public int getHeight(){
        return height;
      }
    }
,TextureFilter.Linear,TextureFilter.Linear,TextureWrap.ClampToEdge,TextureWrap.ClampToEdge));
    fontGenerator.write(new File("out"),ExportFormat.TEXT);
    renderer.font=new BitmapFont(Gdx.files.absolute("out"),glyphRegion,false);
  }
 catch (  IOException ex) {
    ex.printStackTrace();
  }
}
