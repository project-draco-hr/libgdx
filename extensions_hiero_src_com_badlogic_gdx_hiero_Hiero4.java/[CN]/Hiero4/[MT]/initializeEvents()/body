{
class FontChangeListener implements ChangeListener, ActionListener {
    public void stateChanged(    ChangeEvent evt){
      changeFont();
    }
    public void actionPerformed(    ActionEvent evt){
      changeFont();
    }
  }
  FontChangeListener change=new FontChangeListener();
  fontFileRadio.addActionListener(change);
  systemFontRadio.addActionListener(change);
  fontList.addListSelectionListener(new ListSelectionListener(){
    public void valueChanged(    ListSelectionEvent evt){
      if (evt.getValueIsAdjusting())       return;
      prefs.put("system.font",(String)fontList.getSelectedValue());
      changeFont();
    }
  }
);
class FontUpdateListener implements ChangeListener, ActionListener, DocumentListener {
    private final boolean force;
    public FontUpdateListener(    boolean force){
      this.force=force;
    }
    public void stateChanged(    ChangeEvent evt){
      updateFont(force);
    }
    public void actionPerformed(    ActionEvent evt){
      updateFont(force);
    }
    public void removeUpdate(    DocumentEvent evt){
      updateFont(force);
    }
    public void insertUpdate(    DocumentEvent evt){
      updateFont(force);
    }
    public void changedUpdate(    DocumentEvent evt){
      updateFont(force);
    }
    public void addSpinners(    JSpinner[] spinners){
      for (int i=0; i < spinners.length; i++) {
        final JSpinner spinner=spinners[i];
        spinner.addChangeListener(this);
        ((JSpinner.DefaultEditor)spinner.getEditor()).getTextField().addKeyListener(new KeyAdapter(){
          String lastText;
          public void keyReleased(          KeyEvent evt){
            JFormattedTextField textField=((JSpinner.DefaultEditor)spinner.getEditor()).getTextField();
            String text=textField.getText();
            if (text.length() == 0)             return;
            if (text.equals(lastText))             return;
            lastText=text;
            int caretPosition=textField.getCaretPosition();
            try {
              spinner.setValue(Integer.valueOf(text));
              textField.setCaretPosition(caretPosition);
            }
 catch (            Throwable ignored) {
            }
          }
        }
);
      }
    }
  }
  FontUpdateListener update=new FontUpdateListener(true);
  FontUpdateListener updateText=new FontUpdateListener(false);
  update.addSpinners(new JSpinner[]{padTopSpinner,padRightSpinner,padBottomSpinner,padLeftSpinner,padAdvanceXSpinner,padAdvanceYSpinner});
  fontSizeSpinner.addChangeListener(update);
  glyphPageWidthCombo.addActionListener(update);
  glyphPageHeightCombo.addActionListener(update);
  boldCheckBox.addActionListener(update);
  italicCheckBox.addActionListener(update);
  vectorRadio.addActionListener(update);
  drawStringRadio.addActionListener(update);
  freetypeRadio.addActionListener(update);
  sampleTextPane.getDocument().addDocumentListener(updateText);
  sampleTextRadio.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      glyphCachePanel.setVisible(false);
    }
  }
);
  glyphCacheRadio.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      glyphCachePanel.setVisible(true);
    }
  }
);
  fontFileText.getDocument().addDocumentListener(new DocumentListener(){
    public void removeUpdate(    DocumentEvent evt){
      changed();
    }
    public void insertUpdate(    DocumentEvent evt){
      changed();
    }
    public void changedUpdate(    DocumentEvent evt){
      changed();
    }
    private void changed(){
      File file=new File(fontFileText.getText());
      if (fontList.isEnabled() && (!file.exists() || !file.isFile()))       return;
      prefs.put("font.file",fontFileText.getText());
      updateFont(true);
    }
  }
);
  browseButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      FileDialog dialog=new FileDialog(Hiero4.this,"Choose TrueType font file",FileDialog.LOAD);
      dialog.setLocationRelativeTo(null);
      dialog.setFile("*.ttf");
      dialog.setVisible(true);
      String fileName=dialog.getFile();
      if (fileName == null)       return;
      fontFileText.setText(new File(dialog.getDirectory(),fileName).getAbsolutePath());
    }
  }
);
  backgroundColorLabel.addMouseListener(new MouseAdapter(){
    public void mouseClicked(    MouseEvent evt){
      java.awt.Color color=JColorChooser.showDialog(null,"Choose a background color",EffectUtil.fromString(prefs.get("background","000000")));
      if (color == null)       return;
      renderingBackgroundColor=new Color(color.getRed() / 255f,color.getGreen() / 255f,color.getBlue() / 255f,1);
      backgroundColorLabel.setIcon(getColorIcon(color));
      prefs.put("background",EffectUtil.toString(color));
    }
  }
);
  saveBMFontMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      if (fontGenerator == null)       return;
      FileDialog dialog=new FileDialog(Hiero4.this,"Save BMFont files",FileDialog.SAVE);
      dialog.setLocationRelativeTo(null);
      dialog.setFile("*.fnt");
      dialog.setVisible(true);
      String fileName=dialog.getFile();
      if (fileName == null)       return;
      try {
        fontGenerator.write(new File(dialog.getDirectory(),fileName),ExportFormat.TEXT);
      }
 catch (      IOException ex) {
        ex.printStackTrace();
      }
    }
  }
);
  exitMenuItem.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      dispose();
    }
  }
);
  sampleNeheButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      sampleTextPane.setText(NEHE);
    }
  }
);
  sampleAsciiButton.addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent evt){
      StringBuilder buffer=new StringBuilder();
      buffer.append(NEHE);
      buffer.append('\n');
      int count=0;
      for (int i=33; i <= 255; i++) {
        if (buffer.indexOf(Character.toString((char)i)) != -1)         continue;
        buffer.append((char)i);
        if (++count % 30 == 0)         buffer.append('\n');
      }
      sampleTextPane.setText(buffer.toString());
    }
  }
);
}
