{
  if (start < end) {
    if (str.charAt(start) == '#') {
      int colorInt=0;
      for (int i=start + 1; i < end; i++) {
        char ch=str.charAt(i);
        if (ch == ']') {
          if (i < start + 2 || i > start + 9)           throw new GdxRuntimeException("Hex color cannot have " + (i - start - 1) + " digits");
          this.previousColor=this.color;
          if (i <= start + 7) {
            Color.rgb888ToColor(hexColor,colorInt);
            hexColor.a=1f;
          }
 else {
            Color.rgba8888ToColor(hexColor,colorInt);
          }
          this.color=hexColor.toFloatBits();
          return i - start;
        }
        if (ch >= '0' && ch <= '9')         colorInt=colorInt * 16 + (ch - '0');
 else         if (ch >= 'a' && ch <= 'f')         colorInt=colorInt * 16 + (ch - ('a' - 10));
 else         if (ch >= 'A' && ch <= 'F')         colorInt=colorInt * 16 + (ch - ('A' - 10));
 else         throw new GdxRuntimeException("Unexpected '" + ch + "' in hex color");
      }
    }
 else {
      colorBuffer.setLength(0);
      for (int i=start; i < end; i++) {
        char ch=str.charAt(i);
        if (ch == ']') {
          if (colorBuffer.length() == 0) {
            this.color=previousColor;
          }
 else {
            String colorString=colorBuffer.toString();
            Color newColor=colorMap.get(colorString);
            if (newColor == null)             throw new GdxRuntimeException("Unknown color '" + colorString + "'");
            this.previousColor=this.color;
            this.color=newColor.toFloatBits();
          }
          return i - start;
        }
 else {
          colorBuffer.append(ch);
        }
      }
    }
  }
  throw new GdxRuntimeException("Unclosed color tag");
}
