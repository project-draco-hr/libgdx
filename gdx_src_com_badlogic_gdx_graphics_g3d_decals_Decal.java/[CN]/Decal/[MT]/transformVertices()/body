{
  float x, y, z, w;
  float tx, ty;
  if (transformationOffset != null) {
    tx=-transformationOffset.x;
    ty=-transformationOffset.y;
  }
 else {
    tx=ty=0;
  }
  x=(vertices[X1] + tx) * scale.x;
  y=(vertices[Y1] + ty) * scale.y;
  z=vertices[Z1];
  vertices[X1]=rotation.w * x + rotation.y * z - rotation.z * y;
  vertices[Y1]=rotation.w * y + rotation.z * x - rotation.x * z;
  vertices[Z1]=rotation.w * z + rotation.x * y - rotation.y * x;
  w=-rotation.x * x - rotation.y * y - rotation.z * z;
  rotation.conjugate();
  x=vertices[X1];
  y=vertices[Y1];
  z=vertices[Z1];
  vertices[X1]=w * rotation.x + x * rotation.w + y * rotation.z - z * rotation.y;
  vertices[Y1]=w * rotation.y + y * rotation.w + z * rotation.x - x * rotation.z;
  vertices[Z1]=w * rotation.z + z * rotation.w + x * rotation.y - y * rotation.x;
  rotation.conjugate();
  vertices[X1]+=position.x - tx;
  vertices[Y1]+=position.y - ty;
  vertices[Z1]+=position.z;
  x=(vertices[X2] + tx) * scale.x;
  y=(vertices[Y2] + ty) * scale.y;
  z=vertices[Z2];
  vertices[X2]=rotation.w * x + rotation.y * z - rotation.z * y;
  vertices[Y2]=rotation.w * y + rotation.z * x - rotation.x * z;
  vertices[Z2]=rotation.w * z + rotation.x * y - rotation.y * x;
  w=-rotation.x * x - rotation.y * y - rotation.z * z;
  rotation.conjugate();
  x=vertices[X2];
  y=vertices[Y2];
  z=vertices[Z2];
  vertices[X2]=w * rotation.x + x * rotation.w + y * rotation.z - z * rotation.y;
  vertices[Y2]=w * rotation.y + y * rotation.w + z * rotation.x - x * rotation.z;
  vertices[Z2]=w * rotation.z + z * rotation.w + x * rotation.y - y * rotation.x;
  rotation.conjugate();
  vertices[X2]+=position.x - tx;
  vertices[Y2]+=position.y - ty;
  vertices[Z2]+=position.z;
  x=(vertices[X3] + tx) * scale.x;
  y=(vertices[Y3] + ty) * scale.y;
  z=vertices[Z3];
  vertices[X3]=rotation.w * x + rotation.y * z - rotation.z * y;
  vertices[Y3]=rotation.w * y + rotation.z * x - rotation.x * z;
  vertices[Z3]=rotation.w * z + rotation.x * y - rotation.y * x;
  w=-rotation.x * x - rotation.y * y - rotation.z * z;
  rotation.conjugate();
  x=vertices[X3];
  y=vertices[Y3];
  z=vertices[Z3];
  vertices[X3]=w * rotation.x + x * rotation.w + y * rotation.z - z * rotation.y;
  vertices[Y3]=w * rotation.y + y * rotation.w + z * rotation.x - x * rotation.z;
  vertices[Z3]=w * rotation.z + z * rotation.w + x * rotation.y - y * rotation.x;
  rotation.conjugate();
  vertices[X3]+=position.x - tx;
  vertices[Y3]+=position.y - ty;
  vertices[Z3]+=position.z;
  x=(vertices[X4] + tx) * scale.x;
  y=(vertices[Y4] + ty) * scale.y;
  z=vertices[Z4];
  vertices[X4]=rotation.w * x + rotation.y * z - rotation.z * y;
  vertices[Y4]=rotation.w * y + rotation.z * x - rotation.x * z;
  vertices[Z4]=rotation.w * z + rotation.x * y - rotation.y * x;
  w=-rotation.x * x - rotation.y * y - rotation.z * z;
  rotation.conjugate();
  x=vertices[X4];
  y=vertices[Y4];
  z=vertices[Z4];
  vertices[X4]=w * rotation.x + x * rotation.w + y * rotation.z - z * rotation.y;
  vertices[Y4]=w * rotation.y + y * rotation.w + z * rotation.x - x * rotation.z;
  vertices[Z4]=w * rotation.z + z * rotation.w + x * rotation.y - y * rotation.x;
  rotation.conjugate();
  vertices[X4]+=position.x - tx;
  vertices[Y4]+=position.y - ty;
  vertices[Z4]+=position.z;
  updated=true;
}
