{
  List<Texture> managedTextureList=managedTextures.get(app);
  if (managedTextureList == null)   return;
  if (assetManager == null) {
    for (int i=0; i < managedTextureList.size(); i++) {
      Texture texture=managedTextureList.get(i);
      texture.reload();
    }
  }
 else {
    assetManager.finishLoading();
    List<Texture> textures=new ArrayList<Texture>(managedTextureList);
    for (    Texture texture : textures) {
      String fileName=assetManager.getAssetFileName(texture);
      if (fileName == null) {
        texture.reload();
      }
 else {
        final int refCount=assetManager.getReferenceCount(fileName);
        assetManager.setReferenceCount(fileName,0);
        texture.glHandle=0;
        TextureParameter params=new TextureParameter();
        params.textureData=texture.getTextureData();
        params.minFilter=texture.getMinFilter();
        params.magFilter=texture.getMagFilter();
        params.wrapU=texture.getUWrap();
        params.wrapV=texture.getVWrap();
        params.genMipMaps=texture.data.useMipMaps();
        params.texture=texture;
        params.loadedCallback=new LoadedCallback(){
          @Override public void finishedLoading(          AssetManager assetManager,          String fileName,          Class type){
            assetManager.setReferenceCount(fileName,refCount);
          }
        }
;
        assetManager.unload(fileName);
        texture.glHandle=Texture.createGLHandle();
        assetManager.load(fileName,Texture.class,params);
      }
    }
    managedTextureList.clear();
    managedTextureList.addAll(textures);
  }
}
