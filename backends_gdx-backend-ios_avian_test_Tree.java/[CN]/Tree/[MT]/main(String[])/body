{
  TreeSet<Integer> t1=new TreeSet<Integer>(new MyCompare());
  t1.add(5);
  t1.add(2);
  t1.add(1);
  t1.add(8);
  t1.add(3);
  isEqual(printList(t1),"1, 2, 3, 5, 8");
  t1.add(4);
  isEqual(printList(t1),"1, 2, 3, 4, 5, 8");
  t1.remove(3);
  isEqual(printList(t1),"1, 2, 4, 5, 8");
  TreeSet<String> t2=new TreeSet<String>(new Comparator<String>(){
    public int compare(    String s1,    String s2){
      return s1.compareTo(s2);
    }
  }
);
  t2.add("one");
  t2.add("two");
  t2.add("three");
  t2.add("four");
  t2.add("five");
  isEqual(printList(t2),"five, four, one, three, two");
  for (int i=0; i < 1000; i++) {
    t2.add(Integer.toString(i));
  }
  expect(t2.size() == 1005);
  for (int i=0; i < 999; i++) {
    t2.remove(Integer.toString(i));
  }
  expect(t2.size() == 6);
  t2.add("kappa");
  isEqual(printList(t2),"999, five, four, kappa, one, three, two");
  TreeMap<String,String> map=new TreeMap<String,String>(new Comparator<String>(){
    public int compare(    String s1,    String s2){
      return s1.compareTo(s2);
    }
  }
);
  map.put("q","Q");
  map.put("a","A");
  map.put("b","B");
  map.put("z","Z");
  map.put("c","C");
  map.put("y","Y");
  isEqual(printMap(map),"a=A, b=B, c=C, q=Q, y=Y, z=Z");
  Collection<Integer> list=new ArrayList<Integer>();
  list.add(7);
  list.add(2);
  list.add(9);
  list.add(2);
  isEqual(printList(new TreeSet<Integer>(list)),"2, 7, 9");
}
