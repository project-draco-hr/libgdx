{
  floatArray2.clear();
  floatArray.clear();
  floatArray2.addAll(p1.getTransformedVertices());
  if (p1.getVertices().length == 0 || p2.getVertices().length == 0) {
    return false;
  }
  for (int i=0; i < p2.getTransformedVertices().length; i+=2) {
    ep1.set(p2.getTransformedVertices()[i],p2.getTransformedVertices()[i + 1]);
    if (i < p2.getTransformedVertices().length - 2) {
      ep2.set(p2.getTransformedVertices()[i + 2],p2.getTransformedVertices()[i + 3]);
    }
 else {
      ep2.set(p2.getTransformedVertices()[0],p2.getTransformedVertices()[1]);
    }
    if (floatArray2.size == 0) {
      return false;
    }
    s.set(floatArray2.get(floatArray2.size - 2),floatArray2.get(floatArray2.size - 1));
    for (int j=0; j < floatArray2.size; j+=2) {
      e.set(floatArray2.get(j),floatArray2.get(j + 1));
      if (Intersector.pointLineSide(ep2,ep1,e) > 0) {
        if (!(Intersector.pointLineSide(ep2,ep1,s) > 0)) {
          Intersector.intersectLines(s,e,ep1,ep2,ip);
          if (floatArray.size >= 2) {
            if (!((floatArray.get(floatArray.size - 2) == ip.x) && (floatArray.get(floatArray.size - 1) == ip.y))) {
              floatArray.add(ip.x);
              floatArray.add(ip.y);
            }
          }
 else {
            floatArray.add(ip.x);
            floatArray.add(ip.y);
          }
        }
        floatArray.add(e.x);
        floatArray.add(e.y);
      }
 else       if (Intersector.pointLineSide(ep2,ep1,s) > 0) {
        Intersector.intersectLines(s,e,ep1,ep2,ip);
        floatArray.add(ip.x);
        floatArray.add(ip.y);
      }
      s.set(e.x,e.y);
    }
    floatArray2.clear();
    floatArray2.addAll(floatArray);
    floatArray.clear();
  }
  if (!(floatArray2.size == 0)) {
    overlap.setVertices(floatArray2.toArray());
    return true;
  }
 else {
    return false;
  }
}
