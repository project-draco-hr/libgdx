{
  ArrayList<Vector2> p1Points=new ArrayList<Vector2>();
  ArrayList<Vector2> p2Points=new ArrayList<Vector2>();
  for (int i=0; i < p1.getVertices().length; i+=2) {
    p1Points.add(new Vector2(p1.getVertices()[i],p1.getVertices()[i + 1]));
  }
  for (int i=0; i < p2.getVertices().length; i+=2) {
    p2Points.add(new Vector2(p2.getVertices()[i],p2.getVertices()[i + 1]));
  }
  Vector2 intersectionPoint;
  ArrayList<Vector2> outputList=p1Points;
  ArrayList<Vector2> inputList=new ArrayList<Vector2>();
  Vector2 edgePoint1;
  Vector2 edgePoint2;
  for (int i=0; i < p2Points.size(); i++) {
    edgePoint1=p2Points.get(i);
    edgePoint2=i < p2Points.size() - 1 ? p2Points.get(i + 1) : p2Points.get(0);
    inputList.clear();
    for (    Vector2 p : outputList) {
      inputList.add(p);
    }
    outputList.clear();
    if (inputList.isEmpty()) {
      return false;
    }
    Vector2 s=inputList.get(inputList.size() - 1);
    for (    Vector2 e : inputList) {
      Vector2 intersection=new Vector2();
      if (Intersector.pointLineSide(edgePoint2,edgePoint1,e) > 0) {
        if (!(Intersector.pointLineSide(edgePoint2,edgePoint1,s) > 0)) {
          Intersector.intersectLines(s,e,edgePoint1,edgePoint2,intersection);
          outputList.add(intersection);
        }
        outputList.add(e);
      }
 else       if (Intersector.pointLineSide(edgePoint2,edgePoint1,s) > 0) {
        Intersector.intersectLines(s,e,edgePoint1,edgePoint2,intersection);
        outputList.add(intersection);
      }
      s=e;
    }
  }
  if (!outputList.isEmpty()) {
    float verts[]=new float[outputList.size() * 2];
    int i=0;
    for (    Vector2 vector2 : outputList) {
      verts[i]=vector2.x;
      verts[i + 1]=vector2.y;
      i+=2;
    }
    overlap.setVertices(verts);
    return true;
  }
 else {
    overlap.setVertices(new float[0]);
    return false;
  }
}
