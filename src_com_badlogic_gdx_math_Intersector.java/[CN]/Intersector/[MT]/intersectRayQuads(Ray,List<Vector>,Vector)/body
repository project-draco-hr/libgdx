{
  Vector tmp=new Vector();
  Vector best=null;
  float min_dist=Float.MAX_VALUE;
  if (quads.size() % 4 != 0)   throw new RuntimeException("quad list size is not a multiple of 4");
  for (int i=0; i < quads.size() - 3; i+=4) {
    boolean result=intersectRayTriangle(ray,quads.get(i),quads.get(i + 1),quads.get(i + 2),tmp);
    if (result == true) {
      float dist=ray.getStartPoint().tmp().sub(tmp).len();
      if (dist < min_dist) {
        min_dist=dist;
        if (best == null)         best=new Vector();
        best.set(tmp);
      }
    }
    result=intersectRayTriangle(ray,quads.get(i + 2),quads.get(i + 3),quads.get(i),tmp);
    if (result == true) {
      float dist=ray.getStartPoint().tmp().sub(tmp).len();
      if (dist < min_dist) {
        min_dist=dist;
        if (best == null)         best=new Vector();
        best.set(tmp);
      }
    }
  }
  if (best == null)   return false;
 else {
    if (intersection != null)     intersection.set(best);
    return true;
  }
}
