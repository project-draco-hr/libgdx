{
  if (mWrapMode == WrapMode.SingleFrame && R.indicesSet)   return;
  float t=mFrameDelta * invSampleRate;
  for (int i=0; i < numMeshes; i++) {
    float[] Rvertices=R.vertices[i];
    float[] Avertices=A.vertices[i];
    float[] Bvertices=B.vertices[i];
    for (int n=0; n < Avertices.length; n+=sStride) {
      float Ax=Avertices[n];
      float Bx=Bvertices[n];
      float Rx=Ax + (Bx - Ax) * t;
      float Ay=Avertices[n + 1];
      float By=Bvertices[n + 1];
      float Ry=Ay + (By - Ay) * t;
      float Az=Avertices[n + 2];
      float Bz=Bvertices[n + 2];
      float Rz=Az + (Bz - Az) * t;
      Rvertices[n]=Rx;
      Rvertices[n + 1]=Ry;
      Rvertices[n + 2]=Rz;
      Rvertices[n + 3]=Avertices[n + 3];
      Rvertices[n + 4]=Avertices[n + 4];
      Ax=Avertices[n + 5];
      Bx=Bvertices[n + 5];
      Rx=Ax + (Bx - Ax) * t;
      Ay=Avertices[n + 6];
      By=Bvertices[n + 6];
      Ry=Ay + (By - Ay) * t;
      Az=Avertices[n + 7];
      Bz=Bvertices[n + 7];
      Rz=Az + (Bz - Az) * t;
      Rvertices[n + 5]=Rx;
      Rvertices[n + 6]=Ry;
      Rvertices[n + 7]=Rz;
    }
    if (!R.indicesSet) {
      for (int n=0; n < A.indices[i].length; n++) {
        R.indices[i][n]=A.indices[i][n];
      }
    }
  }
  R.indicesSet=true;
  if (A.taggedJoint != null) {
    interpolateJoints(t);
  }
}
