{
  boolean done=false;
  boolean popped=false;
  Map<Integer,Record> records=new HashMap();
  Map<Integer,Node> nodes=new HashMap();
  List<Instance> stack=new ArrayList();
  Record[] query=new Record[queryClasses.length];
  Record roots=new Record(-1,"<roots>");
  records.put(roots.key,roots);
  while (!done) {
    int flag=in.read();
switch (flag) {
case Root:
{
        stack.clear();
        push(stack,new Instance(readInt(in)));
        query(nodes,query,stack);
        popped=false;
      }
    break;
case ClassName:
{
    String name=readString(in);
    Record r=record(records,peek(stack).key);
    r.name=name;
    for (int i=0; i < queryClasses.length; ++i) {
      if (queryClasses[i].equals(name)) {
        query[i]=r;
      }
    }
    query(nodes,query,stack);
  }
break;
case Push:
{
int key=readInt(in);
if (!popped) {
  peek(stack).record=record(records,key);
}
push(stack,new Instance(key));
query(nodes,query,stack);
popped=false;
}
break;
case Pop:
{
pop(stack);
popped=true;
}
break;
case Size:
{
peek(stack).size=readInt(in);
}
break;
case -1:
done=true;
break;
default :
throw new RuntimeException("bad flag: " + flag);
}
}
return records;
}
