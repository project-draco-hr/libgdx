{
  final StringBuilder buffer=new StringBuilder();
  final String nl="\n";
  int lineHeight=(int)((stbTrueTypeFont.getFontVMetrics().ascent - stbTrueTypeFont.getFontVMetrics().descent) * fontScaleH + 0.5f);
  int base=(int)(stbTrueTypeFont.getFontVMetrics().ascent * fontScaleH + 0.5f);
  buffer.append(nl);
  buffer.append("common lineHeight=").append(lineHeight).append(" base=").append(base).append(" ignored ignored").append(nl);
  buffer.append("page id=0 file=\"ignored.ignored\"").append(nl);
  buffer.append("chars count=").append(characterRegions.size() + 1).append(nl);
  buffer.append("char id=32   x=0     y=0     width=0     height=0     xoffset=0     yoffset=").append(lineHeight).append("    xadvance=").append(lineHeight / 2).append("     page=0  chnl=0").append(nl);
  if (characterRegions.size() == 0) {
    buffer.append("char id=33   x=0     y=0     width=1     height=1     xoffset=0     yoffset=").append(lineHeight).append("    xadvance=").append(lineHeight / 2).append("     page=0  chnl=0").append(nl);
  }
  Set<Character> keySet=characterRegions.keySet();
  final String s1="char id=";
  final String s2="   x=";
  final String s3="     y=";
  final String s4="     width=";
  final String s5="     height=";
  final String s6="     xoffset=";
  final String s7="     yoffset=";
  final String s8="    xadvance=";
  final String s9="     page=0  chnl=0";
  for (  Character KEY : keySet) {
    final CharacterRegion cR=characterRegions.get(KEY);
    buffer.append(s1).append((int)KEY).append(s2).append(cR.x).append(s3).append(cR.y).append(s4).append(cR.w).append(s5).append(cR.h).append(s6).append(cR.xOffset).append(s7).append(cR.yOffset).append(s8).append(cR.xAdvance).append(s9).append(nl);
  }
  if (kernings == null || kernings.size() == 0) {
    buffer.append("kernings count=-1").append(nl);
  }
 else {
    buffer.append("kernings count=").append(kernings.size()).append(nl);
    final String k1="kerning first=";
    final String k2="  second=";
    final String k3="  amount=";
    final Set<Character[]> kerningKey=kernings.keySet();
    for (    Character[] KEY : kerningKey) {
      buffer.append(k1).append((int)KEY[0]).append(k2).append((int)KEY[1]).append(k3).append(kernings.get(KEY)).append(nl);
    }
  }
  return new ByteArrayInputStream(buffer.toString().getBytes());
}
