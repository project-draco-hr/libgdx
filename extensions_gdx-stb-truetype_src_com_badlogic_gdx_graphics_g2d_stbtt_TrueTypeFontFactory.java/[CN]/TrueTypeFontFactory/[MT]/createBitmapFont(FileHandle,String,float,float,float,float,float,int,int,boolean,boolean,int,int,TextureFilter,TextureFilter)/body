{
  HashMap<Character,CharacterRegion> characterRegions=new HashMap<Character,CharacterRegion>();
  StbTrueTypeFont stbTrueTypeFont=new StbTrueTypeFont(fontFile);
  float[] fontScales=generateFontScales(stbTrueTypeFont,worldWidth,worldHeight,fontPixelsHeight,viewportWidth,viewportHeight);
  float fontScaleW=fontScales[0];
  float fontScaleH=fontScales[1];
  Bitmap[] glyphBitmaps=generateGlyphs(stbTrueTypeFont,characters,fontScaleW,fontScaleH);
  Texture fontTexture=generateFontTexture(stbTrueTypeFont,fontScaleW,glyphBitmaps,characterRegions,characters,fontPadding,minFontTextureSize,ignoreGlyphOverflow,maxFontTextureSizeW,maxFontTextureSizeH,minTextureFilter,magTextureFilter);
  HashMap<Character[],Integer> kernings=null;
  if (generateKernings) {
    kernings=new HashMap<Character[],Integer>();
    generateKernings(stbTrueTypeFont,kernings,characterRegions,fontScaleW);
  }
  for (int i=0; i < glyphBitmaps.length; i++) {
    if (glyphBitmaps[i] != null) {
      glyphBitmaps[i].dispose();
    }
  }
  InputStream hieroFontFileBuffer=generateHieroFontFile(stbTrueTypeFont,characterRegions,fontScaleH,kernings);
  stbTrueTypeFont.dispose();
  FileHandle fH=new TrueTypeFontHieroFileHandle(hieroFontFileBuffer);
  BitmapFontData bitmapFontData=new BitmapFontData(fH,false);
  TextureRegion region=new TextureRegion(fontTexture);
  return new BitmapFont(bitmapFontData,region,false);
}
