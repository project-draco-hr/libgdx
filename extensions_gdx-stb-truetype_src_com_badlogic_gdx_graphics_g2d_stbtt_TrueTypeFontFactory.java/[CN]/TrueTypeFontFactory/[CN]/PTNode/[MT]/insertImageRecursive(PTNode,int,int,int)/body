{
  if (!node.leaf) {
    PTNode newNode=insertImageRecursive(node.childA,imageID,imageWidth,imageHeight);
    if (newNode != null) {
      return newNode;
    }
    return insertImageRecursive(node.childB,imageID,imageWidth,imageHeight);
  }
  if (node.imageID != -1) {
    return null;
  }
  final int rWidth=node.rR - node.rL;
  final int rHeight=node.rB - node.rT;
  if (rWidth < imageWidth || rHeight < imageHeight) {
    return null;
  }
  if (rWidth == imageWidth && rHeight == imageHeight) {
    node.leaf=true;
    node.imageID=imageID;
    return node;
  }
  PTNode childA=new PTNode();
  PTNode childB=new PTNode();
  int dW=rWidth - imageWidth;
  int dH=rHeight - imageHeight;
  if (dW > dH) {
    childA.rL=node.rL;
    childA.rT=node.rT;
    childA.rR=node.rL + imageWidth;
    childA.rB=node.rB;
    childB.rL=node.rL + imageWidth;
    childB.rT=node.rT;
    childB.rR=node.rR;
    childB.rB=node.rB;
  }
 else {
    childA.rL=node.rL;
    childA.rT=node.rT;
    childA.rR=node.rR;
    childA.rB=node.rT + imageHeight;
    childB.rL=node.rL;
    childB.rT=node.rT + imageHeight;
    childB.rR=node.rR;
    childB.rB=node.rB;
  }
  node.leaf=false;
  node.childA=childA;
  node.childB=childB;
  return insertImageRecursive(node.childA,imageID,imageWidth,imageHeight);
}
