{
  Array<Cell> cells=this.cells;
  int cellCount=cells.size;
  if (sizeInvalid)   computeSize();
  float padLeft=this.padLeft.get(this);
  float hpadding=padLeft + padRight.get(this);
  float padTop=this.padTop.get(this);
  float vpadding=padTop + padBottom.get(this);
  int columns=this.columns, rows=this.rows;
  float[] expandWidth=this.expandWidth, expandHeight=this.expandHeight;
  float[] columnWidth=this.columnWidth, rowHeight=this.rowHeight;
  float totalExpandWidth=0, totalExpandHeight=0;
  for (int i=0; i < columns; i++)   totalExpandWidth+=expandWidth[i];
  for (int i=0; i < rows; i++)   totalExpandHeight+=expandHeight[i];
  float[] columnWeightedWidth;
  float totalGrowWidth=tablePrefWidth - tableMinWidth;
  if (totalGrowWidth == 0)   columnWeightedWidth=columnMinWidth;
 else {
    float extraWidth=Math.min(totalGrowWidth,Math.max(0,layoutWidth - tableMinWidth));
    columnWeightedWidth=Table.columnWeightedWidth=ensureSize(Table.columnWeightedWidth,columns);
    float[] columnMinWidth=this.columnMinWidth, columnPrefWidth=this.columnPrefWidth;
    for (int i=0; i < columns; i++) {
      float growWidth=columnPrefWidth[i] - columnMinWidth[i];
      float growRatio=growWidth / totalGrowWidth;
      columnWeightedWidth[i]=columnMinWidth[i] + extraWidth * growRatio;
    }
  }
  float[] rowWeightedHeight;
  float totalGrowHeight=tablePrefHeight - tableMinHeight;
  if (totalGrowHeight == 0)   rowWeightedHeight=rowMinHeight;
 else {
    rowWeightedHeight=Table.rowWeightedHeight=ensureSize(Table.rowWeightedHeight,rows);
    float extraHeight=Math.min(totalGrowHeight,Math.max(0,layoutHeight - tableMinHeight));
    float[] rowMinHeight=this.rowMinHeight, rowPrefHeight=this.rowPrefHeight;
    for (int i=0; i < rows; i++) {
      float growHeight=rowPrefHeight[i] - rowMinHeight[i];
      float growRatio=growHeight / totalGrowHeight;
      rowWeightedHeight[i]=rowMinHeight[i] + extraHeight * growRatio;
    }
  }
  for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    int column=c.column, row=c.row;
    Actor a=c.actor;
    float spannedWeightedWidth=0;
    for (int ii=column, nn=ii + c.colspan; ii < nn; ii++)     spannedWeightedWidth+=columnWeightedWidth[ii];
    float weightedHeight=rowWeightedHeight[row];
    float prefWidth=c.prefWidth.get(a);
    float prefHeight=c.prefHeight.get(a);
    float minWidth=c.minWidth.get(a);
    float minHeight=c.minHeight.get(a);
    float maxWidth=c.maxWidth.get(a);
    float maxHeight=c.maxHeight.get(a);
    if (prefWidth < minWidth)     prefWidth=minWidth;
    if (prefHeight < minHeight)     prefHeight=minHeight;
    if (maxWidth > 0 && prefWidth > maxWidth)     prefWidth=maxWidth;
    if (maxHeight > 0 && prefHeight > maxHeight)     prefHeight=maxHeight;
    c.actorWidth=Math.min(spannedWeightedWidth - c.computedPadLeft - c.computedPadRight,prefWidth);
    c.actorHeight=Math.min(weightedHeight - c.computedPadTop - c.computedPadBottom,prefHeight);
    if (c.colspan == 1)     columnWidth[column]=Math.max(columnWidth[column],spannedWeightedWidth);
    rowHeight[row]=Math.max(rowHeight[row],weightedHeight);
  }
  if (totalExpandWidth > 0) {
    float extra=layoutWidth - hpadding;
    for (int i=0; i < columns; i++)     extra-=columnWidth[i];
    float used=0;
    int lastIndex=0;
    for (int i=0; i < columns; i++) {
      if (expandWidth[i] == 0)       continue;
      float amount=extra * expandWidth[i] / totalExpandWidth;
      columnWidth[i]+=amount;
      used+=amount;
      lastIndex=i;
    }
    columnWidth[lastIndex]+=extra - used;
  }
  if (totalExpandHeight > 0) {
    float extra=layoutHeight - vpadding;
    for (int i=0; i < rows; i++)     extra-=rowHeight[i];
    float used=0;
    int lastIndex=0;
    for (int i=0; i < rows; i++) {
      if (expandHeight[i] == 0)       continue;
      float amount=extra * expandHeight[i] / totalExpandHeight;
      rowHeight[i]+=amount;
      used+=amount;
      lastIndex=i;
    }
    rowHeight[lastIndex]+=extra - used;
  }
  for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    int colspan=c.colspan;
    if (colspan == 1)     continue;
    float extraWidth=0;
    for (int column=c.column, nn=column + colspan; column < nn; column++)     extraWidth+=columnWeightedWidth[column] - columnWidth[column];
    extraWidth-=Math.max(0,c.computedPadLeft + c.computedPadRight);
    extraWidth/=colspan;
    if (extraWidth > 0) {
      for (int column=c.column, nn=column + colspan; column < nn; column++)       columnWidth[column]+=extraWidth;
    }
  }
  float tableWidth=hpadding, tableHeight=vpadding;
  for (int i=0; i < columns; i++)   tableWidth+=columnWidth[i];
  for (int i=0; i < rows; i++)   tableHeight+=rowHeight[i];
  int align=this.align;
  float x=layoutX + padLeft;
  if ((align & Align.right) != 0)   x+=layoutWidth - tableWidth;
 else   if ((align & Align.left) == 0)   x+=(layoutWidth - tableWidth) / 2;
  float y=layoutY + padTop;
  if ((align & Align.bottom) != 0)   y+=layoutHeight - tableHeight;
 else   if ((align & Align.top) == 0)   y+=(layoutHeight - tableHeight) / 2;
  float currentX=x, currentY=y;
  for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    float spannedCellWidth=0;
    for (int column=c.column, nn=column + c.colspan; column < nn; column++)     spannedCellWidth+=columnWidth[column];
    spannedCellWidth-=c.computedPadLeft + c.computedPadRight;
    currentX+=c.computedPadLeft;
    if (c.fillX > 0) {
      c.actorWidth=spannedCellWidth * c.fillX;
      float maxWidth=c.maxWidth.get(c.actor);
      if (maxWidth > 0)       c.actorWidth=Math.min(c.actorWidth,maxWidth);
    }
    if (c.fillY > 0) {
      c.actorHeight=rowHeight[c.row] * c.fillY - c.computedPadTop - c.computedPadBottom;
      float maxHeight=c.maxHeight.get(c.actor);
      if (maxHeight > 0)       c.actorHeight=Math.min(c.actorHeight,maxHeight);
    }
    if ((c.align & Align.left) != 0)     c.actorX=currentX;
 else     if ((c.align & Align.right) != 0)     c.actorX=currentX + spannedCellWidth - c.actorWidth;
 else     c.actorX=currentX + (spannedCellWidth - c.actorWidth) / 2;
    if ((c.align & Align.top) != 0)     c.actorY=currentY + c.computedPadTop;
 else     if ((c.align & Align.bottom) != 0)     c.actorY=currentY + rowHeight[c.row] - c.actorHeight - c.computedPadBottom;
 else     c.actorY=currentY + (rowHeight[c.row] - c.actorHeight + c.computedPadTop - c.computedPadBottom) / 2;
    if (c.endRow) {
      currentX=x;
      currentY+=rowHeight[c.row];
    }
 else     currentX+=spannedCellWidth + c.computedPadRight;
  }
  if (debug == Debug.none)   return;
  if (debugRects != null) {
    StageDebugRenderer.debugRectPool.freeAll(debugRects);
    debugRects.clear();
  }
  currentX=x;
  currentY=y;
  if (debug == Debug.table || debug == Debug.all) {
    addDebugRect(layoutX,layoutY,layoutWidth,layoutHeight,debugColor);
    addDebugRect(x,y,tableWidth - hpadding,tableHeight - vpadding,debugColor);
  }
  for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    if (debug == Debug.actor || debug == Debug.all)     addDebugRect(c.actorX,c.actorY,c.actorWidth,c.actorHeight,Actor.debugColor);
    float spannedCellWidth=0;
    for (int column=c.column, nn=column + c.colspan; column < nn; column++)     spannedCellWidth+=columnWidth[column];
    spannedCellWidth-=c.computedPadLeft + c.computedPadRight;
    currentX+=c.computedPadLeft;
    if (debug == Debug.cell || debug == Debug.all) {
      addDebugRect(currentX,currentY + c.computedPadTop,spannedCellWidth,rowHeight[c.row] - c.computedPadTop - c.computedPadBottom,debugCellColor);
    }
    if (c.endRow) {
      currentX=x;
      currentY+=rowHeight[c.row];
    }
 else     currentX+=spannedCellWidth + c.computedPadRight;
  }
}
