{
  sizeInvalid=false;
  Array<Cell> cells=this.cells;
  int cellCount=cells.size;
  if (cellCount > 0 && !cells.peek().endRow)   endRow();
  int columns=this.columns, rows=this.rows;
  float[] columnMinWidth=this.columnMinWidth=ensureSize(this.columnMinWidth,columns);
  float[] rowMinHeight=this.rowMinHeight=ensureSize(this.rowMinHeight,rows);
  float[] columnPrefWidth=this.columnPrefWidth=ensureSize(this.columnPrefWidth,columns);
  float[] rowPrefHeight=this.rowPrefHeight=ensureSize(this.rowPrefHeight,rows);
  float[] columnWidth=this.columnWidth=ensureSize(this.columnWidth,columns);
  float[] rowHeight=this.rowHeight=ensureSize(this.rowHeight,rows);
  float[] expandWidth=this.expandWidth=ensureSize(this.expandWidth,columns);
  float[] expandHeight=this.expandHeight=ensureSize(this.expandHeight,rows);
  float spaceRightLast=0;
  for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    int column=c.column, row=c.row, colspan=c.colspan;
    if (c.expandY != 0 && expandHeight[row] == 0)     expandHeight[row]=c.expandY;
    if (colspan == 1 && c.expandX != 0 && expandWidth[column] == 0)     expandWidth[column]=c.expandX;
    c.computedPadLeft=c.getPadLeft() + (column == 0 ? 0 : Math.max(0,c.getSpaceLeft() - spaceRightLast));
    c.computedPadTop=c.getPadTop();
    if (c.cellAboveIndex != -1) {
      Cell above=cells.get(c.cellAboveIndex);
      c.computedPadTop+=Math.max(0,c.getSpaceTop() - above.getSpaceBottom());
    }
    float spaceRight=c.getSpaceRight();
    c.computedPadRight=c.getPadRight() + ((column + colspan) == columns ? 0 : spaceRight);
    c.computedPadBottom=c.getPadBottom() + (row == rows - 1 ? 0 : c.getSpaceBottom());
    spaceRightLast=spaceRight;
    float prefWidth=c.prefWidth.get(c);
    float prefHeight=c.prefHeight.get(c);
    float minWidth=c.minWidth.get(c);
    float minHeight=c.minHeight.get(c);
    float maxWidth=c.maxWidth.get(c);
    float maxHeight=c.maxHeight.get(c);
    if (prefWidth < minWidth)     prefWidth=minWidth;
    if (prefHeight < minHeight)     prefHeight=minHeight;
    if (maxWidth > 0 && prefWidth > maxWidth)     prefWidth=maxWidth;
    if (maxHeight > 0 && prefHeight > maxHeight)     prefHeight=maxHeight;
    if (colspan == 1) {
      float hpadding=c.computedPadLeft + c.computedPadRight;
      columnPrefWidth[column]=Math.max(columnPrefWidth[column],prefWidth + hpadding);
      columnMinWidth[column]=Math.max(columnMinWidth[column],minWidth + hpadding);
    }
    float vpadding=c.computedPadTop + c.computedPadBottom;
    rowPrefHeight[row]=Math.max(rowPrefHeight[row],prefHeight + vpadding);
    rowMinHeight[row]=Math.max(rowMinHeight[row],minHeight + vpadding);
  }
  outer:   for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    if (c.expandX == 0)     continue;
    int column=c.column;
    int nn=column + c.colspan;
    for (int ii=column; ii < nn; ii++)     if (expandWidth[ii] != 0)     continue outer;
    int expandX=c.expandX;
    for (int ii=column; ii < nn; ii++)     expandWidth[ii]=expandX;
  }
  for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    int colspan=c.colspan;
    if (colspan == 1)     continue;
    int column=c.column;
    float minWidth=c.minWidth.get(c);
    float prefWidth=c.prefWidth.get(c);
    float maxWidth=c.maxWidth.get(c);
    if (prefWidth < minWidth)     prefWidth=minWidth;
    if (maxWidth > 0 && prefWidth > maxWidth)     prefWidth=maxWidth;
    float spannedMinWidth=-(c.computedPadLeft + c.computedPadRight), spannedPrefWidth=spannedMinWidth;
    for (int ii=column, nn=ii + colspan; ii < nn; ii++) {
      spannedMinWidth+=columnMinWidth[ii];
      spannedPrefWidth+=columnPrefWidth[ii];
    }
    float totalExpandWidth=0;
    for (int ii=column, nn=ii + colspan; ii < nn; ii++)     totalExpandWidth+=expandWidth[ii];
    float extraMinWidth=Math.max(0,minWidth - spannedMinWidth);
    float extraPrefWidth=Math.max(0,prefWidth - spannedPrefWidth);
    for (int ii=column, nn=ii + colspan; ii < nn; ii++) {
      float ratio=totalExpandWidth == 0 ? 1f / colspan : expandWidth[ii] / totalExpandWidth;
      columnMinWidth[ii]+=extraMinWidth * ratio;
      columnPrefWidth[ii]+=extraPrefWidth * ratio;
    }
  }
  float uniformMinWidth=0, uniformMinHeight=0;
  float uniformPrefWidth=0, uniformPrefHeight=0;
  for (int i=0; i < cellCount; i++) {
    Cell c=cells.get(i);
    if (c.uniformX == Boolean.TRUE && c.colspan == 1) {
      float hpadding=c.computedPadLeft + c.computedPadRight;
      uniformMinWidth=Math.max(uniformMinWidth,columnMinWidth[c.column] - hpadding);
      uniformPrefWidth=Math.max(uniformPrefWidth,columnPrefWidth[c.column] - hpadding);
    }
    if (c.uniformY == Boolean.TRUE) {
      float vpadding=c.computedPadTop + c.computedPadBottom;
      uniformMinHeight=Math.max(uniformMinHeight,rowMinHeight[c.row] - vpadding);
      uniformPrefHeight=Math.max(uniformPrefHeight,rowPrefHeight[c.row] - vpadding);
    }
  }
  if (uniformPrefWidth > 0 || uniformPrefHeight > 0) {
    for (int i=0; i < cellCount; i++) {
      Cell c=cells.get(i);
      if (uniformPrefWidth > 0 && c.uniformX == Boolean.TRUE && c.colspan == 1) {
        float hpadding=c.computedPadLeft + c.computedPadRight;
        columnMinWidth[c.column]=uniformMinWidth + hpadding;
        columnPrefWidth[c.column]=uniformPrefWidth + hpadding;
      }
      if (uniformPrefHeight > 0 && c.uniformY == Boolean.TRUE) {
        float vpadding=c.computedPadTop + c.computedPadBottom;
        rowMinHeight[c.row]=uniformMinHeight + vpadding;
        rowPrefHeight[c.row]=uniformPrefHeight + vpadding;
      }
    }
  }
  tableMinWidth=0;
  tableMinHeight=0;
  tablePrefWidth=0;
  tablePrefHeight=0;
  for (int i=0; i < columns; i++) {
    tableMinWidth+=columnMinWidth[i];
    tablePrefWidth+=columnPrefWidth[i];
  }
  for (int i=0; i < rows; i++) {
    tableMinHeight+=rowMinHeight[i];
    tablePrefHeight+=Math.max(rowMinHeight[i],rowPrefHeight[i]);
  }
  float hpadding=getPadLeft() + getPadRight();
  float vpadding=getPadTop() + getPadBottom();
  tableMinWidth=tableMinWidth + hpadding;
  tableMinHeight=tableMinHeight + vpadding;
  tablePrefWidth=Math.max(tablePrefWidth + hpadding,tableMinWidth);
  tablePrefHeight=Math.max(tablePrefHeight + vpadding,tableMinHeight);
}
