{
  particle.currentLife-=deltaMillis;
  if (particle.currentLife <= 0) {
    return false;
  }
  float lostLifePercent=1 - particle.currentLife / (float)particle.life;
  if ((updateFlags & UPDATE_SCALE) != 0) {
    particle.setScale(particle.scale + particle.scaleDiff * scaleValue.getScale(lostLifePercent));
  }
  if ((updateFlags & UPDATE_VELOCITY) != 0) {
    float velocity=(particle.velocity + particle.velocityDiff * velocityValue.getScale(lostLifePercent)) * delta;
    float velocityX, velocityY;
    if ((updateFlags & UPDATE_ANGLE) != 0) {
      float angle=particle.angle + particle.angleDiff * angleValue.getScale(lostLifePercent);
      velocityX=velocity * MathUtils.cosDeg(angle);
      velocityY=velocity * MathUtils.sinDeg(angle);
      if ((updateFlags & UPDATE_ROTATION) != 0) {
        float rotation=particle.rotation + particle.rotationDiff * rotationValue.getScale(lostLifePercent);
        if (aligned) {
          rotation+=angle;
        }
        particle.setRotation(rotation);
      }
    }
 else {
      velocityX=velocity * particle.angleCos;
      velocityY=velocity * particle.angleSin;
      if (aligned || (updateFlags & UPDATE_ROTATION) != 0) {
        float rotation=particle.rotation + particle.rotationDiff * rotationValue.getScale(lostLifePercent);
        if (aligned) {
          rotation+=particle.angle;
        }
        particle.setRotation(rotation);
      }
    }
    if ((updateFlags & UPDATE_WIND) != 0) {
      velocityX+=(particle.wind + particle.windDiff * windValue.getScale(lostLifePercent)) * delta;
    }
    if ((updateFlags & UPDATE_GRAVITY) != 0) {
      velocityY+=(particle.gravity + particle.gravityDiff * gravityValue.getScale(lostLifePercent)) * delta;
    }
    particle.translate(velocityX,velocityY);
  }
 else {
    if ((updateFlags & UPDATE_ROTATION) != 0) {
      particle.setRotation(particle.rotation + particle.rotationDiff * rotationValue.getScale(lostLifePercent));
    }
  }
  float[] color;
  if ((updateFlags & UPDATE_TINT) != 0) {
    color=tintValue.getColor(lostLifePercent);
  }
 else {
    color=particle.tint;
  }
  particle.setColor(color[0],color[1],color[2],particle.transparency + particle.transparencyDiff * transparencyValue.getScale(lostLifePercent));
  return true;
}
