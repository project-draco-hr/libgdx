{
  if (input.isTouched()) {
    delta=delta + 0.0485f;
    Ray ray=camera.getPickRay(input.getX(),input.getY());
    if (Intersector.intersectRayTriangles(ray,chunk.vertices,chunk.indices,4,intersection)) {
      intersected=true;
    }
    Vector3 v90=camera.direction.cpy();
    Quaternion q=new Quaternion(camera.up,90);
    q.transform(v90);
    v90.y=0;
    Quaternion qUpDown=new Quaternion(v90,Gdx.input.getDeltaY());
    Quaternion qLeftRight=new Quaternion(camera.up,-Gdx.input.getDeltaX());
    qUpDown.transform(camera.direction);
    qLeftRight.transform(camera.direction);
  }
 else {
    intersected=false;
  }
  if (input.isKeyPressed(Keys.W)) {
    Vector3 forward=new Vector3().set(camera.direction).mul(delta);
    camera.position.add(forward);
  }
  if (input.isKeyPressed(Keys.S)) {
    Vector3 backward=new Vector3().set(camera.direction).mul(delta);
    camera.position.sub(backward);
  }
  if (input.isKeyPressed(Keys.A)) {
    Vector3 left=new Vector3().set(camera.direction.cpy().crs(camera.up).nor()).mul(delta);
    camera.position.sub(left);
  }
  if (input.isKeyPressed(Keys.D)) {
    Vector3 right=new Vector3().set(camera.direction.cpy().crs(camera.up).nor()).mul(delta);
    camera.position.add(right);
  }
  Vector3 forward=new Vector3().set(camera.direction).mul(delta);
  camera.position.add(forward);
  int nextId=(MathUtils.floor(camera.position.x) * 33) + MathUtils.floor(camera.position.z);
  if (nextId > heightmap.length - 1 || nextId < 0) {
    camera.position.y=5;
  }
 else {
    camera.position.y=this.heightmap[nextId] * 4 + 1;
  }
}
