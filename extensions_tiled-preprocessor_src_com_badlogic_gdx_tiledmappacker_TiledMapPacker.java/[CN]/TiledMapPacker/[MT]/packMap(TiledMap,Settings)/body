{
  packer=new TexturePacker(settings);
  BufferedImage tile;
  Vector2 tileLocation;
  TileSetLayout packerTileSet;
  Graphics g;
  ArrayList<Integer> tilesOnMap=new ArrayList<Integer>();
  for (  TiledLayer layer : map.layers) {
    for (int row=0; row < layer.height; row++) {
      for (int col=0; col < layer.width; col++) {
        if (layer.tile[row][col] != 0) {
          tileCount++;
          if (!tilesOnMap.contains(layer.tile[row][col])) {
            tilesOnMap.add(layer.tile[row][col]);
          }
        }
      }
    }
  }
  for (int i=0; i < tilesOnMap.size(); i++) {
    packerTileSet=getTileSetLayout(tilesOnMap.get(i));
    tileLocation=packerTileSet.getLocation(tilesOnMap.get(i));
    tile=new BufferedImage(packerTileSet.tileSet.tileWidth,packerTileSet.tileSet.tileHeight,BufferedImage.TYPE_4BYTE_ABGR);
    g=tile.createGraphics();
    g.drawImage(packerTileSet.image,0,0,packerTileSet.tileSet.tileWidth,packerTileSet.tileSet.tileHeight,(int)tileLocation.x,(int)tileLocation.y,(int)tileLocation.x + packerTileSet.tileSet.tileWidth,(int)tileLocation.y + packerTileSet.tileSet.tileHeight,null);
    if (isBlended(tile))     setBlended(tilesOnMap.get(i));
    packer.addImage(tile,map.tmxFile.nameWithoutExtension() + "_" + tilesOnMap.get(i));
  }
  packer.process(outputDir,new File(outputDir,map.tmxFile.nameWithoutExtension() + " packfile"),tmxFileHandle.nameWithoutExtension());
  writeUpdatedTMX();
}
